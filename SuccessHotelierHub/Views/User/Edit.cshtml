@model SuccessHotelierHub.Models.UserVM
@{
    ViewBag.Title = "Edit Student";
}

<section class="content-header">
    <h1>
        Student <small>Edit</small>
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Student</li>
        <li class="active">Edit</li>
    </ol>
</section>

<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Student Details</h3>
        </div>
        @using (Html.BeginForm("Edit", "User", FormMethod.Post, new { id = "frmUser", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!--HIDDEN FIELD-->
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.UserId)
            <!--HIDDEN FIELD-->

            <div class="box-body pt_10 pb-0">
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CollegeGroupId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.CollegeGroupId,
                                (IEnumerable<SelectListItem>)ViewBag.CollegeGroupList, "-- Select College Group --",
                                htmlAttributes: new { @class = "form-control", onchange = "loadTutorDetail();" })
                        @Html.ValidationMessageFor(m => m.CollegeGroupId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.TutorId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.TutorId,
                                (IEnumerable<SelectListItem>)ViewBag.TutorList, "-- Select Tutor --",
                                htmlAttributes: new { @class = "form-control"})
                        @Html.ValidationMessageFor(m => m.TutorId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.Name, new { @class = "required-label" })
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Name" })
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.Email, new { @class = "required-label" })
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CashierNumber, new { @class = "required-label" })
                        @Html.TextBoxFor(m => m.CashierNumber, new { @class = "form-control", placeholder = "Cashier #" })
                        @Html.ValidationMessageFor(m => m.CashierNumber, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.TelephoneNo)
                        @Html.TextBoxFor(m => m.TelephoneNo, new { @class = "form-control", placeholder = "Telephone Number" })
                    </div>
                    <div class="col-md-6 form-group">
                        @Html.LabelFor(m => m.Address)
                        @Html.TextAreaFor(m => m.Address, new { @class = "form-control", @rows = "3", placeholder = "Address" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 form-group m-t-lg">
                        <label class="container1" for="IsActive">
                            Is Active
                            @Html.CheckBoxFor(m => m.IsActive)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                    <div class="col-md-3 form-group m-t-lg padding_right">
                        <label class="container1" for="IsRecordActivity">
                            Record User's Activity
                            @Html.CheckBoxFor(m => m.IsRecordActivity)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                    <div class="col-md-3 form-group m-t-lg padding_right">
                        <label class="container1" for="IsAllowToDeleteProfile">
                            Can Delete Profile
                            @Html.CheckBoxFor(m => m.IsAllowToDeleteProfile)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                </div>
            </div>
            <div class="box-footer text-right">
                <button type="button" class="btn btn-success m-r-xs" onclick="return updateUser();">Update</button>
                <a href="@Url.Action("List", "User")" class="btn btn-danger">Cancel</a>
            </div>
        }
    </div>
</section>

<script type="text/javascript">

    function validateUser() {

        var errorMessage = "";
        var blnValid = true;


        if ($("#frmUser").valid() == false) {
            showToaster("Please fill all the Required Fields first", ToasterType.ERROR);
            blnValid = false;
        }

        return blnValid;
    }

    function loadTutorDetail() {
        var collegeGroupId = $('form#frmUser #CollegeGroupId').val();

        if (!IsNullOrEmpty(collegeGroupId)) {
            //Call ajax to get tutor details by college group id.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/User/GetTutorDetailByCollegeGroupId")',
                type: 'GET',
                data: {
                    collegeGroupId: collegeGroupId
                },
                success: function (result) {
                    if (!IsNullOrEmpty(result)) {
                        var optionHtml = "";
                        optionHtml += "<option value=''>-- Select Tutor --</option>";
                        if (result.IsSuccess == true) {
                            for (i = 0; i < result.data.length; i++) {
                                optionHtml += "<option value='" + result.data[i].Id + "'>" + result.data[i].Name + "</option>";
                            }
                        }
                        $('form#frmUser #TutorId').html(optionHtml);
                    }
                }
            });
        } else {
            //Remove all <option> items from dropdown except first <option> item.
            $('form#frmUser #TutorId').html("");
            $('form#frmUser #TutorId').append($("<option></option>").val("").html("-- Select Tutor --"));
        }
    }



    function updateUser() {

        if (validateUser()) {
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/User/Edit")',
                type: 'POST',
                data: $('#frmUser').serialize(),
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    }
                    else {
                        showToaster("Student details updated successfully", ToasterType.SUCCESS);

                        setTimeout(function () {
                            redirectTo('@Url.Content("~/User/List")');
                        }, 1000);
                    }
                }
            });
            return false;
        }
    }
</script>
