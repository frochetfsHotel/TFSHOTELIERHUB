@model SuccessHotelierHub.Models.UserLoginTimeVM
@using SuccessHotelierHub.Utility;
@{
    ViewBag.Title = "Student Login Time";

    var configurationType = Model.ConfigurationType;

    var loginStartTimeText = Model.LoginStartTimeText;
    var loginEndTimeText = Model.LoginEndTimeText;    
}

<section class="content-header">
    <h1>
        Configure Login Time
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Tutor</li>
        <li class="active">Configure Login Time</li>
    </ol>
</section>

<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Configure Login Time Details</h3>
        </div>
        @using (Html.BeginForm("UserLoginTime", "Tutor", FormMethod.Post, new { id = "frmUserLoginTime", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!--HIDDEN FIELD-->
            @Html.HiddenFor(m => m.TutorId)
            @Html.HiddenFor(m => m.ConfigurationType)
            <!--HIDDEN FIELD-->

            <div class="box-body pt_10 pb-0">
                <div class="col-xs-12 user-list-radio m-b-sm">
                    <div class="row">
                        <label class="label-bold m-r-lg">Type : </label>
                        <label class="container_radio" for="rbIsAlways">
                            <span>Always</span>
                            <input type="radio" class="cursor-P flat-red" id="rbIsAlways" name="ConfigurationType" value="@UserLoginConfigurationType.ALWAYS" onchange="showHideTimeFrame('@UserLoginConfigurationType.ALWAYS')">
                            <span class="checkmark_radio"></span>
                        </label>
                        <label class="container_radio ml-35" for="rbIsSetLimit">
                            <span>Set Limit</span>
                            <input type="radio" class="cursor-P flat-red" id="rbIsSetLimit" name="ConfigurationType" value="@UserLoginConfigurationType.SET_LIMIT" onchange="showHideTimeFrame('@UserLoginConfigurationType.SET_LIMIT')">
                            <span class="checkmark_radio"></span>
                        </label>
                        <label class="container_radio ml-35" for="rbIsDontAllow">
                            <span>Restricted</span>
                            <input type="radio" class="cursor-P flat-red" id="rbIsDontAllow" name="ConfigurationType" value="@UserLoginConfigurationType.RESTRICTED" onchange="showHideTimeFrame('@UserLoginConfigurationType.RESTRICTED')">
                            <span class="checkmark_radio"></span>
                        </label>
                    </div>
                </div>

                <div class="col-xs-12 padding-zero m-t-md" id="divShowTimeFrame" style="display:none;">
                    @*<div class="row">
                            <div class="col-md-4 form-group">
                                <div class="bootstrap-timepicker" data-date-format="HH:mm">
                                    @Html.LabelFor(m => m.LoginStartTimeText, new { @class = "required-label" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.LoginStartTimeText, new { @class = "form-control mytimepicker", placeholder = "hh:mm" })
                                        <label class="input-group-addon cursor-P" for="LoginStartTimeText">
                                            <i class="fa fa-clock-o"></i>
                                        </label>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(m => m.LoginStartTimeText, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4 form-group">
                                <div class="bootstrap-timepicker" data-date-format="HH:mm">
                                    @Html.LabelFor(m => m.LoginEndTimeText, new { @class = "required-label" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.LoginEndTimeText, new { @class = "form-control mytimepicker", placeholder = "hh:mm" })
                                        <label class="input-group-addon cursor-P" for="LoginEndTimeText">
                                            <i class="fa fa-clock-o"></i>
                                        </label>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(m => m.LoginEndTimeText, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    <div class="row">
                        <div class="col-md-10 form-group table-responsive">
                            <table class="table table-bordered" id="tblTimeConfiguration">
                                <thead>
                                    <tr class="text-center">
                                        <th class="width_5">
                                            <label class="container1" for="chkAllWeekDays">
                                                <input type="checkbox" class="chkAllWeekDays" id="chkAllWeekDays" name="chkAllWeekDays" value="All">
                                                <span class="checkmark"></span>
                                            </label>
                                        </th>
                                        <th class="width_10">Week Day</th>
                                        <th class="width_40">Login Start Time (24 hours format)</th>
                                        <th class="width_40">Login End Time (24 hours format)</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @if (Model.Configurations != null && Model.Configurations.Count > 0)
                                    {
                                        for (int intI = 0; intI < Model.Configurations.Count; intI++)
                                        {
                                            var loginConfiguration = Model.Configurations.Where(p => p.WeekDay == intI).FirstOrDefault();
                                            
                                            <tr id="@("tr_" + intI)">
                                                <td>
                                                    <label class="container1 weekdays_checkbox" for="@("chk_" + intI)">
                                                        <input type="checkbox" id="@("chk_" + intI)" name="@("chk_" + intI)" value="@intI" class="chkWeekDay" @((loginConfiguration != null && loginConfiguration.IsAllowLogin) ? "checked" : "") />
                                                        <span class="checkmark"></span>
                                                    </label>
                                                </td>
                                                <td>
                                                    <label for="text-bold">@(Utility.GetWeekDayName(intI))</label>
                                                </td>
                                                <td>
                                                    <div class="col-md-12 form-group">
                                                        <div class="bootstrap-timepicker" data-date-format="HH:mm">
                                                            <div class="input-group">
                                                                <input type="text" id="@("txt_starttime_" + intI)" name="@("txt_starttime_" + intI)" class="form-control mytimepicker" placeholder="hh:mm" value="@((loginConfiguration != null && loginConfiguration.IsAllowLogin) ? loginConfiguration.LoginStartTimeText : "")" />
                                                                <label class="input-group-addon cursor-P" for="@("txt_starttime_" + intI)">
                                                                    <i class="fa fa-clock-o"></i>
                                                                </label>
                                                            </div>
                                                        </div>
                                                        <span class="text-danger spn_err" id="@("spn_starttime_err_" + intI)"></span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="col-md-12 form-group">
                                                        <div class="bootstrap-timepicker" data-date-format="HH:mm">
                                                            <div class="input-group">
                                                                <input type="text" id="@("txt_endtime_" + intI)" name="@("txt_endtime_" + intI)" class="form-control mytimepicker" placeholder="hh:mm" value="@((loginConfiguration != null && loginConfiguration.IsAllowLogin) ? loginConfiguration.LoginEndTimeText : "")" />
                                                                <label class="input-group-addon cursor-P" for="@("txt_endtime_" + intI)">
                                                                    <i class="fa fa-clock-o"></i>
                                                                </label>
                                                            </div>
                                                        </div>
                                                        <span class="text-danger spn_err" id="@("spn_endtime_err_" + intI)"></span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>
            <div class="box-footer text-right">
                <button type="button" class="btn btn-success m-r-xs" onclick="return saveUserLoginTime();">Save</button>
                <a href="@Url.Action("ViewStudent", "Tutor")" class="btn btn-danger">Cancel</a>
            </div>
        }
    </div>
</section>




<script type="text/javascript">
    $(document).ready(function () {

        var configurationType = trim('@configurationType');

        if (!IsNullOrEmpty(configurationType)) {
            if (configurationType == trim("@UserLoginConfigurationType.ALWAYS")) {
                $('#rbIsAlways').prop("checked", true).trigger('change');
            } else if (configurationType == trim("@UserLoginConfigurationType.SET_LIMIT")) {
                $('#rbIsSetLimit').prop("checked", true).trigger('change');
            } else if (configurationType == trim("@UserLoginConfigurationType.RESTRICTED")) {
                $('#rbIsDontAllow').prop("checked", true).trigger('change');
            }
        }

        //Checkbox all change event.
        $("#chkAllWeekDays").change(function () {
            if (this.checked) {
                $('.chkWeekDay').prop("checked", true);
            } else {
                $('.chkWeekDay').prop("checked", false);
            }
        });

        //Timepicker
        $('.mytimepicker').timepicker({
            showInputs: false,
            showMeridian: false,
            minuteStep: 1
        });

        //Input Mask
        $('.mytimepicker').inputmask(
            "hh:mm", {
                placeholder: "hh:mm",
                insertMode: false,
                showMaskOnHover: true
            }
        );

        //Clear Time Picker text box if value not exist.
        $('.chkWeekDay').each(function () {
            var weekDay = $(this).val();           

            if (!$(this).is(':checked')) {
                $('form#frmUserLoginTime #txt_starttime_' + weekDay).val('');
                $('form#frmUserLoginTime #txt_endtime_' + weekDay).val('');
            }
        });

    });

    function showHideTimeFrame(type) {
        if (type == trim("@UserLoginConfigurationType.ALWAYS") || type == trim("@UserLoginConfigurationType.RESTRICTED")) {
            $('#divShowTimeFrame').hide();
        } else if (type == trim("@UserLoginConfigurationType.SET_LIMIT")) {
            $('#divShowTimeFrame').show();
        }
    }

    function validateUserLoginTime() {

        var errorMessage = "";
        var blnValid = true;

        if ($("#frmUserLoginTime").valid() == false) {
            showToaster("Please fill all the Required Fields first", ToasterType.ERROR);
            blnValid = false;
        }

        var isSetLimit = $('#rbIsSetLimit').prop("checked");
        if (isSetLimit) {

            var blnIsCheckboxChecked = false;
            $('.chkWeekDay').each(function () {
                var weekDay = $(this).val();

                $('form#frmUserLoginTime #spn_starttime_err_' + weekDay).html("");
                $('form#frmUserLoginTime #spn_endtime_err_' + weekDay).html("");

                if ($(this).is(':checked')) {
                    blnIsCheckboxChecked = true;

                    var loginStartTime = $('form#frmUserLoginTime #txt_starttime_' + weekDay).val();
                    var loginEndTime = $('form#frmUserLoginTime #txt_endtime_' + weekDay).val();

                    if (IsNullOrEmpty(loginStartTime)) {
                        $('form#frmUserLoginTime #spn_starttime_err_' + weekDay).html("Please select login start time.");
                        blnValid = false;
                    }

                    if (IsNullOrEmpty(loginEndTime)) {
                        $('form#frmUserLoginTime #spn_endtime_err_' + weekDay).html("Please select login end time.");
                        blnValid = false;
                    }
                    else {
                        var dtStartTime = GetDateObjectFromTime(loginStartTime);
                        var dtEndTime = GetDateObjectFromTime(loginEndTime);

                        if (dtEndTime < dtStartTime) {
                            $('form#frmUserLoginTime #spn_starttime_err_' + weekDay).html("Login start time must be less than login end time.");
                            blnValid = false;
                        }
                    }
                }
            });

            if (blnIsCheckboxChecked == false) {
                showToaster("Please select at least one week day checkbox.", ToasterType.ERROR);
                return false;
            }
        }

        return blnValid;
    }

    function saveUserLoginTime() {

        if (validateUserLoginTime()) {

            var configurationType = trim($('input[name=ConfigurationType]:checked').val());

            $('#ConfigurationType').val(configurationType);

            var configurations = [];
            var tutorId = $('form#frmUserLoginTime #TutorId').val();

            if (configurationType == trim("@UserLoginConfigurationType.SET_LIMIT")) {

                for (i = 0; i < 7; i++) {
                    var isChecked = $('form#frmUserLoginTime #chk_' + i).prop("checked");

                    var weekDay = $('form#frmUserLoginTime #chk_' + i).val();
                    var loginStartTime = $('form#frmUserLoginTime #txt_starttime_' + i).val();
                    var loginEndTime = $('form#frmUserLoginTime #txt_endtime_' + i).val();

                    var configuration = {};
                    configuration.TutorId = tutorId;
                    configuration.WeekDay = parseInt(weekDay);
                    configuration.IsAllowLogin = isChecked;
                    configuration.LoginStartTimeText = loginStartTime;
                    configuration.LoginEndTimeText = loginEndTime;

                    configurations.push(configuration);
                }
            }

            //Clear error
            $('.spn_err').html("");

            var formData = $('#frmUserLoginTime').serializeObject();

            //Add additional property in form data.
            $.extend(formData, { Configurations: configurations });

            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Tutor/UserLoginTime")',
                type: 'POST',
                //data: $('#frmUserLoginTime').serialize(),
                data: formData,
                success: function (response) {
                    if (!IsNullOrEmpty(response)) {
                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {
                            showToaster("Student time configuration details updated successfully", ToasterType.SUCCESS);
                        }
                    }
                }
            });
            return false;
        }
    }

</script>

@section scripts {
    <script type="text/javascript" src="~/Scripts/custom/jquery.inputmask.bundle.js"></script>
}