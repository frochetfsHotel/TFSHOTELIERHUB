@model SuccessHotelierHub.Models.UserLoginTimeVM
@{
    ViewBag.Title = "Student Login Time";
}

<section class="content-header">
    <h1>
        Configure Login Time
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Tutor</li>
        <li class="active">Student Login Time</li>
    </ol>
</section>

<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Student Login Time Details</h3>
        </div>
        @using (Html.BeginForm("UserLoginTime", "Tutor", FormMethod.Post, new { id = "frmUserLoginTime", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!--HIDDEN FIELD-->
            @Html.HiddenFor(m => m.UserId)
            <!--HIDDEN FIELD-->

            <div class="box-body pt_10 pb-0">
                <div class="col-xs-12 padding-zero">
                    <label class="label-bold">Student : @Model.UserName </label>
                </div>
                <div class="col-xs-12 padding-zero m-t-md">
                    <div class="row">
                        <div class="col-md-4 form-group">
                            <div class="bootstrap-timepicker" data-date-format="HH:mm">
                                @Html.LabelFor(m => m.LoginStartTimeText, new { @class = "required-label" })
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.LoginStartTimeText, new { @class = "form-control mytimepicker", placeholder = "HH:mm", @readonly= "readonly" })
                                    <label class="input-group-addon cursor-P" for="LoginStartTimeText">
                                        <i class="fa fa-clock-o"></i>
                                    </label>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.LoginStartTimeText, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4 form-group">
                            <div class="bootstrap-timepicker" data-date-format="HH:mm">
                                @Html.LabelFor(m => m.LoginEndTimeText, new { @class = "required-label" })
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.LoginEndTimeText, new { @class = "form-control mytimepicker", placeholder = "HH:mm", @readonly = "readonly" })
                                    <label class="input-group-addon cursor-P" for="LoginEndTimeText">
                                        <i class="fa fa-clock-o"></i>
                                    </label>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(m => m.LoginEndTimeText, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="box-footer text-right">
                <button type="button" class="btn btn-success m-r-xs" onclick="return saveUserLoginTime();">Save</button>
                <a href="@Url.Action("ViewStudent", "Tutor")" class="btn btn-danger">Cancel</a>
            </div>
        }
    </div>
</section>




<script type="text/javascript">
    $(document).ready(function () {
        //Timepicker
        $('#LoginStartTimeText').timepicker({
            showInputs: false,
            showMeridian: false,
            minuteStep: 1
            //timeFormat: 'HH:mm'
        });

        $('#LoginEndTimeText').timepicker({
            showInputs: false,
            showMeridian: false,
            minuteStep: 1
            //timeFormat: 'HH:mm'
        });
    });

    function validateUserLoginTime() {

        var errorMessage = "";
        var blnValid = true;


        if ($("#frmUserLoginTime").valid() == false) {
            showToaster("Please fill all the Required Fields first", ToasterType.ERROR);
            blnValid = false;
        }

        var loginStartTime = $('#LoginStartTimeText').val();
        var loginEndTime = $('#LoginEndTimeText').val();

        if (!IsNullOrEmpty(loginStartTime) && !IsNullOrEmpty(loginEndTime)) {
            
            var dtStartTime = GetDateObjectFromTime(loginStartTime);
            var dtEndTime = GetDateObjectFromTime(loginEndTime);

            if (dtEndTime < dtStartTime) {
                showToaster("Login start time must be less than login end time.", ToasterType.ERROR);
                 blnValid = false;
            }
        }
        

        return blnValid;
    }

    function saveUserLoginTime() {

        if (validateUserLoginTime()) {
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Tutor/UserLoginTime")',
                type: 'POST',
                data: $('#frmUserLoginTime').serialize(),
                success: function (response) {
                    if (!IsNullOrEmpty(response)) {

                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {
                            showToaster("Student login details updated successfully", ToasterType.SUCCESS);

                            setTimeout(function () {
                                redirectTo('@Url.Content("~/Tutor/ViewStudent")');
                            }, 1000);
                        }
                    }
                }
            });
            return false;
        }
    }

</script>