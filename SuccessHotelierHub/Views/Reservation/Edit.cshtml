@model SuccessHotelierHub.Models.ReservationVM
@using SuccessHotelierHub.Models
@using SuccessHotelierHub.Utility
@{
    ViewBag.Title = "Edit Reservation";

    var preferenceGroupList = (List<SelectListItem>)ViewBag.PreferenceGroupList;

    var arrivalDayOfWeek = string.Empty;
    var departureDayOfWeek = string.Empty;

    if (Model.ArrivalDate != null && Model.ArrivalDate.HasValue)
    {
        arrivalDayOfWeek = SuccessHotelierHub.Utility.Utility.WeekdayName((int)Model.ArrivalDate.Value.DayOfWeek);
    }

    if (Model.DepartureDate != null && Model.DepartureDate.HasValue)
    {
        departureDayOfWeek = SuccessHotelierHub.Utility.Utility.WeekdayName((int)Model.DepartureDate.Value.DayOfWeek);
    }

    string ETAText = string.Empty;

    if (Model.ETA.HasValue && Model.ETA.Value != null)
    {
        DateTime time = DateTime.Today.Add(Model.ETA.Value);
        ETAText = time.ToString("hh:mm tt");
    }

    var strRate = "0.00";
    if (Model.Rate.HasValue)
    {
        strRate = string.Format("{0:0.00}", Model.Rate.Value);
    }

    #region Preference Mapping
    var selectedPreferences = (List<ReservationPreferenceMappingVM>)ViewBag.SelectedPreferences;
    var preferenceItems = string.Empty;
    var selectedPreferencesHtml = string.Empty;

    if (selectedPreferences != null && selectedPreferences.Count > 0)
    {
        foreach (var preference in selectedPreferences)
        {
            preferenceItems += string.Format("{0},", preference.PreferenceId);

            selectedPreferencesHtml += string.Format("<span class='btn btn-xs bg-maroon m-r-xs' id='spnPreference_{1}'>{0}<i class='fa fa-remove m-l-sm' onclick='removePreferenceItem(this)' data-preferenceid='{1}'></i></span>", preference.PreferenceDescription, preference.PreferenceId);
        }

        if (!string.IsNullOrWhiteSpace(preferenceItems))
        {
            //Remove Last Comma.
            preferenceItems = Utility.RemoveLastCharcter(preferenceItems, ',');
        }
    }
    #endregion

    #region Room Mapping

    var selectedRooms = (List<ReservationRoomMappingVM>)ViewBag.SelectedRooms;
    var roomIds = string.Empty;
    var roomNumbers = string.Empty;

    if (selectedRooms != null && selectedRooms.Count > 0)
    {
        foreach (var room in selectedRooms)
        {
            roomIds += string.Format("{0},", room.RoomId);
            roomNumbers += string.Format("{0}, ", room.RoomNo);
        }

        if (!string.IsNullOrWhiteSpace(roomIds))
        {
            //Remove Last Comma.
            roomIds = Utility.RemoveLastCharcter(roomIds, ',');
        }

        if (!string.IsNullOrWhiteSpace(roomNumbers))
        {
            //Remove Last Comma.
            roomNumbers = Utility.RemoveLastCharcter(roomNumbers, ',');
        }
    }

    #endregion

}


@section styles{
    <link rel="stylesheet" href="~/Content/css/AdminLTE/input-mask/masking-input.css" type="text/css" />
}

<section class="content-header">
    <h1>
        Reservation <small>Edit</small>
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="@Url.Action("Index","Home")"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Reservation</li>
        <li class="active">Edit</li>
    </ol>
</section>

<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Reservation Details</h3>
            <div class="pull-right">                
                <label class="" for="ConfirmationNumber">
                    <b>Confirmation# : @(!string.IsNullOrWhiteSpace(Model.ConfirmationNumber) ? Model.ConfirmationNumber : "0") </b>
                </label>
                <a href="javascript:void(0);" class="btn btn-warning btn-xs m-l-md" onclick="GotoProfileEditPage();">Profile</a>
            </div>
        </div>
        <!-- /.box-header -->
        <!-- form start -->
        @using (Html.BeginForm("Edit", "Reservation", FormMethod.Post, new { id = "frmReservation", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!-- HIDDEN FIELD -->
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.ProfileId)
            @Html.HiddenFor(m => m.ConfirmationNumber);
            @*@Html.HiddenFor(m => m.PreferenceItems);*@
            <input type="hidden" id="PreferenceItems" name="PreferenceItems" value="@preferenceItems" />
            <!-- HIDDEN FIELD -->

            <div class="box-body pt_10 pb-0">
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.LastName, new { @class = "required-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last Name" })
                            <div class="input-group-addon cursor-P" onclick="openProfileSearchModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.FirstName)
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.TitleId)
                        @Html.DropDownListFor(m => m.TitleId,
                                                new SelectList((IEnumerable<SelectListItem>)ViewBag.TitleList, "Value", "Text"),
                                                "Select Title",
                                                new { @class = "form-control" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MemberTypeId)
                        <select class="form-control" id="MemberTypeId" name="MemberTypeId">
                            <option value="">--Select Member Type--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Member Gold</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F932">Member Silver</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F933">Member Platinum</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        <label for="ddlCountry">Country</label>
                        @Html.DropDownListFor(m => m.CountryId,
                                (IEnumerable<SelectListItem>)ViewBag.CountryList, "-- Select Country --",
                                htmlAttributes: new { @class = "form-control", @Id = "ddlCountry" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.LanguageId)
                        <select class="form-control" id="LanguageId" name="LanguageId">
                            <option value="">--Select Language--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">English</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F932">Hindi</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F933">France</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.VipId)
                        @Html.DropDownListFor(m => m.VipId,
                                     new SelectList((IEnumerable<SelectListItem>)ViewBag.VipList, "Value", "Text"),
                                    "Select VIP",
                                    new { @class = "form-control" })

                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.PhoneNo)
                        @Html.TextBoxFor(m => m.PhoneNo, new { @class = "form-control", placeholder = "Phone #" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MemberNo)
                        @Html.TextBoxFor(m => m.MemberNo, new { @class = "form-control", placeholder = "Member #" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MemberLvt)
                        @Html.TextBoxFor(m => m.MemberLvt, new { @class = "form-control", placeholder = "Member LVT." })
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.AgentId)
                        <select class="form-control" id="AgentId" name="AgentId">
                            <option value="">--Select Agent--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F944">Agent 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F945">Agent 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F937">Agent 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CompanyId)
                        <select class="form-control" id="CompanyId" name="CompanyId">
                            <option value="">--Select Company--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Company 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F934">Company 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F936">Company 3</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.GroupId)
                        <select class="form-control" id="GroupId" name="GroupId">
                            <option value="">--Select Group--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Group 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F934">Group 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F936">Group 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.SourceId)
                        <select class="form-control" id="SourceId" name="SourceId">
                            <option value="">--Select Source--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Source 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Source 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B0F937">Source 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ContactId)
                        <select class="form-control" id="ContactId" name="ContactId">
                            <option value="">--Select Contact--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Contact 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Contact 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B0F937">Contact 3</option>
                        </select>
                    </div>
                </div>

                <div class="clearfix"><hr class="mt_5 mb_10" /></div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ArrivalDate, new { @class = "required-label" })
                        <div class="input-group date">
                            @Html.TextBoxFor(m => m.ArrivalDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @placeholder = "dd/MM/yyyy" })
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        <span class="text-blue m-l-xl" id="ArrivalDayOfWeek">@arrivalDayOfWeek</span>
                        @Html.ValidationMessageFor(m => m.ArrivalDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1 form-group">
                        @Html.LabelFor(m => m.NoOfNight)
                        @Html.TextBoxFor(m => m.NoOfNight, new { @class = "form-control",  onkeydown = "onlyDigits(event)", onchange = "calculateDepartureDate();", onblur = "calculateTotalPrice();" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.DepartureDate, new { @class = "required-label" })
                        <div class="input-group date">
                            @Html.TextBoxFor(m => m.DepartureDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @placeholder = "dd/MM/yyyy", onchange = "calculateNoOfNights();" })
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        <span class="text-blue m-l-xl" id="DepartureDayOfWeek">@departureDayOfWeek</span>
                        @Html.ValidationMessageFor(m => m.DepartureDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1 form-group">
                        @Html.LabelFor(m => m.NoOfAdult)
                        @Html.TextBoxFor(m => m.NoOfAdult, new { @class = "form-control", onkeydown = "onlyDigits(event)" })
                    </div>
                    <div class="col-md-1 form-group">
                        @Html.LabelFor(m => m.NoOfChildren)
                        @Html.TextBoxFor(m => m.NoOfChildren, new { @class = "form-control",  onkeydown = "onlyDigits(event)" })
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RoomTypeCode, new { @class = "required-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.RoomTypeCode, new { @class = "form-control", placeholder = "Room Type Code" })
                            <div class="input-group-addon cursor-P" onclick="openRoomTypeSearchModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.RoomTypeCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(m => m.RoomTypeId)

                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.NoOfRoom)
                        @Html.TextBoxFor(m => m.NoOfRoom, new { @class = "form-control", onkeydown = "onlyDigits(event)" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RtcId)
                        <select class="form-control" id="RtcId" name="RtcId">
                            <option value="">--Select RTC--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">RTC 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">RTC 2</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @*@Html.LabelFor(m => m.RoomId)
                        <select class="form-control" id="RoomId" name="RoomId">
                            <option value="">--Select Room--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">101</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">102</option>
                        </select>*@

                        @Html.LabelFor(m => m.RoomNumbers)
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.RoomNumbers, new
                            {
                                @class = "form-control",
                                placeholder = "Room #",
                                @readonly = "readonly"
                            })
                            <div class="input-group-addon cursor-P" onclick="openRoomSearchModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>
                        @*@Html.ValidationMessageFor(m => m.RoomNumbers, "", new { @class = "text-danger" })*@
                        @Html.HiddenFor(m => m.RoomIds)

                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ExtnId)
                        <select class="form-control" id="ExtnId" name="ExtnId">
                            <option value="">--Select Extn.--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Extn 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Extn 2</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RateCodeId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.RateCodeId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.RateTypeList, "Value", "Text"),
                                "Select Rate Code",
                                new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.RateCodeId, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.Rate)
                        @Html.TextBoxFor(m => m.Rate, new { @class = "form-control", placeholder = "1.00", onkeypress = "onlyNumeric(event)", onblur = "calculateTotalPrice();" })
                    </div>
                    <div class="col-md-3 form-group m-t-lg">                                               
                        <label class="container1" for="IsFixedRate">
                            Fixed Rate
                            @Html.CheckBoxFor(m => m.IsFixedRate)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CurrencyId)
                        <select class="form-control" id="CurrencyId" name="CurrencyId">
                            <option value="">--Select Currency--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">USD</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945" selected>EUR</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F905">INR</option>
                        </select>
                    </div>


                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.PackageId)
                        <select class="form-control" id="PackageId" name="PackageId">
                            <option value="">--Select Packages--</option>
                            <option value="F15C98B6-4FC0-4AB7-A34D-D98961B8F844">Packages 1</option>
                            <option value="F15C99B6-4FC0-4AB7-A35D-D94861B9F745">Packages 2</option>
                            <option value="F15C90B6-4FC0-4AB7-A36D-G92061B0F537">Packages 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.BlockCodeId)
                        <select class="form-control" id="BlockCodeId" name="BlockCodeId">
                            <option value="">--Select Group Code--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Group Code 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Group Code 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-G95261B0F937">Group Code 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        <div class="bootstrap-timepicker">
                            @Html.LabelFor(m => m.ETAText)
                            <div class="input-group">
                                <input type="text" id="ETAText" name="ETAText" value="@ETAText" class="form-control"
                                       placeholder="hh:mm tt" />
                                <div class="input-group-addon">
                                    <i class="fa fa-clock-o"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ReservationTypeId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.ReservationTypeId, new List<SelectListItem>
                            {
                                new SelectListItem{ Text="Select Reservation Type", Value = "" },
                                new SelectListItem{ Text="Credit Card", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B8F944" },
                                new SelectListItem{ Text="6pm Courtesy Hold", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B9F945" },
                                new SelectListItem{ Text="Guarantee Type", Value = "F15C97B6-4FC0-4AB7-A32D-G95261B0F937" },
                            }, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ReservationTypeId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MarketId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.MarketId, new List<SelectListItem>
                            {
                                new SelectListItem{ Text = "--Select Market--", Value = "" },
                                new SelectListItem{ Text = "Market 1", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B8F944" },
                                new SelectListItem{ Text = "Market 2", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B9F945" },
                                new SelectListItem{ Text = "Market 3", Value = "F15C97B6-4FC0-4AB7-A32D-G95261B0F937" },
                            }, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.MarketId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ReservationSourceId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.ReservationSourceId, new List<SelectListItem>
                            {
                                new SelectListItem{ Text = "--Select Market--", Value = "" },
                                new SelectListItem{ Text = "Guest Direct", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B8F944" },
                                new SelectListItem{ Text = "CRS", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B9F945" },
                                new SelectListItem{ Text = "Internet", Value = "F15C97B6-4FC0-4AB7-A32D-G95261B0F937" },
                            }, htmlAttributes: new { @class = "form-control" })

                        @Html.ValidationMessageFor(m => m.ReservationSourceId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.OriginId)
                        <select class="form-control" id="OriginId" name="OriginId">
                            <option value="">--Select Origin--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Origin 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Origin 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-G95261B0F937">Origin 3</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.PaymentMethodId, new { @class = "required-label" }) 
                        @Html.DropDownListFor(m => m.PaymentMethodId, new List<SelectListItem>
                            {
                                new SelectListItem{ Text = "--Select Payment Method--", Value = "" },
                                new SelectListItem{ Text = "Cash", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B8F946" },
                                new SelectListItem{ Text = "Visa", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B8F944" },
                                new SelectListItem{ Text = "American Express", Value = "F15C97B6-4FC0-4AB7-A32D-D95261B9F945" },
                                new SelectListItem{ Text = "Discover", Value = "F15C97B6-4FC0-4AB7-A32D-G95261B0F937" },
                                new SelectListItem{ Text = "Master Card", Value = "F15C97B6-4FC0-4AB7-A32D-G95261B0F939" },
                            }, htmlAttributes: new { @class = "form-control" })

                        @Html.ValidationMessageFor(m => m.PaymentMethodId, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3 form-group divCreditCardFields">
                        @Html.LabelFor(m => m.CreditCardNo)
                        @Html.TextBoxFor(m => m.CreditCardNo, new { @class = "form-control", placeholder = "Credit Card #" })
                    </div>
                    <div class="col-md-3 form-group divCreditCardFields divCardExpiryDate">
                        @Html.LabelFor(m => m.CardExpiryDate)
                        @*<input type="text" id="CardExpiryDate" name="CardExpiryDate"
                            class="form-control" data-inputmask="'alias': 'mm/yyyy'" data-mask placeholder="mm/yyyy">*@
                        <input id="CardExpiryDate" name="CardExpiryDate" type="text" placeholder="MM/YY" class="masked form-control" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" value="@Model.CardExpiryDate"/>
                    </div>
                    <div class="col-md-3 form-group divCreditCardFields">
                        @Html.LabelFor(m => m.CVVNo)
                        @Html.TextBoxFor(m => m.CVVNo, new { @class = "form-control", placeholder = "CVV #", onkeydown = "onlyDigits(event)" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ApprovalCode)
                        @Html.TextBoxFor(m => m.ApprovalCode, new { @class = "form-control", placeholder = "Approval Code" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ApprovalAmount)
                        @Html.TextBoxFor(m => m.ApprovalAmount, new { @class = "form-control", placeholder = "Approval Amt." })
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.SuitWith)
                        @Html.TextBoxFor(m => m.SuitWith, new { @class = "form-control", placeholder = "Suit With" })
                    </div>
                    <div class="col-md-3 form-group m-t-lg m-r-n-lg">
                        <label class="container1" for="IsEmailConfirmation">
                            Email Confirmation
                            @Html.CheckBoxFor(m => m.IsEmailConfirmation)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.GuestBalance)
                        @Html.TextBoxFor(m => m.GuestBalance, new { @class = "form-control", placeholder = "0.00", onkeydown = "onlyDigits(event)" })
                    </div>
                    <div class="col-md-3 form-group">
                        <label for="DiscountAmount" class="col-xs-12 padding-zero">Disc. Amt</label>
                        <div class="col-md-5 col-sm-5 padding-zero">
                            @Html.TextBoxFor(m => m.DiscountAmount, new { @class = "form-control", placeholder = "0.00", onkeydown = "onlyDigits(event)" })
                        </div>
                        <div class="col-md-2 col-sm-2 padding-zero text-center">
                            <span>%</span>
                        </div>
                        <div class="col-md-5 col-sm-5 padding-zero">
                            @Html.TextBoxFor(m => m.DiscountPercentage, new { @class = "form-control", placeholder = "0.00", onkeydown = "onlyDigits(event)" })
                        </div>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.DiscountReasonId)
                        <select class="form-control" id="DiscountReasonId" name="DiscountReasonId">
                            <option value="">--Select Reason--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Reason 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Reason 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-G95261B0F937">Reason 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group m-t">
                        <label>
                            Total Price : <span id="totalPrice">&euro; 0.00</span>
                            <br />
                            @*<small class="m-l-sm">(Per Night)</small>*@
                            <span>
                                [No. Of Nights <span class="text-blue" id="spnNoOfNight"
                                data-nights="@Model.NoOfNight">(@Model.NoOfNight)</span>  * Rate <span class="text-blue" id="spnRate" data-rate="@Model.Rate">(&euro;  @Model.Rate)</span>]
                            </span>
                        </label>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.TARecordLocator)
                        @Html.TextBoxFor(m => m.TARecordLocator, new { @class = "form-control", placeholder = "TA Record Loc" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.SpecialsId)
                        <select class="form-control" id="SpecialsId" name="SpecialsId">
                            <option value="">--Select Specials--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Early Check in</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Down pillow</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ItemInventoryId)
                        <select class="form-control" id="ItemInventoryId" name="ItemInventoryId">
                            <option value="">--Select Item Inv.--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Rollaway Bed</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Crib</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ReservationComments)
                        @Html.TextAreaFor(m => m.ReservationComments, new { @class = "form-control", placeholder = "Reservation Comments", rows = "3" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.InHouseComments)
                        @Html.TextAreaFor(m => m.InHouseComments, new { @class = "form-control", placeholder = "In-House Comments", rows = "3" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CashieringComments)
                        @Html.TextAreaFor(m => m.CashieringComments, new { @class = "form-control", placeholder = "Cashiering Comments", rows = "3" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.HouseKeepingComments)
                        @Html.TextAreaFor(m => m.HouseKeepingComments, new { @class = "form-control", placeholder = "House Keeping Comments", rows = "3" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-9 form-group">
                        @Html.LabelFor(m => m.Remarks)
                        @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", placeholder = "Remarks", rows = "3" })
                    </div>
                    <div class="col-xs-3 form-group m-t-xl m-t-md_media">
                        <button type="button" class="btn btn-info btn-sm" onclick="openPreferenceModal();">
                            Preference
                        </button>
                    </div>
                </div>
                <div class="row" style="display:none;" id="divSelectedPreference">
                    <div class="col-md-9 form-group">
                        <label for="ListOfSelectedPreferences" class="m-l-n col-sm-3 control-label m-r-n-xl"> Selected Preference : </label>
                        <div class="col-sm-9" id="ListOfSelectedPreferences">
                                                        
                        </div>
                    </div>
                </div>


            </div>
            <!-- /.box-body -->
            <div class="box-footer text-right">
                <button type="button" class="btn btn-success" onclick="updateReservation();">Update</button>
                <a href="@Url.Action("List","Reservation")" class="btn btn-danger">Cancel</a>
            </div>
            <!-- /.box-footer -->
        }
    </div>
</section>

<!-- This is the add reservation form-->
<!-- Preference Modal Popup START -->
<div class="modal fade" id="preferenceModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Preferences</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Preference/_Preferences.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateProfile" },
                                    { "PreferenceGroup", preferenceGroupList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Preference Modal Popup END -->

<!-- Advance Profile Search Modal START -->
<div id="profileSearchModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Profile Search</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Profile/_ProfileSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "EditReservation" }
                                })
            </div>
            <div class="clearfix"></div>

        </div>

    </div>
</div>
<!-- Advance Profile Search Modal END -->

<!-- RoomType Modal Popup START -->
<div class="modal fade" id="roomTypeModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Room Types</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/RoomType/_AdvanceSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateReservation" },
                                    { "RateType", ViewBag.RateTypeList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- RoomType Modal Popup END -->

<!-- Room Modal Popup START -->
<div class="modal fade" id="roomModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Room Types</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Room/_AdvanceSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateReservation" },
                                    { "RoomType", ViewBag.RoomTypeList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Room Modal Popup END -->


<script type="text/javascript">
    $(document).ready(function () {

        //CardExpiryDate mm/yyyy
        //$('#CardExpiryDate').inputmask('mm/yyyy', { 'placeholder': 'mm/yyyy' });
        $('#CardExpiryDate').attr("placeholder", "MM/YY");

        $("#frmReservation input[type='text'], textarea").blur(function () {
            if (!IsNullOrEmpty($(this).val())) {
                $('label[for="' + $(this).attr("id") + '"]').addClass("label-bold");
            } else {
                $('label[for="' + $(this).attr("id") + '"]').removeClass("label-bold");
            }
        });

        $("#frmReservation select").change(function () {
            if (!IsNullOrEmpty($(this).val())) {
                $('label[for="' + $(this).attr("id") + '"]').addClass("label-bold");
            } else {
                $('label[for="' + $(this).attr("id") + '"]').removeClass("label-bold");
            }
        });

        //Date picker
        $('#ArrivalDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy'
        })
        .change(arrivalDateChanged)
        .on('changeDate', arrivalDateChanged);

        $('#DepartureDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy'
        })
        .change(departureDateChanged)
        .on('changeDate', departureDateChanged);


        //Timepicker
        $('#ETAText').timepicker({
            showInputs: false
        });

        $('#PaymentMethodId').change(function (e) {
            var selectedText = $(this).find("option:selected").text();
            console.log(selectedText);

            if (!IsNullOrEmpty(selectedText)) {
                if (trim(selectedText) == "Cash") {
                    $('.divCreditCardFields').fadeOut(500);
                } else {
                    $('.divCreditCardFields').fadeIn(500);
                }
            }
        });


        //Show value of selected drop down.
        $('#Rate').val('@strRate');
        $('#ReservationTypeId').val('@Convert.ToString(Model.ReservationTypeId).ToUpper()');
        $('#MarketId').val('@Convert.ToString(Model.MarketId).ToUpper()');
        $('#ReservationSourceId').val('@Convert.ToString(Model.ReservationSourceId).ToUpper()');
        $('#PaymentMethodId').val('@Convert.ToString(Model.PaymentMethodId).ToUpper()');

        calculateTotalPrice();

        //Show Selected Rooms
        showSelectedRooms();

        //Show Selected Preferences.
        showSelectedPreferences();

        //Label Bold
        SetLabelBold();


        //Preference
        $('.btnAdvanceSearchPreferenceOk').click(function (e) {
            var selectedPreferenceCount = 0;
            selectedPreferenceCount = $('form#frmAdvancePreferenceSearch #selectedPreferences span').length;

            if (!IsNullOrEmpty(selectedPreferenceCount) && selectedPreferenceCount > 0) {
                var selectedPreferenceElement = $('form#frmAdvancePreferenceSearch #selectedPreferences').html();
                $("#ListOfSelectedPreferences").html(selectedPreferenceElement);

                $('#divSelectedPreference').show();

                //Close Preference Search Modal.
                $('#preferenceModal').modal('toggle');
            }
        });

        //Profile
        $('.btnAdvanceSearchProfileOk').click(function (e) {
            var selectedProfile = $('input[name=rbProfile]:checked', '#frmAdvanceProfileSearch');
            if (!IsNullOrEmpty(selectedProfile.val())) {
                var profileId, firstName, lastName, titleId, title;
                profileId = $(selectedProfile).val();
                firstName = $(selectedProfile).data('firstname');
                lastName = $(selectedProfile).data('lastname');
                titleId = $(selectedProfile).data('titleid');
                title = $(selectedProfile).data('title');

                $('#ProfileId').val(profileId);

                $('#FirstName').val(firstName);
                $('#LastName').val(lastName);
                $('#TitleId').val(titleId);

                //Close Profile Search Modal.
                $('#profileSearchModal').modal('toggle');


                //Get Preferences
                $.ajax({
                    beforeSend: function (xhr) {
                        showLoader();
                    },
                    error: function (result) {
                        showToaster(result.responseText, ToasterType.ERROR);
                    },
                    complete: function () {
                        hideLoader();
                    },
                    url: '@Url.Content("~/Profile/GetPreferencesByProfile")',
                    type: 'GET',
                    data: { profileId: profileId },
                    success: function (response) {
                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {
                            var html = "";
                            if (response.data.length > 0) {
                                for (i = 0; i < response.data.length; i++) {
                                    html += generatePreferenceButton(response.data[i].PreferenceId, response.data[i].PreferenceDescription);
                                }

                                if (!IsNullOrEmpty(html)) {
                                    $('#divSelectedPreference').show();
                                    $('#ListOfSelectedPreferences').html(html);
                                }
                            }
                        }
                    }
                });

            } else {
                showToaster("Please select any one profile.", ToasterType.ERROR);
            }
        });

        //Room Type
        $('.btnAdvanceSearchRoomTypeOk').click(function (e) {
            var selectedRoomType = $('input[name=rbRoomType]:checked', '#frmAdvanceRoomTypeSearch');
            if (!IsNullOrEmpty(selectedRoomType.val())) {
                var roomTypeId, roomTypeCode
                roomTypeCode = $(selectedRoomType).data('roomtype');
                roomTypeId = $(selectedRoomType).data('roomtypeid');

                $('#RoomTypeId').val(roomTypeId);
                $('#RoomTypeCode').val(roomTypeCode);

                //Close Room Type Search Modal.
                $('#roomTypeModal').modal('toggle');

            } else {
                showToaster("Please select any room type.", ToasterType.ERROR);
            }
        });

        //Room
        $('.btnAdvanceSearchRoomOk').click(function (e) {
            var roomNumbers = "";
            var roomIds = "";

            var selectedNoOfRooms = $("form#frmAdvanceRoomSearch input:checkbox[name='chkRoom']:checked").length;
            var noOfRoom = $('#NoOfRoom').val();

            if (!IsNullOrEmpty(selectedNoOfRooms)) {

                if (noOfRoom != selectedNoOfRooms) {
                    showToaster("Please select only " + noOfRoom + " room details.", ToasterType.ERROR);
                    return false;
                }

                $("form#frmAdvanceRoomSearch input:checkbox[name='chkRoom']:checked").each(function () {
                    //get selected room.
                    roomNumbers += $(this).data("roomno") + Delimeter.COMMA + Delimeter.SPACE;
                    roomIds += $(this).val() + Delimeter.COMMA;
                });

                if (!IsNullOrEmpty(roomNumbers)) {

                    roomNumbers = RemoveLastCharacter(roomNumbers, Delimeter.COMMA);
                    roomIds = RemoveLastCharacter(roomIds, Delimeter.COMMA);

                    $('#RoomNumbers').val(roomNumbers);
                    $('#RoomIds').val(roomIds);

                    //Close Room Type Search Modal.
                    $('#roomModal').modal('toggle');
                }
            }
        });

    });

    function arrivalDateChanged(e) {
        var selectedDate = $(this).val();
        console.log("arrivalDateChanged : " + selectedDate);

        var dayOfWeek = "";
        if (!IsNullOrEmpty(selectedDate)) {
            var objSelectedArrivalDate = GetDateObject(selectedDate, DateSeprator.SLASH);

            if (!IsNullOrEmpty(objSelectedArrivalDate)) {
                var weekDay = objSelectedArrivalDate.getDay();
                dayOfWeek = GetDayOfWeek(weekDay);
            }
        }
        console.log("dayOfWeek : " + dayOfWeek);
        $('#ArrivalDayOfWeek').html(dayOfWeek);
    }

    function departureDateChanged(e) {
        var selectedDate = $(this).val();
        console.log("departureDateChanged : " + selectedDate);

        var dayOfWeek = "";
        if (!IsNullOrEmpty(selectedDate)) {
            var objSelectedDepartureDate = GetDateObject(selectedDate, DateSeprator.SLASH);

            if (!IsNullOrEmpty(objSelectedDepartureDate)) {
                var weekDay = objSelectedDepartureDate.getDay();
                dayOfWeek = GetDayOfWeek(weekDay);
            }
        }
        console.log("dayOfWeek : " + dayOfWeek);
        $('#DepartureDayOfWeek').html(dayOfWeek);
    }

    function openPreferenceModal() {
        clearPreferenceSearch();
        var selectedPreferenceCount = 0;
        selectedPreferenceCount = $('#ListOfSelectedPreferences span').length

        if (!IsNullOrEmpty(selectedPreferenceCount) && selectedPreferenceCount > 0) {
            var selectedPreferenceElement = $('#ListOfSelectedPreferences').html();
            $("form#frmAdvancePreferenceSearch #selectedPreferences").html(selectedPreferenceElement)
            $("form#frmAdvancePreferenceSearch #divPreferences").show();
        }

        $('#preferenceModal').modal('toggle');
    }


    function showSelectedPreferences() {
        var selectedPreferencesHtml = "@Html.Raw(selectedPreferencesHtml)";
        if (!IsNullOrEmpty(selectedPreferencesHtml)) {
            $('#divSelectedPreference').show();
            $('#ListOfSelectedPreferences').html(selectedPreferencesHtml);
        }
    }

    function removePreferenceItem(element) {
        if (element) {
            var preferenceId = $(element).data("preferenceid");
            $(element).parent("span").remove();

            //Check Preference Modal Is Open.
            if ($('#preferenceModal').hasClass('in')) {
                //Uncheck preference after remove.
                $('form#frmAdvancePreferenceSearch #chkPreference_' + preferenceId).prop("checked", false);
            }
        }
    }

    function getSelectedPreferenceItemIds() {
        var preferenceIds = "";
        $("#ListOfSelectedPreferences span i").each(function () {
            console.log($(this).data("preferenceid"));
            preferenceIds += $(this).data("preferenceid") + ",";
        });

        preferenceIds = RemoveLastCharacter(preferenceIds, Delimeter.COMMA);
        return preferenceIds;
    }

    function generatePreferenceButton(preferenceId, preference) {
        return "<span class='btn btn-xs bg-maroon m-r-xs' id='spnPreference_" + preferenceId + "'>" + preference + " <i class='fa fa-remove m-l-sm' onclick='removePreferenceItem(this);' data-preferenceid='" + preferenceId + "'></i></span>";
    }


    function validateReservationData() {
        var errorMessage = "";
        var blnValid = true;

        var profileId = $('#ProfileId').val();

        if (IsNullOrEmpty(profileId)) {
            showToaster("Please search and select profile again.", ToasterType.ERROR);
            blnValid = false;
        }

        if ($("#frmReservation").valid() == false) {
            showToaster("Please fill all the required field first", ToasterType.ERROR);
            blnValid = false;
        }

        return blnValid;
    }

    function updateReservation() {
        if (validateReservationData()) {

            //Get Selected Preference Items.
            var preferenceIds = getSelectedPreferenceItemIds();
            $('#PreferenceItems').val(preferenceIds);

            //Ajax Request to edit reservation.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (result) {
                    showToaster(result.responseText, ToasterType.ERROR);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Reservation/Edit")',
                type: 'POST',
                data: $('#frmReservation').serialize(),
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    }
                    else {
                        showToaster("Reservation details updated successfully.", ToasterType.SUCCESS);

                        setTimeout(function () {
                            redirectTo('@Url.Content("~/Reservation/List")');
                        }, 1000);

                    }
                }
            });
        }
    }

    function calculateNoOfNights() {
        var arrivalDate = $('#ArrivalDate').val();
        var departureDate = $('#DepartureDate').val();
        var noOfNight = 1;

        if (!IsNullOrEmpty(arrivalDate) && !IsNullOrEmpty(departureDate)) {


            var objArrivalDate = GetDateObject(arrivalDate, DateSeprator.SLASH);
            var objDepartureDate = GetDateObject(departureDate, DateSeprator.SLASH);

            var timeDiff = Math.abs(objDepartureDate.getTime() - objArrivalDate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

            if (!IsNullOrEmpty(diffDays)) {
                noOfNight = diffDays > 0 ? diffDays : 1;
            }



            $('#NoOfNight').val(noOfNight);
        }
    }

    function calculateDepartureDate() {
        var arrivalDate = $('#ArrivalDate').val();
        var noOfNight = $('#NoOfNight').val();
        var departureDate = '';

        if (!IsNullOrEmpty(arrivalDate)) {

            var objArrivalDate = GetDateObject(arrivalDate, DateSeprator.SLASH);

            var dt = objArrivalDate;
            if (!IsNullOrEmpty(noOfNight) && noOfNight > 0) {
                dt.setDate(objArrivalDate.getDate() + parseInt(noOfNight));
            } else {
                dt.setDate(objArrivalDate.getDate() + 1);
            }

            if (dt != null) {
                //dd/MM/yyyy
                departureDate = GetDate(dt, DateFormat.DDMMYYYY);
                $("#DepartureDate").datepicker("setDate", new Date(departureDate));
            }
        }
    }

    function calculateTotalPrice() {
        var noOfNights = $("#NoOfNight").val();
        var rate = $('#Rate').val();

        var totalPrice = "0.00";

        if (IsNullOrEmpty(noOfNights)) { noOfNights = 1; }
        if (IsNullOrEmpty(rate)) { rate = 1; }

        totalPrice = parseInt(noOfNights) * parseFloat(rate);

        //Set No. Of Nights
        $('#spnNoOfNight').html("(" + parseInt(noOfNights) + ")");
        $('#spnNoOfNight').attr("data-nights", parseInt(noOfNights));

        //Set Rate
        $('#spnRate').html("(&euro; " + parseFloat(rate) + ")");
        $('#spnRate').attr("data-rate", parseFloat(rate));

        $('#totalPrice').html("&euro; " + totalPrice);
    }

    function openRoomTypeSearchModal() {
        clearRoomTypeSearch();

        $("form#frmAdvanceRoomTypeSearch #RoomTypeCode").val($('#RoomTypeCode').val());

        $("form#frmAdvanceRoomTypeSearch #btnSearch").click();

        $('#roomTypeModal').modal('toggle');
    }

    function GotoProfileEditPage() {
        var profileId = $('#ProfileId').val();
        var reservationId = $('#Id').val();
        if (!IsNullOrEmpty(profileId)) {
            var url = '@Url.Content("~/Profile/EditIndividualProfile")' + "?id=" + profileId + "&source=EditReservation&rid=" + reservationId;
            redirectTo(url);
        }
        //else {
        //    showToaster("Selected profile may be invalid or not exist.", ToasterType.ERROR);
        //    return false;
        //}
    }

    //Advance Profile Search
    function openProfileSearchModal() {
        var lastName = $("#LastName").val();
        var firstName = $("#FirstName").val();

        if (!IsNullOrEmpty(lastName)) {
            //Show search results based on entered last name.
            $("form#frmAdvanceProfileSearch #LastName").val(trim(lastName));
            $("form#frmAdvanceProfileSearch #FirstName").val(trim(firstName));
            $("form#frmAdvanceProfileSearch #btnSearch").click();
        }
        $('#profileSearchModal').modal('toggle');
    }

    function openRoomSearchModal() {

        var noOfRoom = $('#NoOfRoom').val();
        if (IsNullOrEmpty(noOfRoom) || noOfRoom == "0") {
            showToaster("Please first enter No. Of Rooms", ToasterType.ERROR);
            return false;
        }

        clearRoomSearch();

        $("form#frmAdvanceRoomSearch #RoomTypeId").val($('#RoomTypeId').val());
        $("form#frmAdvanceRoomSearch #hdnSelectedRoomIds").val($('#RoomIds').val());
        $("form#frmAdvanceRoomSearch #hdnSelectedRoomNumbers").val($('#RoomNumbers').val());
        $("form#frmAdvanceRoomSearch #hdnNoOfRoomsUptoSelect").val($('#NoOfRoom').val());

        $("form#frmAdvanceRoomSearch #btnSearch").click();

        $('#roomModal').modal('toggle');
    }


    function showSelectedRooms() {
        var roomIds = "@roomIds";
        var roomNumbers = "@roomNumbers";

        $('#RoomIds').val('');
        $('#RoomNumbers').val('');

        if (!IsNullOrEmpty(roomIds)) {
            $('#RoomIds').val(roomIds);
        }

        if (!IsNullOrEmpty(roomNumbers)) {
            $('#RoomNumbers').val(roomNumbers);
        }
    }

    function SetLabelBold() {
        //FirstName
        if (!IsNullOrEmpty('@Model.FirstName'))
            $('label[for="FirstName"]').addClass("label-bold");

        //Title
        if (!IsNullOrEmpty('@Model.TitleId'))
            $('label[for="TitleId"]').addClass("label-bold");

        //MemberType
        if (!IsNullOrEmpty('@Model.MemberTypeId'))
            $('label[for="MemberTypeId"]').addClass("label-bold");

        //Country
        if (!IsNullOrEmpty('@Model.CountryId'))
            $('label[for="ddlCountry"]').addClass("label-bold");

        //Language
        if (!IsNullOrEmpty('@Model.LanguageId'))
            $('label[for="LanguageId"]').addClass("label-bold");

        //Vip
        if (!IsNullOrEmpty('@Model.VipId'))
            $('label[for="VipId"]').addClass("label-bold");

        //PhoneNo
        if (!IsNullOrEmpty('@Model.PhoneNo'))
            $('label[for="PhoneNo"]').addClass("label-bold");

        //MemberNo
        if (!IsNullOrEmpty('@Model.MemberNo'))
            $('label[for="MemberNo"]').addClass("label-bold");

        //MemberLvt
        if (!IsNullOrEmpty('@Model.MemberLvt'))
            $('label[for="MemberLvt"]').addClass("label-bold");

        //Agent
        if (!IsNullOrEmpty('@Model.AgentId'))
            $('label[for="AgentId"]').addClass("label-bold");

        //Vip
        if (!IsNullOrEmpty('@Model.VipId'))
            $('label[for="VipId"]').addClass("label-bold");

        //Company
        if (!IsNullOrEmpty('@Model.CompanyId'))
            $('label[for="CompanyId"]').addClass("label-bold");

        //Group
        if (!IsNullOrEmpty('@Model.GroupId'))
            $('label[for="GroupId"]').addClass("label-bold");

        //Source
        if (!IsNullOrEmpty('@Model.SourceId'))
            $('label[for="SourceId"]').addClass("label-bold");

        //Contact
        if (!IsNullOrEmpty('@Model.ContactId'))
            $('label[for="ContactId"]').addClass("label-bold");

        //NoOfNight
        if (!IsNullOrEmpty('@Model.NoOfNight'))
            $('label[for="NoOfNight"]').addClass("label-bold");

        //NoOfAdult
        if (!IsNullOrEmpty('@Model.NoOfAdult'))
            $('label[for="NoOfAdult"]').addClass("label-bold");

        //NoOfChildren
        if (!IsNullOrEmpty('@Model.NoOfChildren'))
            $('label[for="NoOfChildren"]').addClass("label-bold");

        //NoOfRoom
        if (!IsNullOrEmpty('@Model.NoOfRoom'))
            $('label[for="NoOfRoom"]').addClass("label-bold");

        //Rtc
        if (!IsNullOrEmpty('@Model.RtcId'))
            $('label[for="RtcId"]').addClass("label-bold");

        //RoomNumbers
        if (!IsNullOrEmpty('@roomNumbers'))
            $('label[for="RoomNumbers"]').addClass("label-bold");

        //Extn
        if (!IsNullOrEmpty('@Model.ExtnId'))
            $('label[for="ExtnId"]').addClass("label-bold");

        //Rate
        if (!IsNullOrEmpty('@Model.Rate'))
            $('label[for="Rate"]').addClass("label-bold");

        //Currency
        if (!IsNullOrEmpty('@Model.CurrencyId'))
            $('label[for="CurrencyId"]').addClass("label-bold");

        //Package
        if (!IsNullOrEmpty('@Model.PackageId'))
            $('label[for="PackageId"]').addClass("label-bold");

        //BlockCode
        if (!IsNullOrEmpty('@Model.BlockCodeId'))
            $('label[for="BlockCodeId"]').addClass("label-bold");

        //ETAText
        if (!IsNullOrEmpty('@ETAText'))
            $('label[for="ETAText"]').addClass("label-bold");

        //Origin
        if (!IsNullOrEmpty('@Model.OriginId'))
            $('label[for="OriginId"]').addClass("label-bold");

        //CreditCardNo
        if (!IsNullOrEmpty('@Model.CreditCardNo'))
            $('label[for="CreditCardNo"]').addClass("label-bold");

        //CardExpiryDate
        if (!IsNullOrEmpty('@Model.CardExpiryDate'))
            $('label[for="CardExpiryDate"]').addClass("label-bold");

        //CVVNo
        if (!IsNullOrEmpty('@Model.CVVNo'))
            $('label[for="CVVNo"]').addClass("label-bold");

        //ApprovalCode
        if (!IsNullOrEmpty('@Model.ApprovalCode'))
            $('label[for="ApprovalCode"]').addClass("label-bold");

        //ApprovalAmount
        if (!IsNullOrEmpty('@Model.ApprovalAmount'))
            $('label[for="ApprovalAmount"]').addClass("label-bold");

        //SuitWith
        if (!IsNullOrEmpty('@Model.SuitWith'))
            $('label[for="SuitWith"]').addClass("label-bold");

        //GuestBalance
        if (!IsNullOrEmpty('@Model.GuestBalance'))
            $('label[for="GuestBalance"]').addClass("label-bold");

        //DiscountAmount
        if (!IsNullOrEmpty('@Model.DiscountAmount'))
            $('label[for="DiscountAmount"]').addClass("label-bold");

        //DiscountReasonId
        if (!IsNullOrEmpty('@Model.DiscountReasonId'))
            $('label[for="DiscountReasonId"]').addClass("label-bold");

        //TARecordLocator
        if (!IsNullOrEmpty('@Model.TARecordLocator'))
            $('label[for="TARecordLocator"]').addClass("label-bold");

        //SpecialsId
        if (!IsNullOrEmpty('@Model.SpecialsId'))
            $('label[for="SpecialsId"]').addClass("label-bold");

        //ItemInventoryId
        if (!IsNullOrEmpty('@Model.ItemInventoryId'))
            $('label[for="ItemInventoryId"]').addClass("label-bold");

        //ReservationComments
        if (!IsNullOrEmpty('@Model.ReservationComments'))
            $('label[for="ReservationComments"]').addClass("label-bold");

        //InHouseComments
        if (!IsNullOrEmpty('@Model.InHouseComments'))
            $('label[for="InHouseComments"]').addClass("label-bold");

        //CashieringComments
        if (!IsNullOrEmpty('@Model.CashieringComments'))
            $('label[for="CashieringComments"]').addClass("label-bold");

        //HouseKeepingComments
        if (!IsNullOrEmpty('@Model.HouseKeepingComments'))
            $('label[for="HouseKeepingComments"]').addClass("label-bold");

        //Remarks
        if (!IsNullOrEmpty('@Model.Remarks'))
            $('label[for="Remarks"]').addClass("label-bold");

    }

</script>

@section scripts {
    <script src="~/Scripts/AdminLTE/input-mask/jquery.inputmask.js"></script>
    <script src="~/Scripts/AdminLTE/input-mask/jquery.inputmask.date.extensions.js"></script>
    <script src="~/Scripts/AdminLTE/input-mask/jquery.inputmask.extensions.js"></script>
    <script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/masking-input.js" data-autoinit="true"></script>
}