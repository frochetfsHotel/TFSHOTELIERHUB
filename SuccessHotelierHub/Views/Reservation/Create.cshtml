@model SuccessHotelierHub.Models.ReservationVM
@using SuccessHotelierHub.Models
@using SuccessHotelierHub.Utility
@{
    ViewBag.Title = "Create Reservation";

    var preferenceGroupList = (List<SelectListItem>)ViewBag.PreferenceGroupList;

    var arrivalDayOfWeek = string.Empty;
    var departureDayOfWeek = string.Empty;

    if (Model.ArrivalDate != null && Model.ArrivalDate.HasValue)
    {
        arrivalDayOfWeek = SuccessHotelierHub.Utility.Utility.WeekdayName((int)Model.ArrivalDate.Value.DayOfWeek);
    }

    if (Model.DepartureDate != null && Model.DepartureDate.HasValue)
    {
        departureDayOfWeek = SuccessHotelierHub.Utility.Utility.WeekdayName((int)Model.DepartureDate.Value.DayOfWeek);
    }


    var packageList = (List<PackageVM>)ViewBag.PackageList;

    var childrenCharge = CurrencyManager.ParseAmountToUserCurrency((double)Constants.CHILDREN_CHARGE, LogInManager.CurrencyCode);
    
}

@section styles {
    <link rel="stylesheet" href="~/Content/css/AdminLTE/input-mask/masking-input.css" type="text/css" />
}

<style type="text/css">
    #tblReservationRemark thead {
        background-color: #367FA9;
        color: #fff;
    }
</style>


<section class="content-header">
    <h1>
        Reservation <small>Create</small>
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Reservation</li>
        <li class="active">Create</li>
    </ol>
</section>

<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Reservation Details</h3>
            <div class="pull-right">
                <a href="javascript:void(0);" class="btn btn-warning btn-xs" onclick="GotoProfileEditPage();">Profile</a>
            </div>
        </div>
        <!-- /.box-header -->
        <!-- form start -->
        @using (Html.BeginForm("Create", "Reservation", FormMethod.Post, new { id = "frmReservation", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!-- HIDDEN FIELD -->
            @Html.HiddenFor(m => m.ProfileId)
            @Html.HiddenFor(m => m.PreferenceItems);
            @Html.HiddenFor(m => m.IsWeekEndPrice);
            @Html.HiddenFor(m => m.IsCheckIn);
            @Html.HiddenFor(m => m.IsCheckOut);
            @Html.HiddenFor(m => m.IsReservationCancel);
            <input type="hidden" id="hdnWeekEndPrice" name="hdnWeekEndPrice" value="@(ViewBag.WeekEndPrice)" />
            <!-- HIDDEN FIELD -->

            <div class="box-body">
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.LastName, new { @class = "required-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last Name" })
                            <div class="input-group-addon cursor-P" onclick="openProfileSearchModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.FirstName)
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.TitleId)
                        @Html.DropDownListFor(m => m.TitleId,
                                                new SelectList((IEnumerable<SelectListItem>)ViewBag.TitleList, "Value", "Text"),
                                                "--Select Title--",
                                                new { @class = "form-control" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MemberTypeId)
                        <select class="form-control" id="MemberTypeId" name="MemberTypeId">
                            <option value="">--Select Member Type--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Member Gold</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F932">Member Silver</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F933">Member Platinum</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        <label for="ddlCountry">Country</label>
                        @Html.DropDownListFor(m => m.CountryId,
                                (IEnumerable<SelectListItem>)ViewBag.CountryList, "--Select Country--",
                                htmlAttributes: new { @class = "form-control", @Id = "ddlCountry" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.LanguageId)
                        <select class="form-control" id="LanguageId" name="LanguageId">
                            <option value="">--Select Language--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">English</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F932">Hindi</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F933">France</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.VipId)
                        @Html.DropDownListFor(m => m.VipId,
                                     new SelectList((IEnumerable<SelectListItem>)ViewBag.VipList, "Value", "Text"),
                                    "--Select VIP--",
                                    new { @class = "form-control" })

                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.PhoneNo)
                        @Html.TextBoxFor(m => m.PhoneNo, new { @class = "form-control", placeholder = "Phone #" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MemberNo)
                        @Html.TextBoxFor(m => m.MemberNo, new { @class = "form-control", placeholder = "Member #" })
                    </div>
                    @*<div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.MemberLvt)
                            @Html.TextBoxFor(m => m.MemberLvt, new { @class = "form-control", placeholder = "Member LVT." })
                        </div>*@

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.AgentId)
                        <select class="form-control" id="AgentId" name="AgentId">
                            <option value="">--Select Agent--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F944">Agent 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F945">Agent 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F937">Agent 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CompanyId)
                        @Html.DropDownListFor(m => m.CompanyId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.CompanyList, "Value", "Text"),
                                "--Select Company--",
                                new { @class = "form-control" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.GroupId)
                        <select class="form-control" id="GroupId" name="GroupId">
                            <option value="">--Select Group--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Group 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F934">Group 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F936">Group 3</option>
                        </select>
                    </div>
                </div>

                <div class="row">

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.SourceId)
                        <select class="form-control" id="SourceId" name="SourceId">
                            <option value="">--Select Source--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Source 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Source 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B0F937">Source 3</option>
                        </select>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ContactId)
                        <select class="form-control" id="ContactId" name="ContactId">
                            <option value="">--Select Contact--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Contact 1</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Contact 2</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B0F937">Contact 3</option>
                        </select>
                    </div>
                </div>

                <div class="clearfix"><hr /></div>

                <div class="row">
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(m => m.ArrivalDate, new { @class = "required-label" })
                        <div class="input-group date">
                            @Html.TextBoxFor(m => m.ArrivalDate, "{0:dd/MM/yyyy}", new { @class = "form-control", placeholder = "dd/mm/yyyy" })
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        <span class="text-blue m-l-xl" id="ArrivalDayOfWeek">@arrivalDayOfWeek</span>
                        @Html.ValidationMessageFor(m => m.ArrivalDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1 form-group">
                        @Html.LabelFor(m => m.NoOfNight)
                        @Html.TextBoxFor(m => m.NoOfNight, new { @class = "form-control", onkeydown = "onlyDigits(event)", onchange = "calculateDepartureDate();", onblur = "LoadTransactionSummary();" })
                    </div>
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(m => m.DepartureDate, new { @class = "required-label" })
                        <div class="input-group date">
                            @Html.TextBoxFor(m => m.DepartureDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy", onchange = "calculateNoOfNights();" })
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        <span class="text-blue m-l-xl" id="DepartureDayOfWeek">@departureDayOfWeek</span>
                        @Html.ValidationMessageFor(m => m.DepartureDate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1 form-group">
                        @Html.LabelFor(m => m.NoOfAdult)
                        @Html.TextBoxFor(m => m.NoOfAdult, new { @class = "form-control", onkeydown = "onlyDigits(event)" })
                    </div>
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(m => m.NoOfChildren)
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.NoOfInfant, new { @class = "form-control", @placeholder = "0-3", onkeydown = "onlyDigits(event)" })
                            <span class="input-group-addon"></span>
                            @Html.TextBoxFor(m => m.NoOfChildren, new { @class = "form-control", @placeholder = "3-12", onkeydown = "onlyDigits(event)", onblur = "LoadTransactionSummary();" })
                        </div>
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RoomTypeCode, new { @class = "required-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.RoomTypeCode, new { @class = "form-control", placeholder = "Room Type" })
                            <div class="input-group-addon cursor-P" onclick="openRoomTypeSearchModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.RoomTypeCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(m => m.RoomTypeId)
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.NoOfRoom)
                        @Html.TextBoxFor(m => m.NoOfRoom, new { @class = "form-control", onkeydown = "onlyDigits(event)" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RtcId)
                        @Html.DropDownListFor(m => m.RtcId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.RtcList, "Value", "Text"),
                                "--Select Rate to Charge--",
                                new { @class = "form-control", onchange = "RtcChange();" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RoomNumbers)
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.RoomNumbers, new
                       {
                           @class = "form-control",
                           placeholder = "Room #",
                           @readonly = "readonly"
                       })
                            <div class="input-group-addon cursor-P" onclick="openRoomSearchModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>
                        @Html.HiddenFor(m => m.RoomIds)
                    </div>
                    @*<div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.ExtnId)
                            <select class="form-control" id="ExtnId" name="ExtnId">
                                <option value="">--Select Extn.--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Extn 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Extn 2</option>
                            </select>
                        </div>*@
                </div>
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.RateCodeId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.RateCodeId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.RateTypeList, "Value", "Text"),
                                "--Select Rate Code--",
                                new { @class = "form-control", onchange = "RateTypeChange();" })
                        @Html.ValidationMessageFor(m => m.RateCodeId, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label for="Rate" class="label-bold">Rate (@Html.Raw(LogInManager.CurrencySymbol))</label>
                        @*@Html.LabelFor(m => m.Rate)*@
                        @Html.TextBoxFor(m => m.Rate, Utility.FormatAmountWithTwoDecimal(Model != null && Model.Rate.HasValue ? Model.Rate.Value : 1), new { @class = "form-control", placeholder = "1.00", onkeypress = "onlyNumeric(event)", onblur = "LoadTransactionSummary();" })
                    </div>
                    <div class="col-md-3 form-group m-t-lg">
                        <label class="container1" for="IsFixedRate">
                            Fixed Rate
                            @Html.CheckBoxFor(m => m.IsFixedRate)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.CurrencyId)                        
                        @Html.DropDownListFor(m => m.CurrencyId,
                                     new SelectList((IEnumerable<SelectListItem>)ViewBag.CurrencyList, "Value", "Text"),
                                    "--Select Currency--",
                                    new { @class = "form-control", @disabled = "disabled" })
                        @*<select class="form-control" id="CurrencyId" name="CurrencyId">
                            <option value="">--Select Currency--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">USD</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945" selected>EUR</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F905">INR</option>
                        </select>*@
                    </div>


                </div>

                <div class="row" id="divArrivalTime">
                    <div class="col-md-3 form-group">
                        @*@Html.LabelFor(m => m.PackageId)
                        <select class="form-control" id="PackageId" name="PackageId" onchange="PackageChange();">
                            <option value="">--Select Package--</option>
                            @if (packageList != null && packageList.Count > 0)
                            {
                                var packageDescription = "";
                                foreach (var package in packageList)
                                {
                                    packageDescription = package.Name;
                                    packageDescription += !string.IsNullOrWhiteSpace(package.Description) ? " - " + package.Description : "";
                                    packageDescription += package.Price.HasValue ? " (" + Utility.FormatAmountWithTwoDecimal(package.Price.Value) + ")" : "";

                                    <option value="@package.Id" data-package-price="@package.Price" data-package-name="@package.Name">
                                        @(packageDescription)
                                    </option>
                                }
                            }
                        </select>*@
                        <label for="PackageName">Packages
                            <i class="fa fa-remove m-l-sm text-danger cursor-P" onclick="removeSelectedPackage();" title="Remove Package"> </i>
                        </label>
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.PackageName, new
                            {
                                @class = "form-control",
                                placeholder = "Package",
                                @readonly = "readonly"
                            })
                            <div class="input-group-addon cursor-P" onclick="openPackageTransactionModal();">
                                <i class="fa fa-search"></i>
                            </div>
                        </div>

                        @Html.HiddenFor(m => m.PackageId)
                        <input type="hidden" id="PackagePrice" name="PackagePrice" />
                        <input type="hidden" id="PackageQty" name="PackageQty" />
                        <input type="hidden" id="PackagePostingRhythm" name="PackagePostingRhythm" />
                        <input type="hidden" id="PackageBeginDate" name="PackageBeginDate" />
                        <input type="hidden" id="PackageEndDate" name="PackageEndDate" />   
                        <input type="hidden" id="PackageTotalAmount" name="PackageTotalAmount" />   
                                             
                    </div>

                    <div class="col-md-3 form-group">
                        <div class="bootstrap-timepicker" data-date-format="HH:mm">
                            @Html.LabelFor(m => m.ETAText)
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.ETAText, new { @class = "form-control", placeholder = "HH:mm" })
                                <div class="input-group-addon">
                                    <i class="fa fa-clock-o"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.TARecordLocator)
                        @Html.TextBoxFor(m => m.TARecordLocator, new { @class = "form-control", placeholder = "Agent Booking Reference" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ItemInventoryId)
                        <select class="form-control" id="ItemInventoryId" name="ItemInventoryId">
                            <option value="">--Select Room Inventory--</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Rollaway Bed</option>
                            <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Crib</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ReservationTypeId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.ReservationTypeId,
                                                new SelectList((IEnumerable<SelectListItem>)ViewBag.ReservationTypeList,
                                                "Value", "Text"),
                                                "--Select Reservation Type--",
                                                new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ReservationTypeId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.MarketId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.MarketId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.MarketList, "Value", "Text"),
                                "--Select Market--",
                                new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.MarketId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ReservationSourceId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.ReservationSourceId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.ReservationSourceList, "Value", "Text"),
                                "--Select Source--",
                                new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ReservationSourceId, "", new { @class = "text-danger" })
                    </div>
                    @*<div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.OriginId)
                            @Html.DropDownListFor(m => m.OriginId,
                                    new SelectList((IEnumerable<SelectListItem>)ViewBag.OriginList, "Value", "Text"),
                                    "--Select Origin--",
                                    new { @class = "form-control" })
                        </div>*@
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.PaymentMethodId, new { @class = "required-label" })
                        @Html.DropDownListFor(m => m.PaymentMethodId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.PaymentMethodList, "Value", "Text"),
                                "--Select Payment Method--",
                                new { @class = "form-control", onchange = "SelectPaymentMethod();" })
                        @Html.ValidationMessageFor(m => m.PaymentMethodId, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3 form-group divCreditCardFields">
                        @Html.LabelFor(m => m.CreditCardNo)
                        @Html.TextBoxFor(m => m.CreditCardNo, new { @class = "form-control", placeholder = "Credit Card #", onkeydown = "onlyDigits(event)", maxlength = "16", minlength = "16" })
                        @Html.ValidationMessageFor(m => m.CreditCardNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3 form-group divCreditCardFields divCardExpiryDate">
                        @Html.LabelFor(m => m.CardExpiryDate)
                        <input id="CardExpiryDate" name="CardExpiryDate" type="text" placeholder="MM/YY" class="masked form-control" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" />
                    </div>
                    <div class="col-md-3 form-group divCreditCardFields">
                        @Html.LabelFor(m => m.CVVNo)
                        @Html.TextBoxFor(m => m.CVVNo, new { @class = "form-control", placeholder = "CVV #", onkeydown = "onlyDigits(event)", minlength = "3", maxlength = "4" })
                        @Html.ValidationMessageFor(m => m.CVVNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ApprovalCode)
                        @Html.TextBoxFor(m => m.ApprovalCode, new { @class = "form-control", placeholder = "Pre-Authorised Approval Code" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.ApprovalAmount)
                        @Html.TextBoxFor(m => m.ApprovalAmount, new { @class = "form-control", placeholder = "Pre-Authorised Approval  Amount" })
                    </div>
                    <div class="col-md-3 form-group m-t-lg m-r-n-lg">
                        <label class="container1" for="IsEmailConfirmation">
                            Email Confirmation
                            @Html.CheckBoxFor(m => m.IsEmailConfirmation)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(m => m.GuestBalance)
                        @Html.TextBoxFor(m => m.GuestBalance, new { @class = "form-control", placeholder = "0.00", onkeypress = "onlyNumeric(event)", @readonly = "readonly" })
                    </div>
                    <div class="col-md-2 form-group">
                        @*@Html.LabelFor(m => m.DiscountAmount)*@
                        <label for="DiscountAmount">@(Html.Raw("Discount Amount (" + LogInManager.CurrencySymbol + ")"))</label>
                        @Html.TextBoxFor(m => m.DiscountAmount, new { @class = "form-control", placeholder = "0.00", onkeypress = "onlyNumeric(event)", onchange = "ClearDiscountPercentage();", onblur = "LoadTransactionSummary();" })
                    </div>
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(m => m.DiscountPercentage)
                        @Html.TextBoxFor(m => m.DiscountPercentage, new { @class = "form-control", placeholder = "0.00", onkeypress = "onlyNumeric(event)", onchange = "ClearDiscountAmount();", onblur = "LoadTransactionSummary();" })

                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.DiscountApprovedBy)
                        @Html.DropDownListFor(m => m.DiscountApprovedBy,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.DiscountApprovedList, "Value", "Text"),
                                "--Select Discount Approved By--",
                                new { @class = "form-control" })
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.LabelFor(m => m.DiscountReason)
                        @Html.TextBoxFor(m => m.DiscountReason, new { @class = "form-control", placeholder = "Discount Reason" })
                    </div>
                </div>

                
                
                <div class="row">
                    <hr class="m-t-none" />
                    <div class="col-xs-1 form-group">
                        <button type="button" class="btn btn-info btn-sm" onclick="openPreferenceModal();">
                            Preference
                        </button>
                    </div>
                    <div class="col-md-11 form-group" style="display:none;" id="divSelectedPreference">
                        <label for="ListOfSelectedPreferences" class="m-l-n col-sm-3 control-label m-r-n-xl"> Selected Preference : </label>
                        <div class="col-sm-9" id="ListOfSelectedPreferences">

                        </div>
                    </div>
                </div>
                <div class="row" style="display:none;">
                    <hr  class="m-t-none"/>
                    <div class="col-xs-1 form-group">
                        <button type="button" class="btn bg-navy btn-sm" onclick="openAddOnsModal();">
                            Add Ons
                        </button>
                    </div>
                    <div class="col-md-11 form-group" style="display:none;" id="divSelectedAddOns">
                        <label for="ListOfSelectedAddOns" class="m-l-n col-sm-3 control-label m-r-n-xl">
                            Selected Add Ons :
                        </label>
                        <div class="col-sm-9" id="ListOfSelectedAddOns">

                        </div>
                    </div>
                </div>

                <div class="row">
                    <hr class="m-t-none"/>
                    <div class="col-md-12 form-group">
                        @Html.LabelFor(m => m.Remarks)
                        @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", placeholder = "Remarks", rows = "3" })
                        <input type="hidden" id="hdnReservationRemarkId" name="hdnReservationRemarkId" value="" />
                        <input type="hidden" id="hdnTotalReservationRemarks" name="hdnTotalReservationRemarks" value="0" />
                    </div>
                    <div class="col-xs-3 form-group m-t-xl m-t-md_media" style="display:none;">
                        <button type="button" class="btn btn-primary btn-sm m-r-xs btnReservationRemarks" id="btnReservationRemarks">
                            Add Remarks
                        </button>
                        <button type="button" class="btn btn-default btn-sm btnCancelReservationRemarks" id="btnCancelReservationRemarks"
                                onclick="ClearRemarks();">
                            Cancel
                        </button>
                    </div>
                </div>
                <div class="row" id="divReservationRemark" style="display:none;">
                    <div class="col-md-12 table-responsive table_maxRemarks">
                        <table class="table table-bordered table-hover table-striped cursor-P" id="tblReservationRemark">
                            <thead>
                                <tr>
                                    <th class="width_50">Remarks</th>
                                    <th class="width_35">Track</th>
                                    <th class="width_15">Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>

                <div class="row" id="totalSummary" style="display:none;">
                    <hr />
                    <div class="col-md-12 form-group">
                        <label class="label-bold">Transaction Summary :</label>
                        <label class="m-l-md text-blue">Total Price : <span id="totalPrice"></span></label>
                        <div class="table-responsive table_maxTransactionSummary">
                            <table class="table table-bordered table-striped" id="tblTransactionSummary">
                                <thead>
                                    <tr>
                                        <th class="width_60">Notes</th>
                                        <th class="width_20">Rate</th>
                                        <th class="width_20">Total</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                                <tfoot>
                                    <tr class="text-bold" data-total-price="">
                                        <td></td>
                                        <td>Total Price : </td>
                                        <td class="tdTotalPrice"></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>

            </div>
            <!-- /.box-body -->
                        <div class="box-footer text-right">
                            <button type="button" class="btn btn-success" onclick="saveReservation();">Save</button>
                            <a href="@Url.Action("List","Reservation")" class="btn btn-danger">Cancel</a>
                        </div>
            <!-- /.box-footer -->
        }
    </div>
</section>

<!-- This is the add reservation form-->
<!-- Preference Modal Popup START -->
<div class="modal fade" id="preferenceModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Preferences</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Preference/_Preferences.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateProfile" },
                                    { "PreferenceGroup", preferenceGroupList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Preference Modal Popup END -->
<!-- Advance Profile Search Modal START -->
<div id="profileSearchModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Profile Search</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Profile/_ProfileSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateReservation" }
                                })
            </div>
            <div class="clearfix"></div>

        </div>

    </div>
</div>
<!-- Advance Profile Search Modal END -->
<!-- RoomType Modal Popup START -->
<div class="modal fade" id="roomTypeModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Room Type Search</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/RoomType/_AdvanceSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateReservation" },
                                    { "RateType", ViewBag.RateTypeList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- RoomType Modal Popup END -->
<!-- Room Modal Popup START -->
<div class="modal fade" id="roomModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Room Search</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Room/_AdvanceSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateReservation" },
                                    { "RoomType", ViewBag.RoomTypeList },
                                    { "RoomFeatures", ViewBag.RoomFeaturesList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Room Modal Popup END -->
<!-- AddOns Modal Popup START -->
<div class="modal fade" id="addOnsModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Ons</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/AddOns/_AddOns.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "EditReservation" }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- AddOns Modal Popup END -->

<!-- Package Modal Popup START -->
<div class="modal fade" id="packageModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Packages - New</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/Package/_PackageTransaction.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateReservation" },
                                    { "PackageList",  packageList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Package Modal Popup END -->

<script type="text/javascript">
    $(document).ready(function () {

        $('#CardExpiryDate').attr("placeholder", "MM/YY");


        $("#frmReservation input[type='text'], textarea").blur(function () {
            if (!IsNullOrEmpty($(this).val())) {
                $('label[for="' + $(this).attr("id") + '"]').addClass("label-bold");
            } else {
                $('label[for="' + $(this).attr("id") + '"]').removeClass("label-bold");
            }
        });

        $("#frmReservation input[type='text'], textarea").change(function () {
            if (!IsNullOrEmpty($(this).val())) {
                data_needs_saving = true;
            }
        });

        $("#frmReservation select").change(function () {
            if (!IsNullOrEmpty($(this).val())) {
                data_needs_saving = true;
                $('label[for="' + $(this).attr("id") + '"]').addClass("label-bold");
            } else {
                $('label[for="' + $(this).attr("id") + '"]').removeClass("label-bold");
            }
        });

        //Date picker
        $('#ArrivalDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy'
        })
        .change(arrivalDateChanged)
        .on('changeDate', arrivalDateChanged);

        $('#DepartureDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy'
        })
        .change(departureDateChanged)
        .on('changeDate', departureDateChanged);

        //Timepicker
        $('#ETAText').timepicker({
            showInputs: false,
            showMeridian: false,
            minuteStep: 5
            //timeFormat: 'HH:mm'

        });

        $('#ETAText').val('');

        //Show value of selected drop down.
        $('form#frmReservation #PackageId').val('@Model.PackageId');

        //Preference
        $('.btnAdvanceSearchPreferenceOk').click(function (e) {
            var selectedPreferenceCount = 0;
            selectedPreferenceCount = $('form#frmAdvancePreferenceSearch #selectedPreferences span').length;

            if (!IsNullOrEmpty(selectedPreferenceCount) && selectedPreferenceCount > 0) {
                var selectedPreferenceElement = $('form#frmAdvancePreferenceSearch #selectedPreferences').html();
                $("#ListOfSelectedPreferences").html(selectedPreferenceElement);

                $('#divSelectedPreference').show();

                //Close Preference Search Modal.
                $('#preferenceModal').modal('toggle');
            }
        });

        //Profile
        $('.btnAdvanceSearchProfileOk').click(function (e) {
            var selectedProfile = $('input[name=rbProfile]:checked', '#frmAdvanceProfileSearch');
            if (!IsNullOrEmpty(selectedProfile.val())) {
                var profileId, firstName, lastName, titleId, title, telephoneNo, countryId, remarks;
                profileId = $(selectedProfile).val();
                firstName = $(selectedProfile).data('firstname');
                lastName = $(selectedProfile).data('lastname');
                titleId = $(selectedProfile).data('titleid');
                title = $(selectedProfile).data('title');
                telephoneNo = $(selectedProfile).data('telephoneno');
                countryId = $(selectedProfile).data('countryid');
                remarks = $(selectedProfile).data('remarks');

                $('form#frmReservation #ProfileId').val(profileId);

                $('form#frmReservation #FirstName').val(firstName);
                $('form#frmReservation #LastName').val(lastName);
                $('form#frmReservation #TitleId').val(titleId);
                $('form#frmReservation #PhoneNo').val(telephoneNo);
                $('form#frmReservation #Remarks').val(remarks);

                if (!IsNullOrEmpty(countryId) && countryId != "0")
                    $('form#frmReservation #ddlCountry').val(countryId);

                //Close Profile Search Modal.
                $('#profileSearchModal').modal('toggle');

                //Show Profile Preferences.
                showPreferencesByProfile(profileId);

                //Show Profile Remarks.
                ShowProfileRemarks();

            } else {
                showToaster("Please select any one profile.", ToasterType.ERROR);
            }
        });

        //Room Type
        $('.btnAdvanceSearchRoomTypeOk').click(function (e) {
            var selectedRoomType = $('input[name=rbRoomType]:checked', '#frmAdvanceRoomTypeSearch');
            if (!IsNullOrEmpty(selectedRoomType.val())) {
                var roomTypeId, roomTypeCode, rateTypeId, amount;
                roomTypeCode = $(selectedRoomType).data('roomtype');
                roomTypeId = $(selectedRoomType).data('roomtypeid');
                rateTypeId = $(selectedRoomType).data('ratetypeid');
                amount = $(selectedRoomType).data('amount');

                $('form#frmReservation #RoomTypeId').val(roomTypeId);
                $('form#frmReservation #RoomTypeCode').val(roomTypeCode);

                $('form#frmReservation #RateCodeId').val(rateTypeId);

                $('form#frmReservation #Rate').val(amount).trigger('blur'); // Call function LoadTransactionSummary() on blur event.

                getPriceDetails(); //Get Week Day & Week End Price.

                //Close Room Type Search Modal.
                $('#roomTypeModal').modal('toggle');

            } else {
                showToaster("Please select any room type.", ToasterType.ERROR);
            }
        });

        //Room
        $('.btnAdvanceSearchRoomOk').click(function (e) {
            var roomNumbers = "";
            var roomIds = "";

            var selectedNoOfRooms = $("form#frmAdvanceRoomSearch input:checkbox[name='chkRoom']:checked").length;
            var noOfRoom = $('form#frmReservation #NoOfRoom').val();

            if (!IsNullOrEmpty(selectedNoOfRooms)) {

                if (noOfRoom != selectedNoOfRooms) {
                    showToaster("Please select only " + noOfRoom + " room details.", ToasterType.ERROR);
                    return false;
                }

                $("form#frmAdvanceRoomSearch input:checkbox[name='chkRoom']:checked").each(function () {
                    //get selected room.
                    roomNumbers += $(this).data("roomno") + Delimeter.COMMA + Delimeter.SPACE;
                    roomIds += $(this).val() + Delimeter.COMMA;
                });

                if (!IsNullOrEmpty(roomNumbers)) {

                    roomNumbers = RemoveLastCharacter(roomNumbers, Delimeter.COMMA);
                    roomIds = RemoveLastCharacter(roomIds, Delimeter.COMMA);

                    $('form#frmReservation #RoomNumbers').val(roomNumbers);
                    $('form#frmReservation #RoomIds').val(roomIds);

                    //Close Room Search Modal.
                    $('#roomModal').modal('toggle');

                }
            }
        });

        LoadTransactionSummary();

        RateTypeChange();

        //Get Preferences By Profile.
        if (!IsNullOrEmpty('@Model.ProfileId')) {
            showPreferencesByProfile('@Model.ProfileId');
        }

        //Show Profile Remarks.
        ShowProfileRemarks();

        //Reservation Remarks
        $('form#frmReservation #btnReservationRemarks').click(function (e) {
            var remarkId = $('form#frmReservation #hdnReservationRemarkId').val();
            var reservationId = $('form#frmReservation #Id').val();
            var remarks = $('form#frmReservation #Remarks').val();

            if (IsNullOrEmpty(remarks)) {
                showToaster("Please enter remarks", ToasterType.ERROR);
                return false;
            }
            if (!IsNullOrEmpty(remarkId)) {
                //Update remarks in table.
                UpdateReservationRemark(remarkId);
            } else {
                //Add remarks in table.
                AddReservationRemark();
            }
        });


        //AddOns
        $('.btnAdvanceSearchAddOnsOk').click(function (e) {
            var selectedAddOnsCount = 0;
            selectedAddOnsCount = $('form#frmAdvanceAddOnsSearch #selectedAddOns span').length;

            if (!IsNullOrEmpty(selectedAddOnsCount) && selectedAddOnsCount > 0) {
                var selectedAddOnsElement = $('form#frmAdvanceAddOnsSearch #selectedAddOns').html();
                $("#ListOfSelectedAddOns").html(selectedAddOnsElement);

                $('#divSelectedAddOns').show();

                //Load Transaction Summary.
                LoadTransactionSummary();

                //Close AddOns Search Modal.
                $('#addOnsModal').modal('toggle');
            }
        });

        //Package
        $('.btnPackageTransactionOK').click(function (e) {

            var packageId = $("form#frmPackageTransaction #PackageId").val();

            if (IsNullOrEmpty(packageId)) {
                showToaster("Please select package.", ToasterType.ERROR);
                return false;
            }

            if ($("#frmPackageTransaction").valid() == false) {
                showToaster("Please fill all the required field first", ToasterType.ERROR);
                return false;
            }

            var beginDate = $("form#frmPackageTransaction #BeginDate").val();
            var endDate = $("form#frmPackageTransaction #EndDate").val();

            if (!IsNullOrEmpty(beginDate) && !IsNullOrEmpty(endDate)) {
                var objBeginDate = GetDateObject(beginDate, DateSeprator.SLASH);
                var objEndDate = GetDateObject(endDate, DateSeprator.SLASH);

                if (objBeginDate > objEndDate) {
                    showToaster("Begin date must be less than end date.", ToasterType.ERROR);
                    return false;
                }
            }

            var selectedPackage = $('form#frmPackageTransaction #PackageId option:selected');

            var packagePrice = parseFloat(selectedPackage.attr("data-package-price"));
            var packageName = selectedPackage.attr("data-package-name");

            var qty = $("form#frmPackageTransaction #Qty").val();
            var postingRhythm = $("form#frmPackageTransaction #PostingRhythm").val();

            if (IsNullOrEmpty(qty)) { qty = 1;}

            $('form#frmReservation #PackageId').val(packageId);
            $('form#frmReservation #PackagePrice').val(packagePrice);
            $('form#frmReservation #PackageName').val(packageName);
            $('form#frmReservation #PackageQty').val(qty);
            $('form#frmReservation #PackagePostingRhythm').val(postingRhythm);
            $('form#frmReservation #PackageBeginDate').val(beginDate);
            $('form#frmReservation #PackageEndDate').val(endDate);


            //Close Package Modal.
            CloseModal("packageModal");

            //Load Transaction Summary.
            LoadTransactionSummary();
        });

        //Load Transaction Summary.
        LoadTransactionSummary();
    });

    function arrivalDateChanged(e) {
        var selectedDate = $(this).val();

        var dayOfWeek = "";
        if (!IsNullOrEmpty(selectedDate)) {
            var objSelectedArrivalDate = GetDateObject(selectedDate, DateSeprator.SLASH);

            if (!IsNullOrEmpty(objSelectedArrivalDate)) {
                var weekDay = objSelectedArrivalDate.getDay();
                dayOfWeek = GetDayOfWeek(weekDay);
            }
        }
        $('#ArrivalDayOfWeek').html(dayOfWeek);
        calculateDepartureDate();
    }

    function departureDateChanged(e) {
        var selectedDate = $(this).val();

        var dayOfWeek = "";
        if (!IsNullOrEmpty(selectedDate)) {
            var objSelectedDepartureDate = GetDateObject(selectedDate, DateSeprator.SLASH);

            if (!IsNullOrEmpty(objSelectedDepartureDate)) {
                var weekDay = objSelectedDepartureDate.getDay();
                dayOfWeek = GetDayOfWeek(weekDay);
            }
        }
        $('#DepartureDayOfWeek').html(dayOfWeek);
    }

    function openPreferenceModal() {
        clearPreferenceSearch();

        var selectedPreferenceCount = 0;
        selectedPreferenceCount = $('#ListOfSelectedPreferences span').length

        if (!IsNullOrEmpty(selectedPreferenceCount) && selectedPreferenceCount > 0) {
            var selectedPreferenceElement = $('#ListOfSelectedPreferences').html();
            $("form#frmAdvancePreferenceSearch #selectedPreferences").html(selectedPreferenceElement)
            $("form#frmAdvancePreferenceSearch #divPreferences").show();
        } else {
            $("form#frmAdvancePreferenceSearch #selectedPreferences").html('')
            $("form#frmAdvancePreferenceSearch #divPreferences").hide();
        }

        selectPreferenceGroup("ROOOM FEATURES");
        $("form#frmAdvancePreferenceSearch #btnSearch").click();        
        $('#preferenceModal').modal('toggle');
    }

    function removePreferenceItem(element) {
        if (element) {
            var preferenceId = $(element).data("preferenceid");
            $(element).parent("span").remove();

            //Check Preference Modal Is Open.
            if ($('#preferenceModal').hasClass('in')) {
                //Uncheck preference after remove.
                $('form#frmAdvancePreferenceSearch #chkPreference_' + preferenceId).prop("checked", false);
            }
        }
    }

    function showPreferencesByProfile(profileId) {
        //Get Preferences
        $.ajax({
            beforeSend: function (xhr) {
                showLoader();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                ShowErrorMessage(jqXHR.status, errorThrown);
            },
            complete: function () {
                hideLoader();
            },
            url: '@Url.Content("~/Profile/GetPreferencesByProfile")',
            type: 'GET',
            data: { profileId: profileId },
            success: function (response) {
                if (response.IsSuccess == false) {
                    showToaster(response.errorMessage, ToasterType.ERROR);
                }
                else {
                    var html = "";
                    if (response.data.length > 0) {
                        for (i = 0; i < response.data.length; i++) {
                            html += generatePreferenceButton(response.data[i].PreferenceId, response.data[i].PreferenceDescription);
                        }

                        if (!IsNullOrEmpty(html)) {
                            $('#divSelectedPreference').show();
                            $('#ListOfSelectedPreferences').html(html);
                        }
                    }
                }
            }
        });
    }

    function getSelectedPreferenceItemIds() {
        var preferenceIds = "";
        $("#ListOfSelectedPreferences span i").each(function () {
            preferenceIds += $(this).data("preferenceid") + ",";
        });

        preferenceIds = RemoveLastCharacter(preferenceIds, Delimeter.COMMA);
        return preferenceIds;
    }

    function generatePreferenceButton(preferenceId, preference) {
        return "<span class='btn btn-xs bg-maroon m-r-xs' id='spnPreference_" + preferenceId + "'>" + preference + " <i class='fa fa-remove m-l-sm' onclick='removePreferenceItem(this);' data-preferenceid='" + preferenceId + "'></i></span>";
    }

    function validateReservationData() {

        var errorMessage = "";
        var blnValid = true;

        var profileId = $('form#frmReservation #ProfileId').val();

        if (IsNullOrEmpty(profileId)) {
            showToaster("Please search and select profile again.", ToasterType.ERROR);
            blnValid = false;
        }

        if (!IsNullOrEmpty($('form#frmReservation #PaymentMethodId').val())) {
            var paymentMethod = $('form#frmReservation #PaymentMethodId option:selected').text();

            var paymentMethodName = paymentMethod;
            if (Contains(paymentMethod, '-')) {
                paymentMethodName = trim(paymentMethod.split('-')[1]);
            }

            if (trim(paymentMethodName) != 'Cash') {
                var creditCardNo = $('form#frmReservation #CreditCardNo').val();
                var cardExpiryDate = $('form#frmReservation #CardExpiryDate').val();
                var cvvNo = $('form#frmReservation #CVVNo').val();

                var errorText = "";
                if (IsNullOrEmpty(creditCardNo)) {
                    errorText += "Please enter credit card number." + Delimeter.BREAKLINE;
                    blnValid = false;
                } else {
                    if (!IsValidCreditCardNo(creditCardNo)) {
                        errorText += "Please enter 16 digits of your credit card." + Delimeter.BREAKLINE;
                        blnValid = false;
                    }
                }

                if (IsNullOrEmpty(cardExpiryDate)) {
                    errorText += "Please enter card expiry date." + Delimeter.BREAKLINE;
                    blnValid = false;
                }

                if (IsNullOrEmpty(cvvNo)) {
                    errorText += "Please enter CVV No." + Delimeter.BREAKLINE;
                    blnValid = false;
                }

                if (blnValid == false) {
                    showToaster(errorText, ToasterType.ERROR);
                    return false;
                }
            } else {
                var arrivalTime = $('#ETAText').val();
                if (IsNullOrEmpty(arrivalTime)) {
                    blnValid = false;
                    swal({
                        title: '<span>Reservation type Non Guranteed requires an arrival time.</span>',
                        type: 'warning',
                        showCloseButton: true,
                        showCancelButton: false,
                        focusConfirm: false,
                        confirmButtonText: 'OK',
                    }).then((result) => {
                        goToByScroll("divArrivalTime");
                        $('#ETAText').focus();
                        blnValid = false;
                    });
                }
            }
        }



        if ($("#frmReservation").valid() == false) {
            showToaster("Please fill all the required field first", ToasterType.ERROR);
            blnValid = false;
        }

        return blnValid;
    }

    function saveReservation() {
        if (validateReservationData()) {

            //Get Selected Preference Items.
            var preferenceIds = getSelectedPreferenceItemIds();
            $('form#frmReservation #PreferenceItems').val(preferenceIds);

            //Get Selected AddOns.
            var addOnsList = [];
            $("form#frmReservation #ListOfSelectedAddOns span i").each(function () {
                var modelAddOnsVM = {};
                modelAddOnsVM.Id = $(this).data("addonsid");
                modelAddOnsVM.Price = $(this).data("price");
                addOnsList.push(modelAddOnsVM);
            });

            //Reservation Remarks.
            var reservationRemarkList = [];
            $("form#frmReservation #tblReservationRemark tbody tr").each(function () {
                var rowNumber = $(this).attr("data-rownumber");
                if (!IsNullOrEmpty(rowNumber)) {
                    var modelReservationRemark = {};

                    rowNumber = parseInt(rowNumber);

                    var remarks = $('#Remarks_' + rowNumber).val();
                    modelReservationRemark.Remarks = remarks;

                    var dateTimeObj = $('#RemarksCreatedOn_' + rowNumber).val();
                    modelReservationRemark.CreatedOn = dateTimeObj;

                    reservationRemarkList.push(modelReservationRemark);
                }
            });

            var remarks = $("form#frmReservation #Remarks").val();
            if (!IsNullOrEmpty(remarks)) {
                var dateObj = new Date();
                var createdOn = (GetDate(dateObj, DateFormat.DDMMYYYY) + ' ' + GetTime(dateObj));

                var modelReservationRemark = {};
                modelReservationRemark.Remarks = remarks;
                modelReservationRemark.CreatedOn = createdOn;

                reservationRemarkList.push(modelReservationRemark);
            }


            //Package Mapping
            var packageId = $("form#frmReservation #PackageId").val();
            var packageName = $("form#frmReservation #PackageName").val();
            var packageMappingList = [];

            if (!IsNullOrEmpty(packageId) && !IsNullOrEmpty(packageName)) {
                var packagePrice = $("form#frmReservation #PackagePrice").val();
                var packageQty = $("form#frmReservation #PackageQty").val();
                var packagePostingRhythm = $("form#frmReservation #PackagePostingRhythm").val();
                var packageBeginDate = $("form#frmReservation #PackageBeginDate").val();
                var packageEndDate = $("form#frmReservation #PackageEndDate").val();
                var packageTotalAmount = $("form#frmReservation #PackageTotalAmount").val();

                var modelPackageMapping = {};
                modelPackageMapping.PackageId = packageId;
                modelPackageMapping.PackageName = packageName;
                modelPackageMapping.PackagePrice = packagePrice;
                modelPackageMapping.Qty = packageQty;
                modelPackageMapping.PostingRhythm = packagePostingRhythm;
                modelPackageMapping.BeginDate = packageBeginDate;
                modelPackageMapping.EndDate = packageEndDate;
                modelPackageMapping.TotalAmount = packageTotalAmount;

                packageMappingList.push(modelPackageMapping);
            }


            //Enable all select box before form submit.
            $('form#frmReservation #CurrencyId').attr("disabled", false);

            var formData = $('#frmReservation').serializeObject();

            //Add additional property in form data.
            $.extend(formData, { RemarksList: reservationRemarkList });
            $.extend(formData, { AddOnsList: addOnsList });
            $.extend(formData, { PackageMappingList: packageMappingList });

            //Ajax Request to create reservation.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Reservation/Create")',
                type: 'POST',
                //data: $('#frmReservation').serialize(),
                data: formData,
                success: function (response) {
                    if (!IsNullOrEmpty(response)) {
                        if (response.IsSuccess == false) {
                            if (response.IsReservation) {
                                swal({
                                    title: response.errorMessage,
                                    type: 'warning',
                                    showCloseButton: true,
                                    showCancelButton: false,
                                    focusConfirm: false,
                                    confirmButtonText: 'OK',
                                })
                                return false;
                            }
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {
                            //reset the global varible once the data is saved
                            data_needs_saving = false;

                            var reservationId = response.data.ReservationId;

                            var redirectUrl = '@Url.Content("~/Reservation/List")';

                            swal({
                                title: 'Confirmation# : <span class="text-blue">' + response.data.ConfirmationNo + '</span>',
                                type: 'success',
                                html: 'Reservation details saved successfully.',
                                showCloseButton: true,
                                showCancelButton: false,
                                focusConfirm: false,
                                confirmButtonText: 'OK',
                            }).then((result) => {
                                if (result.value) {

                                    if (!IsNullOrEmpty(reservationId)) {
                                        var roomNumbers = $('#RoomNumbers').val();

                                        if (!IsNullOrEmpty(roomNumbers)) {
                                            //Ask confirmation about check in.
                                            swal({
                                                title: 'Do you want to check in this guest now?',
                                                type: 'info',
                                                showCancelButton: true,
                                                showCloseButton: true,
                                                confirmButtonColor: '#3085d6',
                                                cancelButtonColor: '#d33',
                                                confirmButtonText: 'Yes'
                                            }).then((result) => {
                                                if (result.value) {

                                                    var name = ($('form#frmReservation #LastName').val() + ' ' + $('form#frmReservation #FirstName').val());

                                                    var modelCheckInPaymentMethod = {};
                                                    modelCheckInPaymentMethod.ReservationId = response.data.ReservationId;
                                                    modelCheckInPaymentMethod.ProfileId = $('form#frmReservation #ProfileId').val();
                                                    modelCheckInPaymentMethod.NoOfRoom = $('form#frmReservation #NoOfRoom').val();
                                                    modelCheckInPaymentMethod.Name = name;
                                                    modelCheckInPaymentMethod.CheckInDate = $('form#frmReservation #ArrivalDate').val();
                                                    modelCheckInPaymentMethod.CheckInTimeText = $('form#frmReservation #ETAText').val();
                                                    modelCheckInPaymentMethod.PaymentMethodId = $('form#frmReservation #PaymentMethodId').val();
                                                    modelCheckInPaymentMethod.CreditCardNo = $('form#frmReservation #CreditCardNo').val();
                                                    modelCheckInPaymentMethod.CardExpiryDate = $('form#frmReservation #CardExpiryDate').val();
                                                    modelCheckInPaymentMethod.RoomNumbers = $('form#frmReservation #RoomNumbers').val();
                                                    modelCheckInPaymentMethod.RoomIds = $('form#frmReservation #RoomIds').val();
                                                    modelCheckInPaymentMethod.RoomTypeId = $('form#frmReservation #RoomTypeId').val();

                                                    $.ajax({
                                                        beforeSend: function (xhr) {
                                                            showLoader();
                                                        },
                                                        error: function (jqXHR, textStatus, errorThrown) {
                                                            ShowErrorMessage(jqXHR.status, errorThrown);
                                                        },
                                                        complete: function () {
                                                            hideLoader();
                                                        },
                                                        url: '@Url.Content("~/FrontDesk/CheckIn")',
                                                        type: 'POST',
                                                        data: modelCheckInPaymentMethod,
                                                        success: function (response) {
                                                            if (response.IsSuccess == false) {
                                                                showToaster(response.errorMessage, ToasterType.ERROR);
                                                            }
                                                            else {
                                                                swal({
                                                                    title: '' + response.data.Name + ' checked in successfully.',
                                                                    type: 'success',
                                                                    showCloseButton: true,
                                                                    showCancelButton: false,
                                                                    focusConfirm: false,
                                                                    confirmButtonText: 'OK',
                                                                }).then((result) => {
                                                                    redirectTo(redirectUrl);
                                                                });

                                                            }
                                                        }
                                                    });
                                                } else {
                                                    redirectTo(redirectUrl);
                                                }
                                            })
                                        } else {
                                            redirectTo(redirectUrl);
                                        }
                                    } else {
                                        redirectTo(redirectUrl);
                                    }
                                }
                            });
                        }
                    }
                }
            });
        }
    }

    function calculateNoOfNights() {
        var arrivalDate = $('form#frmReservation #ArrivalDate').val();
        var departureDate = $('form#frmReservation #DepartureDate').val();
        var noOfNight = 1;

        if (!IsNullOrEmpty(arrivalDate) && !IsNullOrEmpty(departureDate)) {
            var objArrivalDate = GetDateObject(arrivalDate, DateSeprator.SLASH);
            var objDepartureDate = GetDateObject(departureDate, DateSeprator.SLASH);

            var timeDiff = Math.abs(objDepartureDate.getTime() - objArrivalDate.getTime());
            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

            if (!IsNullOrEmpty(diffDays)) {
                noOfNight = diffDays > 0 ? diffDays : 1;
            }

            $('form#frmReservation #NoOfNight').val(noOfNight);

            LoadTransactionSummary();
        }
    }

    function calculateDepartureDate() {
        var arrivalDate = $('form#frmReservation #ArrivalDate').val();
        var noOfNight = $('form#frmReservation #NoOfNight').val();
        var departureDate = '';

        if (!IsNullOrEmpty(arrivalDate)) {
            var objArrivalDate = GetDateObject(arrivalDate, DateSeprator.SLASH);

            var dt = objArrivalDate;
            if (!IsNullOrEmpty(noOfNight) && noOfNight > 0) {
                dt.setDate(objArrivalDate.getDate() + parseInt(noOfNight));
            } else {
                dt.setDate(objArrivalDate.getDate() + 1);
            }

            if (dt != null) {
                //dd/MM/yyyy
                //departureDate = GetDate(dt, DateFormat.DDMMYYYY);
                $("form#frmReservation #DepartureDate").datepicker("setDate", dt);
            }
        }
    }

    function calculateTotalPrice() {
        var noOfNights = $("form#frmReservation #NoOfNight").val();
        var rate = $('form#frmReservation #Rate').val();
        var noOfChildren = $('form#frmReservation #NoOfChildren').val();
        var discountAmount = $('form#frmReservation #DiscountAmount').val();
        var discountPercentage = $('form#frmReservation #DiscountPercentage').val();


        var totalPrice = "0.00";
        var totalDiscount = 0;
        var childrenCharges = 0;

        if (IsNullOrEmpty(noOfNights)) { noOfNights = 1; }
        if (IsNullOrEmpty(rate)) { rate = 1; }
        if (IsNullOrEmpty(noOfChildren)) { noOfChildren = 0; }
        if (IsNullOrEmpty(discountAmount)) { discountAmount = 0; }
        if (IsNullOrEmpty(discountPercentage)) { discountPercentage = 0; }

        //Calculate Discount.
        if (discountPercentage > 0) {
            totalDiscount = (rate * discountPercentage) / 100;
        }
        else {
            totalDiscount = discountAmount;
        }

        //Deduct Discount from rate.
        rate = (rate - totalDiscount);

        //Calculate children charges. (Default euro 5.)
        if (noOfChildren > 0){
            var vChildrenCharge = @childrenCharge;
            childrenCharges = (noOfChildren * vChildrenCharge);
        }


        totalPrice = (parseInt(noOfNights) * parseFloat(rate)) + parseFloat(childrenCharges);

        //Set No. Of Nights
        $('#spnNoOfNight').html("(" + parseInt(noOfNights) + ")");
        $('#spnNoOfNight').attr("data-nights", parseInt(noOfNights));

        //Set Rate
        $('#spnRate').html("(@(Html.Raw(LogInManager.CurrencySymbol)) " + parseFloat(rate) + ")");
        $('#spnRate').attr("data-rate", parseFloat(rate));

        $('#totalPrice').html("@(Html.Raw(LogInManager.CurrencySymbol)) " + totalPrice);
    }

    function openRoomTypeSearchModal() {
        clearRoomTypeSearch();

        $("form#frmAdvanceRoomTypeSearch #RoomTypeCode").val($('form#frmReservation #RoomTypeCode').val());
        $("form#frmAdvanceRoomTypeSearch #RateTypeId").val($('form#frmReservation #RateCodeId').val());
        $("form#frmAdvanceRoomTypeSearch #ArrivalDate").datepicker("setDate", GetDateObject($('form#frmReservation #ArrivalDate').val(), DateSeprator.SLASH));
        $("form#frmAdvanceRoomTypeSearch #DepartureDate").datepicker("setDate", GetDateObject($('form#frmReservation #DepartureDate').val(), DateSeprator.SLASH));
        //$("form#frmAdvanceRoomTypeSearch #ArrivalDate").val($('form#frmReservation #ArrivalDate').val());
        //$("form#frmAdvanceRoomTypeSearch #DepartureDate").val($('form#frmReservation #DepartureDate').val());
        $("form#frmAdvanceRoomTypeSearch #NoOfNight").val($('form#frmReservation #NoOfNight').val());
        $("form#frmAdvanceRoomTypeSearch #IsWeekEndPrice").val($('form#frmReservation #IsWeekEndPrice').val());

        $("form#frmAdvanceRoomTypeSearch #btnSearch").click();

        $('#roomTypeModal').modal('toggle');
    }

    function GotoProfileEditPage() {
        var profileId = $('#ProfileId').val();
        if (!IsNullOrEmpty(profileId)) {

            //reset the global varible for popup redirection.
            data_needs_saving = false;

            var url = '@Url.Content("~/Profile/EditIndividualProfile")' + "?id=" + profileId + "&source=CreateReservation";
            redirectTo(url);
        }
    }

    //Advance Profile Search
    function openProfileSearchModal() {
        clearProfileSearch();

        var lastName = $("form#frmReservation #LastName").val();
        var firstName = $("form#frmReservation #FirstName").val();
        var titleId = $("form#frmReservation #TitleId").val();
        var countryId = $("form#frmReservation #ddlCountry").val();
        var phoneNo = $("form#frmReservation #PhoneNo").val();

        if (!IsNullOrEmpty(lastName)) {
            //Show search results based on entered name.
            $("form#frmAdvanceProfileSearch #LastName").val(trim(lastName));
            $("form#frmAdvanceProfileSearch #FirstName").val(trim(firstName));
            $("form#frmAdvanceProfileSearch #hdnTitleId").val(trim(titleId));
            $("form#frmAdvanceProfileSearch #hdnCountryId").val(trim(countryId));
            $("form#frmAdvanceProfileSearch #hdnPhoneNo").val(trim(phoneNo));
            $("form#frmAdvanceProfileSearch #hdnReservationId").val('');

            $("form#frmAdvanceProfileSearch #btnSearch").click();
        }
        $('#profileSearchModal').modal('toggle');
    }

    function openRoomSearchModal() {

        var noOfRoom = $('#NoOfRoom').val();
        if (IsNullOrEmpty(noOfRoom) || noOfRoom == "0") {
            showToaster("Please first enter No. Of Rooms", ToasterType.ERROR);
            return false;
        }

        clearRoomSearch();

        $("form#frmAdvanceRoomSearch #RoomTypeId").val($('form#frmReservation #RoomTypeId').val());
        $("form#frmAdvanceRoomSearch #ArrivalDate").datepicker("setDate", GetDateObject($('form#frmReservation #ArrivalDate').val(), DateSeprator.SLASH));
        $("form#frmAdvanceRoomSearch #DepartureDate").datepicker("setDate", GetDateObject($('form#frmReservation #DepartureDate').val(), DateSeprator.SLASH));

        //$("form#frmAdvanceRoomSearch #ArrivalDate").val($('form#frmReservation #ArrivalDate').val());
        //$("form#frmAdvanceRoomSearch #DepartureDate").val($('form#frmReservation #DepartureDate').val());
        $("form#frmAdvanceRoomSearch #hdnSelectedRoomIds").val($('form#frmReservation #RoomIds').val());
        $("form#frmAdvanceRoomSearch #hdnSelectedRoomNumbers").val($('form#frmReservation #RoomNumbers').val());
        $("form#frmAdvanceRoomSearch #hdnNoOfRoomsUptoSelect").val($('form#frmReservation #NoOfRoom').val());

        $("form#frmAdvanceRoomSearch #btnSearch").click();

        $('#roomModal').modal('toggle');
    }

    function SelectPaymentMethod() {
        if (!IsNullOrEmpty($('#PaymentMethodId').val())) {
            var paymentMethod = $('#PaymentMethodId option:selected').text();

            var paymentMethodName = paymentMethod;
            if (Contains(paymentMethod, '-')) {
                paymentMethodName = trim(paymentMethod.split('-')[1]);
            }

            if (trim(paymentMethodName) == 'Cash') {
                //Remove Label Bold.
                $('form#frmReservation label[for="CreditCardNo"]').removeClass("label-bold");
                $('form#frmReservation label[for="CardExpiryDate"]').removeClass("label-bold");
                $('form#frmReservation label[for="CVVNo"]').removeClass("label-bold");
            } else {
                //Set Label Bold.
                $('form#frmReservation label[for="CreditCardNo"]').addClass("label-bold");
                $('form#frmReservation label[for="CardExpiryDate"]').addClass("label-bold");
                $('form#frmReservation label[for="CVVNo"]').addClass("label-bold");
            }
        }

    }

    function RateTypeChange() {
        if (!IsNullOrEmpty($('form#frmReservation #RateCodeId').val())) {
            var text = $('form#frmReservation #RateCodeId option:selected').text();

            var rateCode = text;

            if (rateCode == 'BAR' || rateCode == 'BARBB' || rateCode == 'BARDBB') {
                selectMarket("Leisure");
                selectReservationSource("Leisure");
            }

            if (rateCode == 'CORPBB' || rateCode == 'CORPDBB' || rateCode == 'CORPRO') {
                selectMarket("Corporate");
                //selectReservationSource("Corporate");
                $("form#frmReservation #ReservationSourceId").val('');
            }

            getPriceDetails(); //Get Week Day & Week End Price.

        } else {
            $("form#frmReservation #MarketId").val('');
            $("form#frmReservation #ReservationSourceId").val('');
        }
    }

    function ClearDiscountPercentage() {
        $('form#frmReservation #DiscountPercentage').val('');
    }

    function ClearDiscountAmount() {
        $('form#frmReservation #DiscountAmount').val('');
    }

    function RtcChange() {
        var rtc = $('form#frmReservation #RtcId').val();
        if (!IsNullOrEmpty(rtc)) {
            $("form#frmReservation #IsFixedRate").prop("checked", true);
        } else {
            $("form#frmReservation #IsFixedRate").prop("checked", false);
        }
    }

    function selectMarket(name) {
        var dd = document.getElementById('MarketId');
        for (var i = 0; i < dd.options.length; i++) {
            if (dd.options[i].text === name) {
                dd.selectedIndex = i;
                break;
            }
        }
    }

    function selectReservationSource(name) {
        var dd = document.getElementById('ReservationSourceId');
        for (var i = 0; i < dd.options.length; i++) {
            if (dd.options[i].text === name) {
                dd.selectedIndex = i;
                break;
            }
        }
    }

    //Reservation Remarks : START
    function AddReservationRemark() {

        var rowNumber = $('#hdnTotalReservationRemarks').val();

        if (!IsNullOrEmpty(rowNumber)) {
            rowNumber = parseInt(rowNumber) + 1;
        } else {
            rowNumber = 1;
        }

        var remarks = $('form#frmReservation #Remarks').val();

        var html = "";

        //Create New Row
        html += "<tr data-rownumber='" + rowNumber + "' id='tr_" + rowNumber + "'>";

        //Remarks
        html += "<td class='remarks'>";
        html += remarks;
        html += "<input type='hidden' id='Remarks_" + rowNumber + "' name='Remarks_" + rowNumber + "' value='" + remarks + "'/>";
        html += "</td>";

        //TrackLog
        var userName = '@LogInManager.UserName';
        var dateObj = new Date();
        var createdDate = GetDate(dateObj, DateFormat.DDMMYYYY);
        var createdTime = GetTime(dateObj);
        var trackLog = createdDate + " at " + createdTime + " added by " + userName;
        var createdOn = (GetDate(dateObj, DateFormat.DDMMYYYY) + ' ' + GetTime(dateObj));

        html += "<td class='tracklog'>";
        html += trackLog;
        html += "<input type='hidden' id='RemarksCreatedOn_" + rowNumber + "' name='RemarksCreatedOn_" + rowNumber + "' value='" + createdOn + "'/>";
        html += "</td>";



        //Action
        html += "<td>";
        //html += "<a href='javascript:void(0);' onclick='editReservationRemark(this);' class='text-success font_18 m-r-md'><i class='fa fa-edit'/></a>";
        html += "<a href='javascript:void(0);' onclick='deleteReservationRemark(this);' class='text-danger font_18 m-r-md'><i class='fa fa-trash'/></a>";
        html += "</td>";

        html += "</tr>";


        $('form#frmReservation #tblReservationRemark tbody').prepend(html);

        $('#hdnTotalReservationRemarks').val(rowNumber);

        ClearRemarks();

        $("form#frmReservation #divReservationRemark").show();
    }


    function UpdateReservationRemark(id) {
        var rowNumber = id;

        if (!IsNullOrEmpty(rowNumber)) {
            var remarks = $('form#frmReservation #Remarks').val();

            var html = "";
            var trId = "#tr_" + rowNumber;

            //Remarks
            html = "";
            html += remarks;
            html += "<input type='hidden' id='Remarks_" + rowNumber + "' name='Remarks_" + rowNumber + "' value='" + remarks + "'/>";
            $('form#frmReservation #tblReservationRemark tbody ' + trId + ' #Remarks_' + rowNumber).val(remarks);
            $('form#frmReservation #tblReservationRemark tbody ' + trId + ' td.remarks').html(html);

            //TrackLog
            var userName = '@LogInManager.UserName';
            var dateObj = new Date();
            var createdDate = GetDate(dateObj, DateFormat.DDMMYYYY);
            var createdTime = GetTime(dateObj);
            var createdOn = (GetDate(dateObj, DateFormat.DDMMYYYY) + ' ' + GetTime(dateObj));
            var trackLog = createdDate + " at " + createdTime + " added by " + userName;

            html = "";
            html += trackLog;
            html += "<input type='hidden' id='RemarksCreatedOn_" + rowNumber + "' name='RemarksCreatedOn_" + rowNumber + "' value='" + createdOn + "'/>";
            $('form#frmReservation #tblReservationRemark tbody ' + trId + ' td.tracklog').html(html);


            //showToaster("Remark updated successfully", ToasterType.SUCCESS);

            ClearRemarks();
        }
    }

    function editReservationRemark(element) {

        if (!IsNullOrEmpty(element)) {
            var id = $(element).closest("tr").attr("data-rownumber");
            $('form#frmReservation #hdnReservationRemarkId').val(id);
            $('form#frmReservation #Remarks').val($('#Remarks_' + id).val());
            $('form#frmReservation #btnReservationRemarks').html("Update Remarks");
        }
    }

    function deleteReservationRemark(element) {
        $(element).closest("tr").remove();
        ClearRemarks();
        //showToaster("Remark deleted successfully", ToasterType.SUCCESS);
    }

    function ClearRemarks() {
        $('form#frmReservation #hdnReservationRemarkId').val('');
        $('form#frmReservation #Remarks').val('');
        $('form#frmReservation #btnReservationRemarks').html("Add Remarks");
    }

    function ShowProfileRemarks() {
        var profileId = $('form#frmReservation #ProfileId').val();

        if (!IsNullOrEmpty(profileId)) {
            //Ajax request to load Profile remarks details.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Profile/GetProfileRemarks")',
                type: 'POST',
                data: { profileId: profileId },
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                        $("form#frmReservation #divReservationRemark").hide();
                    }
                    else {
                        //Show data in table.
                        var result = response.data;

                        if (result.length > 0) {
                            $('form#frmReservation #tblReservationRemark tbody').empty();

                            //Add the data rows.
                            for (var i = 0; i < result.length; i++) {
                                AddProfileRemarkToReservation(result[i].Remarks);

                            }
                        }
                    }
                }
            });
        }
    }

    function AddProfileRemarkToReservation(remark) {
        var rowNumber = $('#hdnTotalReservationRemarks').val();

        if (!IsNullOrEmpty(rowNumber)) {
            rowNumber = parseInt(rowNumber) + 1;
        } else {
            rowNumber = 1;
        }

        var remarks = remark;

        var html = "";

        //Create New Row
        html += "<tr data-rownumber='" + rowNumber + "' id='tr_" + rowNumber + "'>";

        //Remarks
        html += "<td class='remarks'>";
        html += remarks;
        html += "<input type='hidden' id='Remarks_" + rowNumber + "' name='Remarks_" + rowNumber + "' value='" + remarks + "'/>";
        html += "</td>";

        //TrackLog
        var userName = '@LogInManager.UserName';
        var dateObj = new Date();
        var createdDate = GetDate(dateObj, DateFormat.DDMMYYYY);
        var createdTime = GetTime(dateObj);
        var trackLog = createdDate + " at " + createdTime + " added by " + userName;
        var createdOn = (GetDate(dateObj, DateFormat.DDMMYYYY) + ' ' + GetTime(dateObj));

        html += "<td class='tracklog'>";
        html += trackLog;
        html += "<input type='hidden' id='RemarksCreatedOn_" + rowNumber + "' name='RemarksCreatedOn_" + rowNumber + "' value='" + createdOn + "'/>";
        html += "</td>";



        //Action
        html += "<td>";
        //html += "<a href='javascript:void(0);' onclick='editReservationRemark(this);' class='text-success font_18 m-r-md'><i class='fa fa-edit'/></a>";
        html += "<a href='javascript:void(0);' onclick='deleteReservationRemark(this);' class='text-danger font_18 m-r-md'><i class='fa fa-trash'/></a>";
        html += "</td>";

        html += "</tr>";


        $('form#frmReservation #tblReservationRemark tbody').prepend(html);

        $('#hdnTotalReservationRemarks').val(rowNumber);

        ClearRemarks();

        $("form#frmReservation #divReservationRemark").show();
    }
    //Reservation Remarks : END

    //AddOns : START
    function openAddOnsModal() {
        clearAddOnsSearch();

        var selectedAddOnsCount = 0;
        selectedAddOnsCount = $('#ListOfSelectedAddOns span').length

        if (!IsNullOrEmpty(selectedAddOnsCount) && selectedAddOnsCount > 0) {
            var selectedAddOnsElement = $('#ListOfSelectedAddOns').html();
            $("form#frmAdvanceAddOnsSearch #selectedAddOns").html(selectedAddOnsElement)
            $("form#frmAdvanceAddOnsSearch #divAddOns").show();
        } else {
            $("form#frmAdvanceAddOnsSearch #selectedAddOns").html('');
            $("form#frmAdvanceAddOnsSearch #divAddOns").hide();
        }

        $("form#frmAdvanceAddOnsSearch #btnSearch").click();

        $('#addOnsModal').modal('toggle');
    }

    function removeAddOnsItem(element) {
        if (element) {
            var addOnsId = $(element).data("addonsid");
            $(element).parent("span").remove();

            //Check AddOns Modal Is Open.
            if ($('#addOnsModal').hasClass('in')) {
                //Uncheck AddOns after remove.
                $('form#frmAdvanceAddOnsSearch #chkAddOns_' + addOnsId).prop("checked", false);
            }
        }
    }

    function getSelectedAddOnsItemIds() {
        var addOnsIds = "";
        $("#ListOfSelectedAddOns span i").each(function () {
            addOnsIds += $(this).data("addonsid") + ",";
        });

        addOnsIds = RemoveLastCharacter(addOnsIds, Delimeter.COMMA);
        return addOnsIds;
    }

    function generateAddOnsButton(addOnsId, addOnsName, price) {
        return "<span class='btn btn-xs bg-purple m-r-xs' id='spnAddOns_" + addOnsId + "'>" + addOnsName + " <i class='fa fa-remove m-l-sm' onclick='removeAddOnsItem(this);' data-addonsid='" + addOnsId + "'  data-price='" + price + "' data-addons='" + addOnsName + "'></i></span>";
    }
    //AddOns : END

    //Get Price Details.
    function getPriceDetails() {
        var roomTypeId = "", rateTypeId = "";

        roomTypeId = $('form#frmReservation #RoomTypeId').val();
        rateTypeId = $('form#frmReservation #RateCodeId').val();

        if (!IsNullOrEmpty(roomTypeId) && !IsNullOrEmpty(rateTypeId)) {
            //Ajax request to get price details.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Reservation/GetPriceDetails")',
                type: 'POST',
                data: { roomTypeId: roomTypeId, rateTypeId: rateTypeId },
                success: function (response) {
                    if (response != null) {
                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {
                            var result = response.data;

                            if (!IsNullOrEmpty(result)) {
                                var weekDayPrice = parseFloat(result.WeekDayPrice);
                                var weekEndPrice = parseFloat(result.WeekEndPrice);

                                $('form#frmReservation #hdnWeekEndPrice').val(FormatNumberWithTwoDecimal(weekEndPrice));

                                $('form#frmReservation #Rate').val(FormatNumberWithTwoDecimal(weekDayPrice)).trigger("blur");

                                //Load Transaction Summary
                                //LoadTransactionSummary();
                            }
                        }
                    }
                }
            });
        }
    }

    function LoadTransactionSummary() {
        var noOfNights = $("form#frmReservation #NoOfNight").val();

        var arrivalDate = $("form#frmReservation #ArrivalDate").val();
        var objArrivalDate = GetDateObject(arrivalDate, DateSeprator.SLASH);

        var departureDate = $("form#frmReservation #DepartureDate").val();
        var objDepartureDate = GetDateObject(departureDate, DateSeprator.SLASH);

        var rate = $('form#frmReservation #Rate').val();
        var weekEndPrice = $('form#frmReservation #hdnWeekEndPrice').val();
        var weekDayPrice = 0;

        var noOfChildren = $('form#frmReservation #NoOfChildren').val();
        var discountAmount = $('form#frmReservation #DiscountAmount').val();
        var discountPercentage = $('form#frmReservation #DiscountPercentage').val();


        var totalPrice = "0.00";
        var totalDiscount = 0;
        var childrenCharges = 0;

        if (IsNullOrEmpty(noOfNights)) { noOfNights = 1; }
        if (IsNullOrEmpty(rate)) { rate = 1; }
        if (IsNullOrEmpty(weekEndPrice)) { weekEndPrice = rate; }
        if (IsNullOrEmpty(noOfChildren)) { noOfChildren = 0; }
        if (IsNullOrEmpty(discountAmount)) { discountAmount = 0; }
        if (IsNullOrEmpty(discountPercentage)) { discountPercentage = 0; }

        noOfNights = parseInt(noOfNights);
        rate = parseFloat(rate);
        weekEndPrice = parseFloat(weekEndPrice);
        noOfChildren = parseInt(noOfChildren);
        discountAmount = parseFloat(discountAmount);
        discountPercentage = parseFloat(discountPercentage);

        weekDayPrice = rate;


        var html = "";

        var totalNoOfDays = noOfNights;

        var startDate = objArrivalDate;

        for (i = 1; i <= totalNoOfDays; i++) {

            var date = GetDate(startDate, DateFormat.DDMMYYYY);
            rate = weekDayPrice;

            //Check Week End.
            var weekDay = startDate.getDay();
            var dayOfWeek = GetDayOfWeek(weekDay);

            var isWeekEnd = false;

            if (dayOfWeek == 'Friday' || dayOfWeek == 'Saturday') {
                isWeekEnd = true;
                rate = weekEndPrice;
            }

            //Calculate Discount.
            var discount = 0;
            if (discountPercentage > 0) {
                discount = parseFloat((rate * discountPercentage) / 100);
            }
            else {
                discount = parseFloat(discountAmount);
            }

            totalDiscount = totalDiscount + discount;

            //Deduct Discount from rate.
            //rate = (rate - totalDiscount);

            var qty = 1;
            var total = (rate * qty);


            html += "<tr data-rate='" + rate + "' data-qty='" + qty + "'  data-total-price='" + total + "'>";

            //Notes
            html += "<td>";
            html += "Night " + i + " : " + "(" + date + ") " + (isWeekEnd ? " - Week End " : "");
            html += "</td>";

            //Rate
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(rate);
            html += "</td>";

            //Total
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(total);
            html += "</td>";

            html += "</tr>";

            //Increment date.
            startDate.setDate(startDate.getDate() + 1);
        }

        //Children Charges.
        if (!IsNullOrEmpty(noOfChildren) && noOfChildren > 0) {

            childrenCharges = @childrenCharge; // Default euro 5.

            var qty = parseInt(noOfChildren);
            var total = (childrenCharges * qty);

            html += "<tr data-rate='" + childrenCharges + "' data-qty='" + qty + "'  data-total-price='" + total + "'>";

            //Notes
            html += "<td>";
            html += "Children : (" + noOfChildren + ")";
            html += "</td>";

            //Rate
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(childrenCharges) + " * " + qty;
            html += "</td>";

            //Total
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(total);
            html += "</td>";

            html += "</tr>";
        }

        //Package.
        var packageId = $('form#frmReservation #PackageId').val();
        if (!IsNullOrEmpty(packageId)) {

            var packagePrice = parseFloat($('form#frmReservation #PackagePrice').val());
            var packageName = $('form#frmReservation #PackageName').val();
            var packageQty = parseInt($('form#frmReservation #PackageQty').val());
            var packageBeginDate = $('form#frmReservation #PackageBeginDate').val();
            var packageEndDate = $('form#frmReservation #PackageEndDate').val();

            var noOfDays = 1;

            if (!IsNullOrEmpty(packageBeginDate) && !IsNullOrEmpty(packageEndDate)) {
                var objPackageBeginDate = GetDateObject(packageBeginDate, DateSeprator.SLASH);
                var objPackageEndDate = GetDateObject(packageEndDate, DateSeprator.SLASH);

                var timeDiff = Math.abs(objPackageEndDate.getTime() - objPackageBeginDate.getTime());
                var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

                if (!IsNullOrEmpty(diffDays)) {
                    noOfDays = diffDays > 0 ? diffDays : 1;
                }
            }

            if (IsNullOrEmpty(packageQty)) { packageQty = 1; }

            if (!IsNullOrEmpty(noOfDays)) { noOfDays = parseInt(noOfDays); }
            if (!IsNullOrEmpty(packageQty)) { packageQty = parseInt(packageQty); }

            var qty = (packageQty * noOfDays);

            var total = (packagePrice * qty);

            $("form#frmReservation #PackageTotalAmount").val(total);

            html += "<tr data-rate='" + packagePrice + "' data-qty='" + qty + "'  data-total-price='" + total + "'>";

            //Notes
            html += "<td>";
            html += "Package : " + packageName + "";
            html += "</td>";

            //Rate
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(packagePrice) + " * " + qty;
            html += "</td>";

            //Total
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(total);
            html += "</td>";

            html += "</tr>";
        }

        //Add Ons.
        $("form#frmReservation #ListOfSelectedAddOns span i").each(function () {
            var addOnsId = $(this).data("addonsid");
            var addOnsName = $(this).data("addons");
            var addOnsPrice = parseFloat($(this).data("price"));

            var qty = 1;
            var total = (addOnsPrice * qty);

            html += "<tr data-rate='" + addOnsPrice + "' data-qty='" + qty + "'  data-total-price='" + total + "'>";

            //Notes
            html += "<td>";
            html += "Add Ons : " + addOnsName + "";
            html += "</td>";

            //Rate
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(addOnsPrice);
            html += "</td>";

            //Total
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(total);
            html += "</td>";

            html += "</tr>";

        });


        //Discount.
        if (parseFloat(totalDiscount) > 0) {

            var qty = 1;
            var total = (ConvertToNegative(totalDiscount) * qty);

            html += "<tr data-rate='" + ConvertToNegative(totalDiscount) + "' data-qty='" + qty + "'  data-total-price='" + total + "'>";

            //Notes
            html += "<td>";
            html += "Discount : ";
            html += "</td>";

            //Rate
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(ConvertToNegative(totalDiscount)) + "";
            html += "</td>";

            //Total
            html += "<td>";
            html += "@(Html.Raw(LogInManager.CurrencySymbol))  " + FormatNumberWithTwoDecimal(ConvertToNegative(totalDiscount));
            html += "</td>";

            html += "</tr>";
        }


        $('form#frmReservation #tblTransactionSummary tbody').empty().append(html);

        $('form#frmReservation #totalSummary').show();

        //Update Total Price.
        calculateTotalTransactionSummaryPrice();
    }

    function calculateTotalTransactionSummaryPrice() {
        var totalPrice = 0;

        $("form#frmReservation #tblTransactionSummary tbody tr").each(function () {
            totalPrice += parseFloat($(this).attr("data-total-price"));
        });

        totalPrice = FormatNumberWithTwoDecimal(totalPrice);

        //Set total price
        $('span#totalPrice').html("@(Html.Raw(LogInManager.CurrencySymbol))  " + totalPrice);

        $("form#frmReservation #tblTransactionSummary tfoot tr").attr("data-total-price", totalPrice);
        $("form#frmReservation #tblTransactionSummary tfoot tr td.tdTotalPrice").html("@(Html.Raw(LogInManager.CurrencySymbol)) " + totalPrice);
    }

    //Package : START
    function PackageChange() {
        LoadTransactionSummary();
    }

    function openPackageTransactionModal() {

        var packageBeginDate = $("form#frmReservation #PackageBeginDate").val();
        var packageEndDate = $("form#frmReservation #PackageEndDate").val();
        var packageQty = $("form#frmReservation #PackageQty").val();
        var packagePostingRhythm = $("form#frmReservation #PackagePostingRhythm").val();
        var packageId = $("form#frmReservation #PackageId").val();

        if (!IsNullOrEmpty(packageBeginDate)) {
            $("form#frmPackageTransaction #BeginDate").datepicker("setDate", GetDateObject(packageBeginDate, DateSeprator.SLASH));
        }
        //else {
        //    $("form#frmPackageTransaction #BeginDate").datepicker("setDate", GetDateObject($('form#frmReservation #ArrivalDate').val(), DateSeprator.SLASH));
        //}

        if (!IsNullOrEmpty(packageEndDate)) {
            $("form#frmPackageTransaction #EndDate").datepicker("setDate", GetDateObject(packageEndDate, DateSeprator.SLASH));
        }
        //else {
        //    $("form#frmPackageTransaction #EndDate").datepicker("setDate", GetDateObject($('form#frmReservation #DepartureDate').val(), DateSeprator.SLASH));
        //}

        if (IsNullOrEmpty(packageQty) || packageQty == "0") { packageQty = 1; }

        $("form#frmPackageTransaction #Qty").val(packageQty);
        //$("form#frmPackageTransaction #PostingRhythm").val(packagePostingRhythm);
        $("form#frmPackageTransaction #PackageId").val(packageId);

        $('#packageModal').modal('toggle');
    }

    function removeSelectedPackage() {
        $('form#frmReservation #PackageId').val('');
        $('form#frmReservation #PackagePrice').val('');
        $('form#frmReservation #PackageName').val('');
        $('form#frmReservation #PackageQty').val('');
        $('form#frmReservation #PackagePostingRhythm').val('');
        $('form#frmReservation #PackageBeginDate').val('');
        $('form#frmReservation #PackageEndDate').val('');

        LoadTransactionSummary();
    }

    //Package : END



    window.onbeforeunload = function () {
        //Check the global variable - if the data needs saving then take user confirmation
        if (data_needs_saving) {
            return "There are unsaved data on the page, do you want to save or discard?";
        } else {
            return;
        }
    };

</script>

@section scripts {    
    <script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/jquery.inputmask.js"></script>
    <script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/jquery.inputmask.date.extensions.js"></script>
    <script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/jquery.inputmask.extensions.js"></script>
    <script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/masking-input.js" data-autoinit="true"></script>
}

