@model SuccessHotelierHub.Models.SearchReservationParametersVM
@using SuccessHotelierHub.Models
@{
    ViewBag.Title = "Reservation List";

    var reservationCancellationReasonList = (List<ReservationCancellationReasonVM>)ViewBag.ReservationCancellationReasonList;
}

@section styles{
    <!-- DataTables -->
    <link rel="stylesheet" href="~/Content/css/AdminLTE/dataTables.bootstrap.min.css" type="text/css" />
}

@{
    var PagerName = "ReservationGrid";
}

<section class="content-header">
    <h1>
        Reservation <small>List</small>
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Reservation</li>
        <li class="active">List</li>
    </ol>
</section>


<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Search Reservation</h3>
            <div class="pull-right box-tools">
                
                @if (LogInManager.HasRights("ADMIN"))
                {
                    <input type="button" class="btn btn-warning btn-sm m-r-md" id="btnDeleteAll" value="Delete All" onclick="DeleteAllReservation();"/>
                }
                <a href="@Url.Action("RateQuery","Reservation")"
                   class="btn btn-info btn-sm" style="color: #fff">New Reservation</a>
            </div>
        </div>
        <form class="frmReservationList" enctype="multipart/form-data" method="post">

            <!-- HIDDEN FIELD -->
            <input type="hidden" id="hdnReservationId" name="hdnReservationId" value="" />
            <!-- HIDDEN FIELD -->

            <div class="box-body">
                <div class="pt_10 pl_10 pr_10 searchBox_Border">
                    <div class="row">
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.LastName)
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last Name" })
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.FirstName)
                            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.CVVNo)
                            @Html.TextBoxFor(m => m.CVVNo, new { @class = "form-control", placeholder = "CVV #", onkeydown = "onlyDigits(event)", maxlength = "3" })
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.TARecordLocator)
                            @Html.TextBoxFor(m => m.TARecordLocator, new { @class = "form-control", placeholder = "TA Record Locator" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.CompanyId)
                            @Html.DropDownListFor(m => m.CompanyId,
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.CompanyList, "Value", "Text"),
                                "--Select Company--",
                                new { @class = "form-control" })
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.GroupId)
                            <select class="form-control" id="GroupId" name="GroupId">
                                <option value="">--Select Group--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Group 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F934">Group 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F936">Group 3</option>
                            </select>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.BlockCodeId)
                            <select class="form-control" id="BlockCodeId" name="BlockCodeId">
                                <option value="">--Select Group Code--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Group Code 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Group Code 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-G95261B0F937">Group Code 3</option>
                            </select>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.SourceId)
                            <select class="form-control" id="SourceId" name="SourceId">
                                <option value="">--Select Source--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Source 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Source 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B0F937">Source 3</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.AgentId)
                            <select class="form-control" id="AgentId" name="AgentId">
                                <option value="">--Select Agent--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F944">Agent 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F945">Agent 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F937">Agent 3</option>
                            </select>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.ContactId)
                            <select class="form-control" id="ContactId" name="ContactId">
                                <option value="">--Select Contact--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B8F944">Contact 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B9F945">Contact 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B0F937">Contact 3</option>
                            </select>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.MemberTypeId)
                            <select class="form-control" id="MemberTypeId" name="MemberTypeId">
                                <option value="">--Select Member Type--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Member Gold</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F932">Member Silver</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F933">Member Platinum</option>
                            </select>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.MemberNo)
                            @Html.TextBoxFor(m => m.MemberNo, new { @class = "form-control", placeholder = "Member #" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.ArrivalFrom)
                            <div class="input-group date">
                                @Html.TextBoxFor(m => m.ArrivalFrom, new { @class = "form-control mydatepicker", placeholder = "dd/mm/yyyy" })
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.ArrivalTo)
                            <div class="input-group date">
                                @Html.TextBoxFor(m => m.ArrivalTo, new { @class = "form-control mydatepicker", placeholder = "dd/mm/yyyy" })
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 form-group">
                            @Html.LabelFor(m => m.ConfirmationNo)
                            @Html.TextBoxFor(m => m.ConfirmationNo, new { @class = "form-control", placeholder = "Confirmation#" })
                        </div>
                        <div class="col-md-3 form-group m-t-lg">
                           
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3 form-group m-t-sm">
                            <label class="container1" for="IsShowCancelledReservation">
                                Show Cancelled Reservation
                                @Html.CheckBoxFor(m => m.IsShowCancelledReservation)
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        @*<div class="col-md-3 form-group m-t-sm hide">
                            <label class="container1" for="IsShowCheckedInReservation">
                                Show Checked In
                                @Html.CheckBoxFor(m => m.IsShowCheckedInReservation)
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="col-md-3 form-group m-t-sm hide">
                            <label class="container1" for="IsShowCheckedOutReservation">
                                Show Checked Out
                                @Html.CheckBoxFor(m => m.IsShowCheckedOutReservation)
                                <span class="checkmark"></span>
                            </label>
                        </div>*@
                        <div class="col-md-9 form-group text-right">
                            <button type="button" id="btnSearch"
                                    class="btn btn-success m-r-xs" onclick="searchReservation()">
                                Search
                            </button>
                            <button type="button" id="btnClear" class="btn btn-danger" onclick="clearReservation()">Clear</button>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>



                <div class="col-xs-12 padding-zero m-t">
                    <div class="table-responsive" id="divReservationList">
                        <table class="table table-bordered table-hover table-striped" id="tblReservation">
                            <thead>
                                <tr>
                                    <th>CreatedOn</th>
                                    <th>Last Name</th>
                                    <th>First Name</th>
                                    <th>Phone #</th>
                                    <th>Arrival</th>
                                    <th>Nights</th>
                                    <th>Departure</th>
                                    <th>Adults</th>
                                    <th>Child</th>
                                    <th>Rooms</th>
                                    <th>Room Type</th>
                                    <th>Rate Type</th>
                                    <th class="width85">Status</th>
                                    <th class="width150">Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div class="clearfix"></div>
                    <div class="text-left">
                        @Html.Partial("_Pagination", new SuccessHotelierHub.Models.PaginationVM()
                   {
                       TokenForEnableDisableButtons = PagerName,
                       PageChangeMethod = "ReservationGridPageChange"
                   })
                    </div>
                </div>
            </div>
        </form>
    </div>
</section>


<!-- Advance Reservation Cancellation Reason Search Modal START -->
<div id="reservationCancellationReasonSearchModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Cancellation Reasons</h4>
            </div>
            <div class="modal-body modal-body_padding">
                @Html.Partial("~/Views/ReservationCancellationReason/_AdvanceSearch.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "RateQuery" },
                                    { "ReservationCancellationReason" , reservationCancellationReasonList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>

    </div>
</div>
<!-- Advance Reservation Cancellation Reason Search Modal END -->

<!-- Email Form Modal START -->
<div id="emailFormModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Send Email</h4>
            </div>
            <div class="modal-body modal-body_padding" id="divSendEmail">
                @Html.Partial("~/Views/Cashiering/_FolioEmail.cshtml")
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!--  Email Form Modal END -->

<script type="text/javascript">

    var currentPage = 1;
    var grdReservation;
    var IsSearchButtonClicked = false;

    $(document).ready(function () {

        $('#ArrivalFrom').datepicker("setDate", new Date());

        setTimeout(InitializeReservationGrid, 200);

        $("#frmReservationList input[type=text]").keyup(function (event) {            
            if (event.keyCode === 13) {
                $("#btnSearch").click();
            }
        });

        $('form#frmAdvanceCancellationReasonSearch .btnAdvanceSearchCancellationReasonOk').click(function (e) {
            var selectedReason = $('input[name=rbCancellationReason]:checked', '#frmAdvanceCancellationReasonSearch');
            if (!IsNullOrEmpty(selectedReason.val())) {
                var reasonId, code, description;
                reasonId = $(selectedReason).val();
                code = $(selectedReason).data('code');
                description = $("#Description").val();

                var reservationId = $('#hdnReservationId').val();

                //Close Reservation Cancellation Reason Search Modal.
                $('#reservationCancellationReasonSearchModal').modal('toggle');

                if (!IsNullOrEmpty(reservationId)) {
                    //Ajax call to cancel reservation.
                    $.ajax({
                        beforeSend: function (xhr) {
                            showLoader();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            ShowErrorMessage(jqXHR.status, errorThrown);
                        },
                        complete: function () {
                            hideLoader();
                        },
                        url: '@Url.Content("~/Reservation/CancelReservation")',
                        type: 'POST',
                        data: { id: reservationId, cancellationReasonId: reasonId, comment: description },
                        success: function (response) {
                            if (response.IsSuccess == true) {

                                //Remove row from the table.
                                var tr = $('#tblReservation  tbody tr#' + reservationId)
                                var row = grdReservation.row(tr);
                                var rowNode = row.node();
                                row.remove();
                                grdReservation.draw();

                                showToaster("Reservation cancelled successfully.", ToasterType.SUCCESS);
                            }
                            else {
                                showToaster(response.errorMessage, ToasterType.ERROR);
                            }
                        }
                    });
                }

            } else {
                showToaster("Please select any one reason.", ToasterType.ERROR);
            }
        });
    });

    function openCancellationReasonSearchModal() {
        //Open Reservation Cancellation Reason Search Modal.
        $('#reservationCancellationReasonSearchModal').modal('toggle');
    }


    function SearchReservationParameters(d) {
        var lastName = $('#LastName').val();
        var firstName = $('#FirstName').val();
        var cvvNo = $('#CVVNo').val();
        var taRecordLocator = $('#TARecordLocator').val();
        var companyId = $('#CompanyId').val();
        var groupId = $('#GroupId').val();
        var blockCodeId = $('#BlockCodeId').val();
        var sourceId = $('#SourceId').val();
        var agentId = $('#AgentId').val();
        var contactId = $('#ContactId').val();
        var memberTypeId = $('#MemberTypeId').val();
        var memberNo = $('#MemberNo').val();
        var arrivalFrom = $('#ArrivalFrom').val();
        var arrivalTo = $('#ArrivalTo').val();
        var confirmationNo = $('#ConfirmationNo').val();
        var isShowCancelledReservation = $('#IsShowCancelledReservation').prop('checked');
        var isShowCheckedInReservation = $('#IsShowCheckedInReservation').prop('checked');
        var isShowCheckedOutReservation = $('#IsShowCheckedOutReservation').prop('checked');
        

        d.PageNum = currentPage;
        d.LastName = lastName;
        d.FirstName = firstName;
        d.CVVNo = cvvNo;
        d.TARecordLocator = taRecordLocator;
        d.CompanyId = companyId;
        d.GroupId = groupId;
        d.BlockCodeId = blockCodeId;
        d.SourceId = sourceId;
        d.AgentId = agentId;
        d.ContactId = contactId;
        d.MemberTypeId = memberTypeId;
        d.MemberNo = memberNo;
        d.ArrivalFrom = ConvertDDMMYYYY_To_MMDDYYYY(arrivalFrom, DateSeprator.SLASH);
        d.ArrivalTo = ConvertDDMMYYYY_To_MMDDYYYY(arrivalTo, DateSeprator.SLASH);
        d.ConfirmationNo = confirmationNo;
        d.IsShowCancelledReservation = isShowCancelledReservation;
        d.IsShowCheckedInReservation = isShowCheckedInReservation;
        d.IsShowCheckedOutReservation = isShowCheckedOutReservation;
    }

    function ReservationGridDataBound(response) {
        if (response.IsSuccess == true) {
            var confirmationNo = $('#ConfirmationNo').val();
            //If search by confirmation no. then redirect to edit page.
            if (!IsNullOrEmpty(confirmationNo) && (!IsNullOrEmpty(response.data) && response.data.length > 0)) {
                var id = response.data[0].Id;
                GotoReservationEdit(id);
            }

            @("PagerDataBound" + PagerName)(response.CurrentPage, response.PageSize, response.TotalRecords);

            if (IsSearchButtonClicked) {
                goToByScroll("divReservationList");
            }
            return response.data;
        }
        else {
            showToaster(response.ErrorMsg, ToasterType.ERROR);
        }
    }


    function ReloadReservationGrid() {
        grdReservation.ajax.url("@Url.Content("~/Reservation/SearchReservation")").load();
    }

    function ReservationGridPageChange(cPage) {
        currentPage = cPage;
        ReloadReservationGrid();
    }


    function InitializeReservationGrid() {
        grdReservation = $('#tblReservation').DataTable({
            serverSide: true,
            ajax: {
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Reservation/SearchReservation")',
                data: SearchReservationParameters,
                dataSrc: ReservationGridDataBound,
                type: "POST"
            },
            scrollCollapse: true,
            serverSide: true,
            processing: true,
            processing: "<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'>",
            ordering: true,
            bDestroy: true,
            paging: false,
            searching: false,
            bLengthChange: false,            
            info: false,
            columnDefs: [
            {
                targets: 0,
                data: "CreatedOn",
                orderable: true,
                "visible": false
            },
            {
                targets: 1,
                data: "LastName",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.LastName + '</a> ';

                }
            },
            {
                targets: 2,
                data: "FirstName",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.FirstName + '</a> ';

                }
            },
            {
                targets: 3,
                data: "PhoneNo",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.PhoneNo + '</a> ';

                }
            },
            {
                targets: 4,
                data: "ArrivalDate",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.ArrivalDate + '</a> ';

                }
            },
            {
                targets: 5,
                data: "NoOfNight",
                orderable: false,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.NoOfNight + '</a> ';

                }
            },
            {
                targets: 6,
                data: "DepartureDate",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.DepartureDate + '</a> ';

                }
            },
            {
                targets: 7,
                data: "NoOfAdult",
                orderable: false,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.NoOfAdult + '</a> ';

                }
            },
            {
                targets: 8,
                data: "NoOfChildren",
                orderable: false,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.NoOfChildren + '</a> ';

                }
            },
            {
                targets: 9,
                data: "NoOfRoom",
                orderable: false,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.NoOfRoom + '</a> ';

                }
            },
            {
                targets: 10,
                data: "RoomTypeCode",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.RoomTypeCode + '</a> ';

                }
            },
            {
                targets: 11,
                data: "RateTypeCode",
                orderable: true,
                render: function (data, type, full, meta) {
                    return '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">' + full.RateTypeCode + '</a> ';

                }
            },            
            {
                targets: 12,
                data: "Id",
                orderable: false,
                render: function (data, type, full, meta) {
                    var isReservationCancel = full.IsReservationCancel;
                    var isCheckIn = full.IsCheckIn;
                    var isCheckOut = full.IsCheckOut;
                    var text = "";

                    if (isReservationCancel == true) {
                        text += '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">Cancelled</a> ';
                    }
                    else if (isCheckIn == true && isCheckOut == false) {
                        text += '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">Checked In</a> ';
                    }
                    else if (isCheckIn == true && isCheckOut == true) {
                        text += '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                        + ' class="">Checked Out</a> ';
                    }

                    return text;
                }
            },
            {
                targets: 13,
                data: "Id",
                orderable: false,
                className: "text-left-align",
                render: function (data, type, full, meta) {
                    var isReservationCancel = full.IsReservationCancel;
                    var isCheckIn = full.IsCheckIn;
                    var isCheckOut = full.IsCheckOut;
                    var buttons = "";

                    buttons += '<a href="javascript:void(0);" onclick="GotoReservationEdit(\'' + full.Id + '\')" '
                                + ' class="btn btn-success btn-xs font_10">Edit</a> ';

                    if (isReservationCancel == false && isCheckIn == false) {
                        buttons += ' <button type="button" class="btn btn-danger btn-xs font_10"'
                                    + ' onclick="cancelReservation(this,event,\'' + full.Id + '\')">Cancel</button>';
                    }

                    if (isCheckOut) {
                        var url = '@Url.Content("~/Cashiering/Preview")' + '?Id=' + full.Id;

                        buttons += '<a href="' + url + '" target="_blank" '
                                 + ' class="btn btn-warning btn-xs font_10">Folio</a> ';

                        buttons += '<a  href="javascript:void(0);" onclick="OpenEmailForm(\'' + full.Id + '\',\'' + full.Email + '\')" ' + ' class="btn btn-primary btn-xs font_10">Export</a> ';
                    }

                    return buttons;
                }
            }
            ],
            order: [[1, "asc"]],
            fnCreatedRow: function (nRow, aData, iDataIndex) {
                $(nRow).attr('ID', aData.ID)
            }
        })
    }

    function GotoReservationEdit(Id) {
        var url = '@Url.Content("~/Reservation/Edit/")' + Id;
        redirectTo(url);
    }

    function validateReservationSearchData() {
        var arrivalFrom = $('#ArrivalFrom').val();
        var arrivalTo = $('#ArrivalTo').val();

        var errorMessage = "";
        var blnValid = true;

        if (!IsNullOrEmpty(arrivalFrom) && !IsNullOrEmpty(arrivalTo)) {
            var objArrivalFrom = GetDateObject(arrivalFrom, DateSeprator.SLASH);
            var objArrivalTo = GetDateObject(arrivalTo, DateSeprator.SLASH);

            if (objArrivalFrom > objArrivalTo) {
                errorMessage += "Arrival from date must be less than arrival to." + Delimeter.BREAKLINE;
                blnValid = false;
            }
        }

        if (!blnValid) {
            showToaster(errorMessage, ToasterType.ERROR);
            return false;
        }
        return blnValid;
    }

    function searchReservation() {
        if (validateReservationSearchData()) {
            IsSearchButtonClicked = true;
            currentPage = 1;
            ReloadReservationGrid();
        }
    }

    function clearReservation() {
        $('#LastName').val('');
        $('#FirstName').val('');
        $('#CVVNo').val('');
        $('#TARecordLocator').val('');
        $('#CompanyId').val('');
        $('#GroupId').val('');
        $('#BlockCodeId').val('');
        $('#SourceId').val('');
        $('#AgentId').val('');
        $('#ContactId').val('');
        $('#MemberTypeId').val('');
        $('#MemberNo').val('');
        $('#ArrivalFrom').val('');
        $('#ArrivalTo').val('');
        $('#IsShowCancelledReservation').prop("checked", false);
        $('#IsShowCheckedInReservation').prop("checked", false);
        $('#IsShowCheckedOutReservation').prop("checked", false);

        searchReservation();
    }

    function cancelReservation(item, e, id) {
        $('#hdnReservationId').val('');

        swal({
            title: 'Are you sure?',
            text: " Cancel Reservation!",
            type: 'warning',
            showCancelButton: true,
            showCloseButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes'
        }).then((result) => {
            if (result.value) {
                $('#hdnReservationId').val(id);
                openCancellationReasonSearchModal();
                $('form#frmAdvanceCancellationReasonSearch #Reason').val('');
                $('form#frmAdvanceCancellationReasonSearch #btnSearch').click();
            }
        })
    }

    function deleteReservation(item, e, id) {

        swal({
            title: 'Are you sure you want to delete?',
            type: 'warning',
            showCancelButton: true,
            showCloseButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes'
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    beforeSend: function (xhr) {
                        showLoader();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        ShowErrorMessage(jqXHR.status, errorThrown);
                    },
                    complete: function () {
                        hideLoader();
                    },
                    url: '@Url.Content("~/Reservation/Delete")',
                    type: 'POST',
                    data: { id: id },
                    success: function (response) {
                        if (response.IsSuccess == true) {

                            var tr = $('#tblReservation  tbody tr#' + id)
                            var row = grdReservation.row(tr);
                            var rowNode = row.node();
                            row.remove();
                            grdReservation.draw();

                            showToaster("Record deleted successfully", ToasterType.SUCCESS);
                        }
                        else {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                    }
                });
            }
        });
    }

    function DeleteAllReservation() {

        swal({
            title: 'Are you sure you want to delete all reservations ?',
            type: 'warning',
            showCancelButton: true,
            showCloseButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes'
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    beforeSend: function (xhr) {
                        showLoader();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        ShowErrorMessage(jqXHR.status, errorThrown);
                    },
                    complete: function () {
                        hideLoader();
                    },
                    url: '@Url.Content("~/Reservation/DeleteAll")',
                    type: 'POST',
                    success: function (response) {
                        if (response.IsSuccess == true) {

                            showToaster("All records deleted successfully.", ToasterType.SUCCESS);

                            searchReservation();
                        }
                        else {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                    }
                });
            }
        });
    }

    function OpenEmailForm(id, email) {
        $("form#frmEmail #Email").val(email)
        $("form#frmEmail #hdnReservationId").val(id);

        OpenModal('emailFormModal');
    }
</script>



@section scripts {
    <script src="~/Scripts/AdminLTE/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/AdminLTE/dataTables.bootstrap.min.js"></script>
}