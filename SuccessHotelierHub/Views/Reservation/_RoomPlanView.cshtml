@using SuccessHotelierHub.Models;
@using SuccessHotelierHub.Repository;
@{
    ReservationRepository reservationRepository = new ReservationRepository();

    var roomDetail = (List<RoomPlanRoomVM>)ViewBag.RoomDetail;

    var dates = (List<RoomPlanDateRangeVM>)ViewBag.Dates;

    var firstHeaderRowHtml = "";
    var secondHeaderRowHtml = "";

    var startDate = "";
    var endDate = "";

    if (dates != null)
    {
        firstHeaderRowHtml += "<th style='width: 30%;'>";

        secondHeaderRowHtml += "<th class='text-center' width='10%'>Room#</th>";
        secondHeaderRowHtml += "<th class='text-center' width='10%'>Room Status</th>";
        secondHeaderRowHtml += "<th class='text-center' width='10%'>Room Type</th>";

        startDate = dates[0].Date.Value.ToString("MM/dd/yyyy");
        endDate = dates[dates.Count - 1].Date.Value.ToString("MM/dd/yyyy");

        foreach (var date in dates)
        {
            if (date.Date.HasValue && (date.Date.Value.DayOfWeek == DayOfWeek.Friday || date.Date.Value.DayOfWeek == DayOfWeek.Saturday))
            {
                firstHeaderRowHtml += string.Format("<th width='10%' class='text-weekend-bgcolor text-center'>{0}</th>", date.DayOfTheWeek);
            }
            else
            {
                firstHeaderRowHtml += string.Format("<th width='10%' class='text-center'>{0}</th>", date.DayOfTheWeek);
            }
            secondHeaderRowHtml += string.Format("<th width='10%' class='text-center' data-date='{1}'>{0}</th>", date.DateString, date.Date);
        }

        firstHeaderRowHtml += "</th>";
        secondHeaderRowHtml += "</th>";
    }
}

<style type="text/css">
    .tableContainer table {
        width: 100%;
        border-collapse: collapse;
        border-spacing: 0;
        border: 2px solid black;
        overflow: auto;
    }

    .tableContainer thead, tr, th, tbody {
        box-sizing: border-box;
        display: block;
    }

    .fixedHeader tr th {
        height: 35px !important;
    }

    .scrollContent tr td {
        min-height: 35px !important;
    }

    .tableContainer tr:after {
        content: ' ';
        display: block;
        visibility: hidden;
        clear: both;
    }

    .tableContainer thead th {
        height: 30px;
        line-height: 30px;
    }


    .tableContainer tbody {
        height: 500px !important;
        overflow-y: auto;
        width: 100%;
        overflow-x: hidden;
    }

    /*any os other than mac*/
    .tableContainer thead {
        width: 100%;
        padding-right: 17px;
    }
    /*if mac os*/
    .tableContainer body.MacOS thead {
        padding-right: 0;
    }

    .tableContainer tbody {
        border-top: 2px solid black;
    }

    .table-class thead.fixedHeader tr th, .table-class tbody.scrollContent td {
        /*width: 10%;*/
        float: left;
        /*border-right: 1px solid black;*/
        position: relative;
    }

    .table-class {
        margin: 0px;
        padding: 0px;
        margin-left: auto;
        margin-right: auto;
        width: 100%;
    }

        .table-class td {
            vertical-align: middle;
            border: 1px solid #4c7299;
            border-width: 0px 1px 1px 0px;
            text-align: left;
            padding: 7px;
            font-size: 10px;
            font-family: Arial;
            font-weight: normal;
            color: #000;
        }


    .tableContainer tbody td:last-child, thead th:last-child {
        border-right: none;
    }

    .width-100 {
        width: 100%;
    }

    .assigned {
        background: #fafafa;
        color: #444;
    }

    .table-condensed > tbody > tr > td, .table-condensed > tbody > tr > th, .table-condensed > tfoot > tr > td, .table-condensed > tfoot > tr > th, .table-condensed > thead > tr > td, .table-condensed > thead > tr > th {
        padding: 5px;
    }

    .datepicker-days tfoot {
        display: none;
    }

    .datepicker-days td, th {
        display: table-cell;
        vertical-align: inherit;
    }

    .datepicker-days {
        height: auto !important;
    }

    .table-condensed > tbody > tr > td, .table-condensed > tbody > tr > th {
        width: 26px;
    }

    .border-radius-none {
        border-radius: 0;
    }

    .border-none {
        border-left: none !important;
        border-right: none !important;
    }

    .border-bottom-none {
        border-bottom: none;
    }

    .arrow-right-green {
        color: #00a65a;
        font-size: 16px;
    }

    .arrow-right-blue-sky {
        color: #1AAFFE;
        font-size: 16px;
    }

    th.text-center {
        padding: 8px 2px !important;
    }

    .bg-sky {
        background-color: #1AAFFE;
    }

    .text-sky {
        color: #1AAFFE;
    }
</style>




@if (roomDetail != null && roomDetail.Count > 0)
{

    <div class="col-xs-12 padding-zero m-t">
        <div class="form-group">
            <span>
                <i class="fa fa-square text-green"></i> Checked In
            </span>
            <span class="m-l-md">
                <i class="fa fa-square text-sky"></i> Pending Check In
            </span>
        </div>
    </div>

    //tbl_max_height
    <div class="col-xs-12 padding-zero m-t">
        <div class="table-responsive tableContainer">
            <table class="table-class table table-bordered scrollTable mb_5 tblRoomPlan" id="tblRoomPlan">
                <thead class="fixedHeader">
                    <tr>
                        @Html.Raw(firstHeaderRowHtml)
                    </tr>
                    <tr>
                        @Html.Raw(secondHeaderRowHtml)
                    </tr>
                </thead>
                <tbody class="scrollContent">
                    @foreach (var room in roomDetail)
                    {
                        var statusBGColor = "#fff";
                        if (!string.IsNullOrWhiteSpace(room.RoomStatusColor))
                        {
                            statusBGColor = room.RoomStatusColor;
                        }

                        var reservationDetail = reservationRepository.GetReservationDetailsForRoomPlan(room.Id, startDate, endDate, LogInManager.LoggedInUserId);
                        var AllocationDetail = reservationRepository.GetRoomAllocationDetailsForRoomPlan(room.Id, startDate, endDate, LogInManager.LoggedInUserId);

                        <tr data-roomid="@(room.Id)" data-roomtypeid="@(room.RoomTypeId)" data-roomtypecode="@(room.RoomTypeCode)" data-roomno="@(room.RoomNo)" data-tr-id="@("tr_" + room.Id)" id="@("tr_" + room.Id)">
                            <td width="10%" class="@("td_" + room.Id)">@room.RoomNo</td>
                            <td width="10%" class="tdRoomStatus @("td_" + room.Id)" style="background-color:@statusBGColor; color:#fff"
                                data-background-color="@statusBGColor" data-room-status="@room.RoomStatus">
                                @room.RoomStatus
                            </td>
                            <td width="10%" class="@("td_" + room.Id)">@room.RoomTypeCode</td>

                            @if (reservationDetail != null && reservationDetail.Count > 0)
                            {
                                List<Guid> allocatedReservationIds = new List<Guid>();
                                bool blnFirst = true;
                                for (int intI = 0; intI < dates.Count;)
                                {
                                    var currentDateIterator = dates[intI].Date;

                                    var reservationInfo = reservationDetail.Where(i => (i.CheckInDate.Value.Date <= dates[intI].Date.Value.Date) && (i.CheckOutDate.Value.Date >= dates[intI].Date.Value.Date)).FirstOrDefault();
                                    if (reservationInfo != null)
                                    {
                                        string noOfPerson = "";
                                        noOfPerson = reservationInfo.NoOfChildren > 0 ? string.Format("{0}/{1}", reservationInfo.NoOfAdult, reservationInfo.NoOfChildren) : string.Format("{0}", reservationInfo.NoOfAdult);

                                        if (reservationInfo.CheckOutDateString == dates[intI].DateString)
                                        {
                                            blnFirst = false;
                                        }

                                        if (blnFirst)
                                        {
                                            blnFirst = false;

                                            var spanBoxWidth = 10;
                                            if (reservationInfo.CheckOutDate.Value.Date <= dates[dates.Count - 1].Date.Value)
                                            {
                                                if (reservationInfo.DaysInWeek == 1)
                                                {
                                                    spanBoxWidth = reservationInfo.DaysInWeek * 10;
                                                }
                                                else
                                                {
                                                    spanBoxWidth = (reservationInfo.DaysInWeek - 1) * 10;
                                                }
                                            }
                                            else
                                            {
                                                spanBoxWidth = reservationInfo.DaysInWeek * 10;
                                            }

                                            <td class="text-center cursor-move assigned" style="padding:5px; width:@(spanBoxWidth)%;">
                                                <span style="margin-right:-1px !important; text-align:center!important;font-size:10px;"
                                                      class="btn btn-xs m-r-xs p-l-xs bg-green  text-left-align  width-100 item first spnReservation"
                                                      id="@("spnReservation_" + reservationInfo.ReservationId)"
                                                      data-reservationid="@(reservationInfo.ReservationId)"
                                                      ondblclick="GotoReservationEdit('@(reservationInfo.ReservationId)')"
                                                      title="Double click here to view reservation detail.">
                                                    @(string.Format("{0} {1} ({2})", reservationInfo.LastName, reservationInfo.FirstName, noOfPerson))
                                                </span>
                                            </td>
                                        }
                                        else
                                        {
                                            if (reservationInfo.CheckOutDateString == dates[intI].DateString)
                                            {
                                                <td class="cursor-move assigned padding-zero border-none" style="width:10%;padding:7px 0px !important;">
                                                    <span class="btn btn-xs padding-zero fa fa-caret-right arrow-right-green"
                                                          id="@("spnReservation_" + reservationInfo.ReservationId)"
                                                          data-reservationid="@(reservationInfo.ReservationId)"
                                                          ondblclick="GotoReservationEdit('@(reservationInfo.ReservationId)')"
                                                          title="Double click here to view reservation detail.">
                                                    </span>
                                                </td>
                                                blnFirst = true;
                                            }
                                        }
                                        intI = intI + 1;
                                    }
                                    else
                                    {
                                        blnFirst = true;
                                        if (AllocationDetail != null && AllocationDetail.Count > 0)
                                        {
                                            bool isTDAllocated = false;

                                            var minArrivalDate = AllocationDetail.Min(m => m.ArrivalDate);
                                            var maxDepartureDate = AllocationDetail.Max(m => m.DepartureDate);

                                            var startDateObj = dates[0].Date.Value;
                                            var endDateObj = dates[dates.Count - 1].Date.Value;

                                            var minArrivalDate_V2 = minArrivalDate;
                                            var maxDepartureDate_V2 = maxDepartureDate;

                                            if (minArrivalDate_V2.Value < startDateObj)
                                            {
                                                minArrivalDate_V2 = startDateObj;
                                            }

                                            if (maxDepartureDate_V2.Value > endDateObj)
                                            {
                                                maxDepartureDate_V2 = endDateObj;
                                            }

                                            var maxDays = 0;
                                            maxDays = (int)((maxDepartureDate_V2.Value - minArrivalDate_V2.Value).TotalDays + 1);

                                            var spanBoxWidth = 25;
                                            if (maxDays > 0)
                                            {
                                                double result = 0;
                                                result = Convert.ToDouble(((double)100 / (double)maxDays));
                                                spanBoxWidth = (int)Math.Round(result, 0);
                                            }

                                            var allocationInfo = AllocationDetail.Where(i => (i.ArrivalDate.Value.Date <= dates[intI].Date.Value.Date) && (i.DepartureDate.Value.Date >= dates[intI].Date.Value.Date) && (!allocatedReservationIds.Contains(i.ReservationId))).ToList();

                                            if (allocationInfo != null && allocationInfo.Count > 0)
                                            {
                                                if (minArrivalDate.Value.Date <= dates[intI].Date.Value.Date && maxDepartureDate.Value.Date >= dates[intI].Date.Value.Date)
                                                {
                                                    if (!isTDAllocated)
                                                    {
                                                        var tdHtml = string.Format("<td class='text-center cursor-move assigned {0}' style='padding: 5px; width:{1}%;' height='{2} px!important;'>",
                                                                               ("td_" + room.Id), (maxDays * 10), (AllocationDetail.Count * 35));
                                                        @Html.Raw(tdHtml)
                                                        isTDAllocated = true;
                                                    }
                                                }
                                                else
                                                {
                                                    <td width='10%' class="drop @("td_" + room.Id)" data-date="@(currentDateIterator)"></td>
                                                }

                                                if (blnFirst)
                                                {
                                                    foreach (var reservation in allocationInfo)
                                                    {

                                                        if (dates[intI].DateString == reservation.ArrivalDateString || reservation.DepartureDate.Value <= dates[dates.Count - 1].Date.Value)
                                                        {
                                                            allocatedReservationIds.Add(reservation.ReservationId);

                                                            blnFirst = true;
                                                            string noOfPerson = "";
                                                            noOfPerson = reservation.NoOfChildren > 0 ? string.Format("{0}/{1}", reservation.NoOfAdult, reservation.NoOfChildren) : string.Format("{0}", reservation.NoOfAdult);

                                                            var reservationDays = (reservation.DaysInWeek - 1);
                                                            var checkoutDateExist = dates.Where(i => i.DateString == reservation.DepartureDateString).FirstOrDefault();

                                                            if (checkoutDateExist == null)
                                                            {
                                                                reservationDays = reservation.DaysInWeek;
                                                            }

                                                            if (reservationDays == 0) { reservationDays = 1; }

                                                            if (dates[intI].DateString != reservation.DepartureDateString)
                                                            {
                                                                var dateDiff = (dates[intI].Date.Value - minArrivalDate_V2.Value).TotalDays;
                                                                if (dateDiff > 0)
                                                                {
                                                                    <span style="margin-left:@((dateDiff) * spanBoxWidth)%;"></span>
                                                                }

                                                                <span style="margin-right:-1px !important; text-align:center!important;font-size:10px; width:@((reservationDays) * spanBoxWidth)%;"
                                                                      class="btn btn-xs m-t-xs m-r-xs p-l-xs bg-sky text-left-align  width-100 item first spnReservation"
                                                                      id="@("spnReservation_" + reservation.ReservationId)"
                                                                      data-reservationid="@(reservation.ReservationId)"
                                                                      ondblclick="GotoReservationEdit('@(reservation.ReservationId)')"
                                                                      title="Double click here to view reservation detail.">
                                                                    @(string.Format("{0} {1} ({2})", reservation.LastName, reservation.FirstName, noOfPerson))
                                                                </span>
                                                            }

                                                            if (checkoutDateExist != null)
                                                            {
                                                                <span class="btn btn-xs m-t-xs padding-zero fa fa-caret-right arrow-right-blue-sky"
                                                                      id="@("spnReservation_" + reservation.ReservationId)"
                                                                      data-reservationid="@(reservation.ReservationId)"
                                                                      ondblclick="GotoReservationEdit('@(reservation.ReservationId)')"
                                                                      title="Double click here to view reservation detail.">
                                                                </span>
                                                                <br />
                                                            }
                                                        }
                                                    }

                                                    @*var dateDiff = (dates[intI].Date.Value - minArrivalDate_V2.Value).TotalDays;
                                                    //if(dateDiff == 0) { dateDiff = 1; }
                                                    <span style="margin-left:@((dateDiff + 1) * spanBoxWidth)%;"></span>*@
                                                }
                                                else
                                                {
                                                    <td width='10%' class="@("td_" + room.Id)" height="@(allocationInfo.Count * 35)px!important"></td>
                                                }

                                                if (isTDAllocated)
                                                {
                                                    @Html.Raw("</td>")
                                                }

                                                intI = intI + maxDays;
                                            }
                                            else
                                            {
                                                intI++;
                                                blnFirst = true;
                                                <td class="drop" width="10%" data-date="@(currentDateIterator)"></td>
                                            }
                                        }
                                        else
                                        {
                                            intI++;
                                            blnFirst = true;
                                            <td class="drop" width="10%" data-date="@(currentDateIterator)"></td>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (AllocationDetail != null && AllocationDetail.Count > 0)
                                {
                                    bool allocateFirst = false;
                                    bool isTDAllocated = false;

                                    var minArrivalDate = AllocationDetail.Min(m => m.ArrivalDate);
                                    var maxDepartureDate = AllocationDetail.Max(m => m.DepartureDate);

                                    var startDateObj = dates[0].Date.Value;
                                    var endDateObj = dates[dates.Count - 1].Date.Value;

                                    var minArrivalDate_V2 = minArrivalDate;
                                    var maxDepartureDate_V2 = maxDepartureDate;

                                    if (minArrivalDate_V2.Value < startDateObj)
                                    {
                                        minArrivalDate_V2 = startDateObj;
                                    }

                                    if (maxDepartureDate_V2.Value > endDateObj)
                                    {
                                        maxDepartureDate_V2 = endDateObj;
                                    }

                                    var maxDays = 0;
                                    maxDays = (int)((maxDepartureDate_V2.Value - minArrivalDate_V2.Value).TotalDays + 1);

                                    var spanBoxWidth = 25;
                                    List<Guid> allocatedReservationIds = new List<Guid>();
                                    if (maxDays > 0)
                                    {
                                        double result = 0;
                                        result = Convert.ToDouble(((double)100 / (double)maxDays));
                                        spanBoxWidth = (int)Math.Round(result, 0);
                                    }

                                    for (int intK = 0; intK < dates.Count;)
                                    {
                                        var currentDateIterator = dates[intK].Date;
                                        allocateFirst = false;
                                        var allocationInfo = AllocationDetail.Where(i => (i.ArrivalDate.Value.Date <= dates[intK].Date.Value.Date) && (i.DepartureDate.Value.Date >= dates[intK].Date.Value.Date) && (!allocatedReservationIds.Contains(i.ReservationId))).ToList();

                                        if (minArrivalDate.Value.Date <= dates[intK].Date.Value.Date && maxDepartureDate.Value.Date >= dates[intK].Date.Value.Date)
                                        {
                                            if (!isTDAllocated)
                                            {
                                                var tdHtml = string.Format("<td class='text-center cursor-move assigned {0}' style='padding: 5px; width:{1}%;' height='{2} px!important;'>",
                                                                       ("td_" + room.Id), (maxDays * 10), (AllocationDetail.Count * 35));
                                                @Html.Raw(tdHtml)
                                                isTDAllocated = true;
                                            }
                                        }
                                        else
                                        {
                                            <td width='10%' class="drop @("td_" + room.Id)" data-date="@(currentDateIterator)"></td>
                                        }



                                        if (!allocateFirst)
                                        {
                                            if (allocationInfo != null && allocationInfo.Count > 0)
                                            {
                                                foreach (var reservation in allocationInfo)
                                                {

                                                    if (dates[intK].DateString == reservation.ArrivalDateString || reservation.DepartureDate.Value <= dates[dates.Count - 1].Date.Value)
                                                    {
                                                        allocatedReservationIds.Add(reservation.ReservationId);

                                                        allocateFirst = true;
                                                        string noOfPerson = "";
                                                        noOfPerson = reservation.NoOfChildren > 0 ? string.Format("{0}/{1}", reservation.NoOfAdult, reservation.NoOfChildren) : string.Format("{0}", reservation.NoOfAdult);

                                                        var reservationDays = (reservation.DaysInWeek - 1);
                                                        var checkoutDateExist = dates.Where(i => i.DateString == reservation.DepartureDateString).FirstOrDefault();

                                                        if (checkoutDateExist == null)
                                                        {
                                                            reservationDays = reservation.DaysInWeek;
                                                        }

                                                        if (reservationDays == 0) { reservationDays = 1; }

                                                        if (dates[intK].DateString != reservation.DepartureDateString)
                                                        {
                                                            var dateDiff = (dates[intK].Date.Value - minArrivalDate_V2.Value).TotalDays;
                                                            if (dateDiff > 0)
                                                            {
                                                                <span style="margin-left:@((dateDiff) * spanBoxWidth)%;"></span>
                                                            }

                                                            <span style="margin-right:-1px !important; text-align:center!important;font-size:10px; width:@((reservationDays) * spanBoxWidth)%;"
                                                                  class="btn btn-xs m-t-xs m-r-xs p-l-xs bg-sky text-left-align  width-100 item first spnReservation"
                                                                  id="@("spnReservation_" + reservation.ReservationId)"
                                                                  data-reservationid="@(reservation.ReservationId)"
                                                                  ondblclick="GotoReservationEdit('@(reservation.ReservationId)')"
                                                                  title="Double click here to view reservation detail.">
                                                                @(string.Format("{0} {1} ({2})", reservation.LastName, reservation.FirstName, noOfPerson))
                                                            </span>
                                                        }

                                                        if (checkoutDateExist != null)
                                                        {
                                                            <span class="btn btn-xs m-t-xs padding-zero fa fa-caret-right arrow-right-blue-sky"
                                                                  id="@("spnReservation_" + reservation.ReservationId)"
                                                                  data-reservationid="@(reservation.ReservationId)"
                                                                  ondblclick="GotoReservationEdit('@(reservation.ReservationId)')"
                                                                  title="Double click here to view reservation detail.">
                                                            </span>
                                                            <br />
                                                        }
                                                    }
                                                }

                                                @*var dateDiff = (dates[intK].Date.Value - minArrivalDate_V2.Value).TotalDays;
                                                //if (dateDiff == 0) { dateDiff = 1; }
                                                <span style="margin-left:@((dateDiff + 1) * spanBoxWidth)%;"></span>*@
                                            }
                                        }

                                        if (dates[intK].Date.Value.Date == maxDepartureDate.Value.Date)
                                        {
                                            if (isTDAllocated)
                                            {
                                                @Html.Raw("</td>")
                                            }
                                        }

                                        intK = intK + 1;
                                    }
                                }
                                else
                                {
                                    <td class="drop" width="10%"></td>
                                    <td class="drop" width="10%"></td>
                                    <td class="drop" width="10%"></td>
                                    <td class="drop" width="10%"></td>
                                    <td class="drop" width="10%"></td>
                                    <td class="drop" width="10%"></td>
                                    <td class="drop" width="10%"></td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="col-xs-12 padding-zero">
        <div class="col-sm-3 padding_left">
            @*<p class="mb_5 mt_5"><a herf="#">[Day]Fowler, Veronica</a></p>*@
        </div>
        <div class="col-sm-9 padding-zero">
            <div class="pull-left">
                <a href="javascript:void(0);" onclick="searchRoomPlan('@ViewBag.FirstDate')" title="First"><i class="fa fa-angle-double-left next_prev_btn" aria-hidden="true"></i></a>
                <a href="javascript:void(0);" onclick="searchRoomPlan('@ViewBag.PrevDate')" title="Prev"><i class="fa fa-angle-left next_prev_btn" aria-hidden="true"></i></a>
                @*<a href="#" class="lbl_bg">Dep/Cxl Rule</a>*@
            </div>
            <div class="pull-right">
                <a href="javascript:void(0);" onclick="searchRoomPlan('@ViewBag.NextDate')" title="Next"><i class="fa fa-angle-right next_prev_btn" aria-hidden="true"></i></a>
                <a href="javascript:void(0);" onclick="searchRoomPlan('@ViewBag.LastDate')" title="Last"><i class="fa fa-angle-double-right next_prev_btn" aria-hidden="true"></i></a>
            </div>
        </div>
    </div>
}
else
{
    <div class="col-xs-12 padding-zero m-t text-center">
        <h5>No data available.</h5>
    </div>
}

<script type="text/javascript">

    var AllocatedRoom = @Html.Raw(ViewBag.AllocationFullDetail);
    $(document).ready(function () {
        if (AllocatedRoom != null) {
            $(AllocatedRoom).each(function(){
                var max = 0;
                $('.td_' + this).each(function () {
                    max = Math.max($(this).height(), max);
                }).height(max);
            })
        }
    })

    $(function () {
        $('.tblRoomPlan td span.item').draggable({
            revert: true,
            proxy: 'clone'
        });

        $('.tblRoomPlan td.drop').droppable({
            onDragEnter: function () {
                $(this).addClass('over');
            },
            onDragLeave: function () {
                $(this).removeClass('over');
            },
            onDrop: function (e, source) {
                $(this).removeClass('over');
                
                //Get current row <tr>.
                var $row = $(this).closest("td").closest("tr");
                var $sourceRow = $(source).closest("td").closest("tr");

                //Get date of dropped td element by index (NOTE : find('thead tr').eq(1) => select second header from the table.

                var date = "";
                date = $(this).closest("td").attr("data-date");

                if(IsNullOrEmpty(date)){
                    var $th = $(this).closest('table').find('thead tr').eq(1).find('th').eq($(this).index());

                    date = $($th).attr("data-date");
                }
                

                var currentDraggableElement = $(source);

                if ($(source).hasClass('assigned')) {
                    $(this).append(source);
                } else {
                    var c = $(source).clone().addClass('assigned');
                    $(this).empty().append(c);
                    $(this).closest("td").addClass("assigned");
                    //$(this).closest("td").removeClass("drop");

                    c.draggable(
                        {
                            revert: true
                        });

                    $(source).closest("td").addClass("drop1");
                    //$(source).closest("td").removeClass("assigned");
                    bindDroppableEventToAssignedReservation();

                    $(source).remove();

                }

                if ($row) {
                    var reservationId = $(currentDraggableElement).attr("data-reservationid");
                    var roomId = $row.attr("data-roomid");
                    var roomTypeId = $row.attr("data-roomtypeid");
                    var trIdToScroll = $row.attr("data-tr-id");

                    $('#hdnRoomTableRowIdToScroll').val(trIdToScroll);
                    
                    ChangeRoomAndReservationMapping(reservationId, roomId, roomTypeId, date, $sourceRow, $row);
                }

            }
        });

    });

    function bindDroppableEventToAssignedReservation() {
        $('.tblRoomPlan td.drop1').droppable({
            accept: '.assigned',
            onDragEnter: function (e, source) {
                $(source).addClass('trash');
            },
            onDragLeave: function (e, source) {
                $(source).removeClass('trash');
            },
            onDrop: function (e, source) {
                $(this).removeClass('over');
                
                //Get current row <tr>.
                var $row = $(this).closest("td").closest("tr");
                var $sourceRow = $(source).closest("td").closest("tr");

                //Get date of dropped td element by index (NOTE : find('thead tr').eq(1) => select second header from the table.
                var date = "";
                date = $(this).closest("td").attr("data-date");

                if(IsNullOrEmpty(date)){
                    var $th = $(this).closest('table').find('thead tr').eq(1).find('th').eq($(this).index());

                    date = $($th).attr("data-date");
                }

                var currentDraggableElement = $(source);

                if ($(source).hasClass('assigned')) {
                    $(this).append(source);
                } else {
                    var c = $(source).clone().addClass('assigned');
                    $(this).empty().append(c);
                    $(this).closest("td").addClass("assigned");
                    //$(this).closest("td").removeClass("drop");

                    c.draggable({
                        revert: true
                    });

                    $(source).closest("td").addClass("drop1");
                    //$(source).closest("td").removeClass("assigned");
                    bindDroppableEventToAssignedReservation();

                    $(source).remove();
                }

                if ($row) {
                    var reservationId = $(currentDraggableElement).attr("data-reservationid");
                    var roomId = $row.attr("data-roomid");
                    var roomTypeId = $row.attr("data-roomtypeid");
                    var trIdToScroll = $row.attr("data-tr-id");

                    $('#hdnRoomTableRowIdToScroll').val(trIdToScroll);
                    
                    ChangeRoomAndReservationMapping(reservationId, roomId, roomTypeId, date, $sourceRow, $row);
                }
            }
        });
    }

    function ChangeRoomAndReservationMapping(reservationId, roomId, roomTypeId, date, sourceRow, destinationRow) {

        if (!IsNullOrEmpty(reservationId) && !IsNullOrEmpty(roomId) && !IsNullOrEmpty(roomTypeId)) {
            
            //Ajax request to change room mapping.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Room/ChangeRoomAndReservationMapping")',
                type: 'POST',
                data: { reservationId: reservationId, roomId: roomId, roomTypeId: roomTypeId, date: date },
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    }
                    else {
                        showToaster('Room allocation changed successfully.', ToasterType.SUCCESS);
                        //
                        //if (!IsNullOrEmpty(sourceRow) && !IsNullOrEmpty(destinationRow)) {
                        //    var sourceRowTDStatus = $(sourceRow).find("td.tdRoomStatus");
                        //    var destinationRowTDStatus = $(destinationRow).find("td.tdRoomStatus");

                        //    var sourceRowRoomStatusColor = "", destinationRowRoomStatusColor = "";
                        //    var sourceRowRoomStatus = "", destinationRowRoomStatus = "";

                        //    sourceRowRoomStatusColor = $(sourceRowTDStatus).attr("data-background-color");
                        //    destinationRowRoomStatusColor = $(destinationRowTDStatus).attr("data-background-color");

                        //    sourceRowRoomStatus = $(sourceRowTDStatus).attr("data-room-status");
                        //    destinationRowRoomStatus = $(destinationRowTDStatus).attr("data-room-status");

                        //    $(sourceRow).find("td.tdRoomStatus").css({ "background-color": destinationRowRoomStatusColor }).html(destinationRowRoomStatus);
                        //    $(destinationRow).find("td.tdRoomStatus").css({ "background-color": sourceRowRoomStatusColor }).html(sourceRowRoomStatus);
                        //}

                        searchRoomPlan($('#StartDate').val());
                    }
                }
            });
        }
    }

    function GotoReservationEdit(Id) {
        var url = '@Url.Content("~/Reservation/Edit/")' + Id + "?source=RoomPlan";
        redirectTo(url);
    }
</script>
