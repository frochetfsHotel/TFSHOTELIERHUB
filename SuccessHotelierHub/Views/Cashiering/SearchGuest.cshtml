@model SuccessHotelierHub.Models.SearchGuestParametersVM
@using SuccessHotelierHub.Models
@{
    ViewBag.Title = "Search Guest";
}

@section styles{
    <!-- DataTables -->
    <link rel="stylesheet" href="~/Content/css/AdminLTE/dataTables.bootstrap.min.css" type="text/css" />
}

@{
    var PagerName = "GuestGrid";

    var paymentMethodList = (List<PaymentMethodVM>)ViewBag.PaymentMethodList;
}

<section class="content-header">
    <h1>
        Search Guests <small>Search</small>
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Guests</li>
        <li class="active">Search</li>
    </ol>
</section>

<section class="content">
    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Search Guests</h3>
        </div>
        <!-- /.box-header -->
        <!-- form start -->
        <form class="frmReservationList" id="frmReservationList" enctype="multipart/form-data" method="post">
            <div class="box-body box-body-list">
                <div class="pt_10 pl_10 pr_10 searchBox_Border">
                    <div class="row">
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.RoomNo)
                            @Html.TextBoxFor(m => m.RoomNo, new { @class = "form-control", placeholder = "Room #" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.LastName)
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last Name" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.FirstName)
                            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.ConfirmationNo)
                            @Html.TextBoxFor(m => m.ConfirmationNo, new { @class = "form-control", placeholder = "Confirmation #" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.DepartureDate)
                            <div class="input-group date">
                                @Html.TextBoxFor(m => m.DepartureDate, new { @class = "form-control mydatepicker", placeholder = "dd/mm/yyyy" })
                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.CompanyId)
                            @Html.DropDownListFor(m => m.CompanyId,
                            new SelectList((IEnumerable<SelectListItem>
                                )ViewBag.CompanyList, "Value", "Text"),
                                "--Select Company--",
                                new { @class = "form-control" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.GroupId)
                            <select class="form-control" id="GroupId" name="GroupId">
                                <option value="">--Select Group--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F931">Group 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F934">Group 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-C95261B7F936">Group 3</option>
                            </select>
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 form-group">
                            @Html.LabelFor(m => m.BlockCodeId)
                            <select class="form-control" id="BlockCodeId" name="BlockCodeId">
                                <option value="">--Select Group Code--</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-D95261B8F944">Group Code 1</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-D95261B9F945">Group Code 2</option>
                                <option value="F15C97B6-4FC0-4AB7-A32D-G95261B0F937">Group Code 3</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <label class="container1" for="IsShowCheckedIn">
                                Checked In
                                @Html.CheckBoxFor(m => m.IsShowCheckedIn, new { @checked = "checked" })
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="col-md-3">
                            <label class="container1" for="IsShowDueOut">
                                Due Out
                                @Html.CheckBoxFor(m => m.IsShowDueOut)
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="col-md-3">
                            <label class="container1" for="IsShowCheckedOut">
                                Checked Out
                                @Html.CheckBoxFor(m => m.IsShowCheckedOut)
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="col-md-3 form-group text-right">
                            <button type="button" id="btnSearch" class="btn btn-success m-r-xs" onclick="searchGuest()">
                                Search
                            </button>
                            <button type="button" id="btnClear" class="btn btn-danger" onclick="clearGuest()">Clear</button>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>


                <div class="col-xs-12 padding-zero m-t" id="divReservationList">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover table-striped" id="tblReservation">
                            <thead>
                                <tr>
                                    <th>Room</th>
                                    <th>Last Name</th>
                                    <th>First Name</th>
                                    <th>Arrival</th>
                                    <th>Departure</th>
                                    <th>Balance</th>
                                    <th class="width_15">Status</th>
                                    <th>Company</th>
                                    <th>Group</th>
                                    <th class="width150">Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div class="clearfix"></div>
                    <div class="text-left">
                        @Html.Partial("_Pagination", new SuccessHotelierHub.Models.PaginationVM()
                   {
                       TokenForEnableDisableButtons = PagerName,
                       PageChangeMethod = "ReservationGridPageChange"
                   })
                    </div>
                </div>
            </div>
        </form>

    </div>
</section>



<!-- Billing Info Modal START -->
<div id="billingInfoModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">
                    Billing - [<span class="spnGuestName"></span> - <span class="spnRoomNumbers"></span>]
                    &nbsp; <span class="spnCheckedOutLabel text-blue" style="display:none;">Checked Out</span>
                    <a href="#" id="lnkPrint" class="btn btn-sm btn-warning m-r-md pull-right" style="display:none;" target="_blank">Print</a>
                </h4>
            </div>
            <div class="modal-body modal-body_padding" id="divBillingInfo">
                <form id="frmBillingInfo" name="frmBillingInfo" enctype="multipart/form-data">
                    <!-- HIDDEN FIELD-->
                    <input type="hidden" id="hdnReservationId" name="hdnReservationId" value="" />
                    <!-- HIDDEN FIELD-->
                    <div class="row">
                        <div class="col-md-3 form-group">
                            <label for="Balance">Balance (@Html.Raw(LogInManager.CurrencySymbol))</label>
                            <input type="text" id="Balance" name="Balance" class="form-control" readonly="readonly"
                                   value="" />
                        </div>
                        <div class="col-md-2  form-group">
                            <label for="ArrivalDate">Arrival</label>
                            <input type="text" id="ArrivalDate" name="ArrivalDate" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-3 form-group">
                            <label for="Company">Company</label>
                            <input type="text" id="Company" name="Company" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-2 form-group">
                            <label for="RateCode">Rate Code</label>
                            <input type="text" id="RateCode" name="RateCode" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-2 form-group">
                            <label for="NoOfRooms">Prs</label>
                            <input type="text" id="NoOfRooms" name="NoOfRooms" class="form-control" readonly="readonly"
                                   value="" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 form-group">
                            <label for="Status">Status</label>
                            <input type="text" id="Status" name="Status" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-2 form-group">
                            <label for="DepartureDate">Depart</label>
                            <input type="text" id="DepartureDate" name="DepartureDate" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-3 form-group">
                            <label for="Group">Group</label>
                            <input type="text" id="Group" name="Group" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-2">
                            <label for="RoomRent">Rate (@Html.Raw(LogInManager.CurrencySymbol))</label>
                            <input type="text" id="RoomRent" name="RoomRent" class="form-control" readonly="readonly" value="" />
                        </div>
                        <div class="col-md-2 form-group">
                            <label for="RoomTypeCode">Room Type</label>
                            <input type="text" id="RoomTypeCode" name="RoomTypeCode" class="form-control" readonly="readonly"
                                   value="" />
                        </div>
                    </div>
                    <div class="row m-t-md">
                        <div class="col-md-12">
                            <div class="col-md-6 padding-zero">
                                <h4><span class="spnGuestName"></span></h4>
                            </div>
                            <div class="col-md-6 text-right padding-zero">
                                <input type="hidden" id="hdnPaymentMethodId" name="hdnPaymentMethodId" />
                                <input type="hidden" id="hdnPaymentMethodCode" name="hdnPaymentMethodCode" />
                                <input type="hidden" id="hdnPaymentMethodName" name="hdnPaymentMethodName" />

                                <span class="spnPaymentMethodCode">VA</span>
                                <span class="spnTotalBalance"></span>
                                <button class="m-l-md btn btn-sm btn-info" type="button" id="btnAddCharge" onclick="openReservationChargeModal();">Post</button>
                            </div>
                            <hr />
                            <div class="clearfix"></div>
                        </div>
                        <div class="col-md-12">
                            <div class="table-responsive m-t-md table_maxheight" id="divReservationCharges">
                                <table class="table table-bordered table-hover table-striped cursor-P m-b-none">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Date</th>
                                            <th>Code</th>
                                            <th>Description</th>
                                            <th>Qty</th>
                                            <th>Amount</th>
                                            <th>Reference</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>


                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-left">
                                <input type="button" class="btn btn-sm btn-warning" id="btnInterimBill" onclick="OpenInterimBillModal();"
                                       value="Interim Bill" />
                            </div>
                            <div class="pull-right">
                                <input type="button" class="btn btn-sm btn-primary m-r-sm" id="btnBillingOk" data-dismiss="modal"
                                       value="OK" />
                                <input type="button" class="btn btn-sm btn-success" id="btnCheckOut" onclick="CheckOut();"
                                       value="Check Out" />
                            </div>
                        </div>
                    </div>
                </form>

            </div>
            <div class="clearfix"></div>
        </div>

    </div>
</div>
<!--  Billing Info  Modal END -->
<!-- Check Out Payment Method Modal START -->
<div id="checkOutPaymentModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Check Out - Payment Method</h4>
            </div>
            <div class="modal-body modal-body_padding" id="divCheckOutPaymentMethod">

            </div>
            <div class="clearfix"></div>
        </div>

    </div>
</div>
<!--  Check Out Payment Method Modal END -->
<!-- Reservation Charges Modal START -->
<div id="reservationChargeModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">
                    Add New Transaction Charge
                    <button type="button" id="btnAddNewTransactionRow" name="btnAddNewTransactionRow"
                            onclick="AddNewTransactionRow();"
                            class="btn btn-info btn-sm pull-right m-r-md">
                        Add New Transaction
                    </button>
                </h4>

            </div>
            <div class="modal-body modal-body_padding" id="divReservationChargeModal">
                @Html.Partial("~/Views/ReservationCharge/_PostReservationCharges.cshtml", new ViewDataDictionary { { "Source", "SearchGuest" } })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Reservation Charges Modal END -->
<!-- Additional Charges Modal START -->
<div id="additionalChargeModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Search Additional Charges</h4>
            </div>
            <div class="modal-body modal-body_padding" id="divAdditionalChargeModal">
                @Html.Partial("~/Views/AdditionalCharge/_AdvanceSearch.cshtml", new ViewDataDictionary { { "Source", "SearchGuest" }, { "AdditionalCharge", ViewBag.AdditionalChargeList }, })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Additional Charges Modal END -->
<!-- Email Form Modal START -->
<div id="emailFormModal" class="modal fade" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Send Email</h4>
            </div>
            <div class="modal-body modal-body_padding" id="divSendEmail">
                @Html.Partial("~/Views/Cashiering/_FolioEmail.cshtml")
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!--  Email Form Modal END -->
<!-- Split Payment modal START -->
<div id="SplitPaymentModal" class="modal" role="dialog">
    <div class="modal-dialog" style="width:60%">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Check Out - Split Payment Method</h4>
                <button type="button" onclick="AddNewSplitPayment();" class="btn btn-info btn-sm pull-right m-r-md">Add New Payment</button>
            </div>
            <div class="modal-body modal-body_padding" id="divSplitPaymentMethod">
                <div class="row">
                    @using (Html.BeginForm("SplitPayment", "ReservationCharge", FormMethod.Post, new { id = "frmSplitPayment", @class = "form", enctype = "multipart/form-data", novalidate = "novalidate" }))
                    {
                    <input type="hidden" value="test" id="hdnSaveReservationId" />
                    <input type="hidden" value="test" id="hdnCheckOutDate" />
                    <input type="hidden" id="hdnTotalAmount" name="hdnTotalAmount" value="" />
                    <input type="hidden" id="hdnTotalSplitPayment" name="hdnTotalSplitPayment" value="1" />
                    <div class="box-body pt_10 pb-0">
                        <div class="tbl_max_height">
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped" id="tblSplitPayment">
                                    <thead>
                                        <tr>
                                            <th class=""></th>
                                            <th class="">Method Of Payment</th>
                                            <th class="">Amount (@Html.Raw(LogInManager.CurrencySymbol))</th>
                                            <th class="">Credit Card #</th>
                                            <th class="width150">Expiration Date</th>
                                            <th class="width150">CVV #</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr data-rownumber="1">
                                            <td>
                                                @*<span class="text-red font_20 cursor-P" onclick="removeSplitPaymentRow(this);"><i class="fa fa-remove text"></i></span>*@
                                            </td>
                                            <td>
                                                <select class="form-control" id="SplitPaymentId_1" name="SplitPaymentId_1" onchange="SelectSplitPaymentMethod(1)">
                                                    <option value="">-- Select Payment Method--</option>
                                                </select>
                                            </td>
                                            <td>
                                                <input type="text" id="txtAmount_1" name="txtAmount_1" class="form-control" placeholder="Amount" onkeydown="return checkValueIsNumericOrNot(event)" onchange="calculatTotalAmount(this)" value="0.00" maxlength="12" />
                                            </td>
                                            <td>
                                                <input class="form-control HideWhenCashIsSelected_1" id="CreditCardNo_1" maxlength="16" name="CreditCardNo_1" onkeydown="onlyDigits(event)" placeholder="Credit Card #" type="text" value="">
                                            </td>
                                            <td>
                                                <input id="CardExpiryDate_1" name="CardExpiryDate_1" type="text" placeholder="MM/YY" class="masked form-control HideWhenCashIsSelected_1" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" />
                                            </td>
                                            <td>
                                                <input id="CardVerificationValue_1" name="CardVerificationValue_1" type="text" placeholder="CVV" class="masked form-control HideWhenCashIsSelected_1" onkeydown="onlyDigits(event)" maxlength="4" />
                                            </td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td></td>
                                            <td>Total Amount</td>
                                            <td> <label id="lblFinalAmount"></label>&nbsp;<label>-</label>&nbsp;  <label id="lblDiductAmount"></label>&nbsp; = &nbsp;<label id="lblpayableAmount"></label></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="box-footer text-right">
                        <button type="button" class="btn btn-success m-r-xs" onclick="return saveSplitPayment();">Ok</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                    </div>
                    }
                </div>
            </div>
            <div class="clearfix"></div>
        </div>

    </div>
</div>
<!-- Split Payment Modal End -->
<!-- Interim Bill Payment modal START -->
<div id="InterimBillPaymentModal" class="modal" role="dialog">
    <div class="modal-dialog modal-xl">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Interim Bill</h4>
            </div>
            <div class="modal-body modal-body_padding" id="divInterimBillPaymentMethod">
                @using (Html.BeginForm("InterimBill", "Cashiering", FormMethod.Post, new { id = "frmInterimBill", @class = "form", enctype = "multipart/form-data", novalidate = "novalidate" }))
                {
                    <!-- Hidden Field -->
                    <input type="hidden" value="" id="hdnReservationId" name="hdnReservationId" />
                    <input type="hidden" value="" id="hdnProfileId" name="hdnProfileId" />
                    <input type="hidden" value="" id="hdnRoomIds" name="hdnRoomIds" />
                    <input type="hidden" value="" id="hdnTotalAmount" name="hdnTotalAmount" />
                    <input type="hidden" id="hdnTotalInterimBillPayment" name="hdnTotalInterimBillPayment" value="1" />
                    <!-- Hidden Field -->

                    <div class="row">
                        <div class="col-md-4 form-group">
                            <label for="TotalAmount">Amount (@Html.Raw(LogInManager.CurrencySymbol))</label>
                            <input type="text" id="TotalAmount" name="TotalAmount" class="form-control" readonly="readonly"
                                   value="" />
                        </div>
                        <div class="col-md-4 form-group">
                            <label for="TotalPaidAmount">Paid Amount (@Html.Raw(LogInManager.CurrencySymbol))</label>
                            <input type="text" id="TotalPaidAmount" name="TotalPaidAmount" class="form-control" readonly="readonly"
                                   value="" />
                        </div>
                        <div class="col-md-4 form-group">
                            <label for="TotalPayableAmount">Payable Amount (@Html.Raw(LogInManager.CurrencySymbol))</label>
                            <input type="text" id="TotalPayableAmount" name="TotalPayableAmount" class="form-control" readonly="readonly"
                                   value="" />
                        </div>
                    </div>

                    <div class="row m-t-md">
                        <div class="col-md-12">
                            <div class="pull-left">
                                <a href="" id="lnkInterimBillPreview" target="_blank" class="btn btn-warning btn-sm m-r-xs" title="Preview Bill">Preview Bill</a>
                            </div>
                            <div class="pull-right">
                                <button type="button" onclick="AddNewInterimBillPayment();" class="btn btn-info btn-sm m-r-md">Add New Payment</button>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>

                    <div class="row m-t-md">
                        <div class="box-body pt_10 pb-0">
                            <div class="tbl_max_height">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-striped" id="tblInterimBillPayment">
                                        <thead>
                                            <tr>
                                                <th class=""></th>
                                                <th class="width_20">Method Of Payment</th>
                                                <th class="width_20">Amount (@Html.Raw(LogInManager.CurrencySymbol))</th>
                                                <th class="width_20">Credit Card #</th>
                                                <th class="width_20">Expiration Date</th>
                                                <th class="width_20">CVV #</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr data-rownumber="1">
                                                <td>
                                                    @*<span class="text-red font_20 cursor-P" onclick="removeInterimBillPaymentRow(this);"><i class="fa fa-remove text"></i></span>*@
                                                </td>
                                                <td>
                                                    <div class="row col-md-12">
                                                        <select class="form-control" id="PaymentMethodId_1" name="PaymentMethodId_1" onchange="SelectInterimBillPaymentMethod(1)">
                                                            <option value="">-- Select Payment Method--</option>
                                                        </select>                                                        
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="row col-md-12">
                                                        <input type="text" id="txtAmount_1" name="txtAmount_1" class="form-control" placeholder="Amount" onkeydown="return checkValueIsNumericOrNot(event)" onchange="calculateInterimBillPayableAmount()"
                                                               value="" maxlength="12" />                                                        
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="row col-md-12">
                                                        <input class="form-control HideWhenInterimBillPaymentMethodIsCash_1" id="CreditCardNo_1" maxlength="16" name="CreditCardNo_1" onkeydown="onlyDigits(event)" placeholder="Credit Card #"
                                                               type="text" value="" />
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="row col-md-12">
                                                        <input id="CardExpiryDate_1" name="CardExpiryDate_1" type="text" placeholder="MM/YY" class="masked form-control HideWhenInterimBillPaymentMethodIsCash_1"
                                                               pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" />                                                        
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="row col-md-12">
                                                        <input id="CVV_1" name="CVV_1" type="text" placeholder="CVV" class="masked form-control HideWhenInterimBillPaymentMethodIsCash_1"
                                                               onkeydown="onlyDigits(event)" maxlength="4" />
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td></td>
                                                <td>Total Amount</td>
                                                <td><label id="lblTotalAmount"></label></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="box-footer text-right">
                            <button type="button" id="btnPayInterimBill" class="btn btn-success m-r-xs" onclick="return PayInterimBillPayment();">Pay</button>
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                }
            </div>
            <div class="clearfix"></div>
        </div>

    </div>
</div>
<!-- Interim Bill Payment modal END -->


<script type="text/javascript">

    var currentPage = 1;
    var grdReservation;
    var IsSearchButtonClicked = false;
    var IsTransactionGridUpdated = false;

    var gblPaymentMethods = {};

    if ('@paymentMethodList' != null && '@paymentMethodList'.length > 0) {
        gblPaymentMethods = JSON.parse('@Html.Raw(Json.Encode(paymentMethodList))');
    }

    var IsValidOrNot = true;
    function checkValueIsNumericOrNot(e) {
        if ((e.key >= 0 && e.key <= 9) || (e.keyCode == 8) || (e.keyCode == 9) || (e.key == ".")) {
            return true
        }
        else {
            return false;
        }
    }


    function AddSplitPaymentValidationRule(rowNumber) {

        //First assign .validate() method in form at document.ready // $("form#frmSplitPayment").validate();

        setTimeout(function () {
            $('form#frmSplitPayment #SplitPaymentId_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please select payment method.'
                }
            });

            $('form#frmSplitPayment #txtAmount_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please enter amount.'
                }
            });

            $('form#frmSplitPayment #CreditCardNo_' + rowNumber).rules("add", {
                required: true,
                minlength: 16,
                messages: {
                    required: 'Please enter credit card no.',
                    minlength: 'Please enter 16 digits of your credit card'
                }
            });

            $('form#frmSplitPayment #CardExpiryDate_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please enter card expiry date.'
                }
            });

            $('form#frmSplitPayment #CardVerificationValue_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please enter CVV.'
                }
            });

        }, 0);
    }


    function RemoveSplitPaymentValidationRule(rowNumber) {
        setTimeout(function () {
            $('form#frmSplitPayment #SplitPaymentId_' + rowNumber).rules("remove");
            $('form#frmSplitPayment #txtAmount_' + rowNumber).rules("remove");
            $('form#frmSplitPayment #CreditCardNo_' + rowNumber).rules("remove");
            $('form#frmSplitPayment #CardExpiryDate_' + rowNumber).rules("remove");
            $('form#frmSplitPayment #CardVerificationValue_' + rowNumber).rules("remove");
        }, 0);
    }

    function saveSplitPayment() {
        AjaxRequestStart();
        IsValidOrNot = true;
        var listOfSplitPayment = [];
        var ReservationId = $('form#frmSplitPayment #hdnSaveReservationId').val();
        var CheckOutDate = $('form#frmSplitPayment #hdnCheckOutDate').val();

        var TotalAmountOfSplitPayment = 0;
        $("form#frmSplitPayment #tblSplitPayment tbody tr").each(function () {
            var rowNumber = $(this).attr("data-rownumber");
            if (!IsNullOrEmpty(rowNumber)) {
                rowNumber = parseInt(rowNumber);

                var paymentMethod = $('form#frmSplitPayment #SplitPaymentId_' + rowNumber + ' ' + 'option:selected');
                var isCreditCardPay = parseBoolean(paymentMethod.data("iscreditcardpay"));

                var amount = $('form#frmSplitPayment #txtAmount_' + rowNumber).val();

                var modelSplitPayment = {};
                modelSplitPayment.ReservationId = ReservationId;
                modelSplitPayment.CheckOutDate = CheckOutDate;
                modelSplitPayment.PaymentMethodId = $('form#frmSplitPayment #SplitPaymentId_' + rowNumber).val();
                modelSplitPayment.Amount = parseFloat(amount);
                modelSplitPayment.CreditCardNo = $('form#frmSplitPayment #CreditCardNo_' + rowNumber).val();
                modelSplitPayment.CardExpiryDate = $('form#frmSplitPayment #CardExpiryDate_' + rowNumber).val();
                modelSplitPayment.CVVNo = $('form#frmSplitPayment #CardVerificationValue_' + rowNumber).val();
                modelSplitPayment.PaymentMethod = paymentMethod.text();
                modelSplitPayment.IsCreditCardPay = isCreditCardPay;
                listOfSplitPayment.push(modelSplitPayment);

                TotalAmountOfSplitPayment = parseFloat(TotalAmountOfSplitPayment) + parseFloat(amount);
            }
        })


        if (listOfSplitPayment != null && listOfSplitPayment.length > 0) {
            var TotalPaybleAmount = $('form#frmSplitPayment #hdnTotalAmount').val();

            if (parseFloat(TotalAmountOfSplitPayment.toFixed(2)) != parseFloat(TotalPaybleAmount)) {
                showToaster("Total Amount and Payable amount must be same.", ToasterType.ERROR);
                AjaxRequestFinish();
                return false;
            }

            var blnValid = true;
            blnValid = $('#frmSplitPayment').valid();

            if (!blnValid) {
                AjaxRequestFinish();
                return false;
            }

            var formData = $('form#frmCheckOutPayment').serializeObject()
            $.ajax({
                url: '@Url.Content("~/Cashiering/AddSplitPayment")',
                type: 'POST',
                data: { Checkoutmodel: formData, model: listOfSplitPayment },
                success: function (result) {
                    AjaxRequestFinish();
                    if (result.IsSuccess) {
                        var url = '@Url.Content("~/Cashiering/Preview")' + '?Id=' + ReservationId;
                        swal({
                            title: '' + result.Name + ' checked out successfully.',
                            type: 'success',
                            html: "<a href='" + url + "' target='_blank'>Click here to see folio report.</a>",
                            showCloseButton: true,
                            showCancelButton: false,
                            focusConfirm: false,
                            confirmButtonText: 'OK',
                        }).then((result) => {
                            //Close all the modal.
                            $('.modal').modal('hide');
                        });
                        searchGuest();
                    }
                    else {
                        toastr.error("Something went wrong, please try after sometime")
                        AjaxRequestFinish();
                        return false;
                    }
                }
            })
        }
    }

    $(document).ready(function () {

        setTimeout(InitializeReservationGrid, 200);

        //Default Departure Date. (Set today's date).
        //$("#DepartureDate").datepicker("setDate", new Date());

        //Split Payment Form Validate.
        $("form#frmSplitPayment").validate();

        //Bind Payment Method Dropdown for Split Payment Popup.
        bindSplitPaymentMethodDropdown(1);

        //Interim Bill Form Validate.
        $("form#frmInterimBill").validate();

        //Bind Payment Method Dropdown for Interim Bill Popup.
        bindInterimBillPaymentMethodDropdown(1);

        //Additional Charge Search
        $('form#frmAdvanceAdditionalChargeSearch .btnAdvanceSearchAdditionalChargeOk').click(function (e) {
            var rowNumber = $('form#frmAdvanceAdditionalChargeSearch #hdnRowNumber').val();

            $('form#frmReservationCharge #Code_' + rowNumber).attr("readonly", false);
            var selectedCharge = $('input[name=rbAdditionalCharge]:checked', 'form#frmAdvanceAdditionalChargeSearch');

            if (!IsNullOrEmpty(selectedCharge.val())) {
                var id, code, description, amount;
                id = $(selectedCharge).val();
                code = $(selectedCharge).data('code');
                description = $(selectedCharge).data('description');
                amount = $(selectedCharge).data('price');

                //show Code, Description & Price.
                $('form#frmReservationCharge #AdditionalChargeId_' + rowNumber).val(id);
                $('form#frmReservationCharge #Code_' + rowNumber).val(code);
                $('form#frmReservationCharge #Description_' + rowNumber).val(description);
                $('form#frmReservationCharge #Amount_' + rowNumber).val(FormatNumberWithTwoDecimal(amount));

                //Close Modal
                CloseModal('additionalChargeModal');
            }
        });

        //Handle Billing Modal Popup Close Event
        $('#billingInfoModal').on('hidden.bs.modal', function () {
            if (IsTransactionGridUpdated) {
                //Reload Grid.
                searchGuest();
                IsTransactionGridUpdated = false;
            }
        })

    });


    function SearchReservationParameters(d) {
        var roomNo = $('form#frmReservationList #RoomNo').val();
        var lastName = $('form#frmReservationList #LastName').val();
        var firstName = $('form#frmReservationList #FirstName').val();
        var confirmationNo = $('form#frmReservationList #ConfirmationNo').val();
        var companyId = $('form#frmReservationList #CompanyId').val();
        var groupId = $('form#frmReservationList #GroupId').val();
        var blockCodeId = $('form#frmReservationList #BlockCodeId').val();
        var departureDate = $('form#frmReservationList #DepartureDate').val();
        var isShowCheckedOut = $('form#frmReservationList #IsShowCheckedOut').prop('checked');
        var isShowCheckedIn = $('form#frmReservationList #IsShowCheckedIn').prop('checked');
        var isShowDueOut = $('form#frmReservationList #IsShowDueOut').prop('checked');

        d.PageNum = currentPage;
        d.LastName = lastName;
        d.FirstName = firstName;
        d.RoomNo = roomNo;
        d.CompanyId = companyId;
        d.GroupId = groupId;
        d.BlockCodeId = blockCodeId;
        d.ConfirmationNo = confirmationNo;
        d.DepartureDate = departureDate;
        d.IsShowCheckedOut = isShowCheckedOut;
        d.IsShowCheckedIn = isShowCheckedIn;
        d.IsShowDueOut = isShowDueOut;
    }


    function ReservationGridDataBound(response) {
        if (response.IsSuccess == true) {

            @("PagerDataBound" + PagerName)(response.CurrentPage, response.PageSize, response.TotalRecords);

            if (IsSearchButtonClicked) {
                goToByScroll("divReservationList");
            }
            return response.data;
        }
        else {
            showToaster(response.ErrorMsg, ToasterType.ERROR);
        }
    }


    function ReloadReservationGrid() {
        if (!IsNullOrEmpty(grdReservation)) {
            grdReservation.ajax.url("@Url.Content("~/Cashiering/SearchGuest")").load();
        } else {
            InitializeReservationGrid();
        }
        $('#divReservationList').show();
    }

    function ReservationGridPageChange(cPage) {
        currentPage = cPage;
        ReloadReservationGrid();
    }


    function InitializeReservationGrid() {
        grdReservation = $('#tblReservation').DataTable({
            serverSide: true,
            ajax: {
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Cashiering/SearchGuest")',
                data: SearchReservationParameters,
                dataSrc: ReservationGridDataBound,
                type: "POST"
            },
            scrollCollapse: true,
            serverSide: true,
            processing: true,
            processing: "<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'>",
            ordering: true,
            bDestroy: true,
            paging: false,
            searching: false,
            bLengthChange: false,
            info: false,
            columnDefs: [
            {
                targets: 0,
                data: "RoomNumbers",
                orderable: false,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.RoomNumbers + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.RoomNumbers + '</a> ';
                    }
                    return html;

                }
            },
            {
                targets: 1,
                data: "LastName",
                orderable: true,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.LastName + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.LastName + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 2,
                data: "FirstName",
                orderable: true,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.FirstName + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.FirstName + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 3,
                data: "ArrivalDate",
                orderable: true,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.ArrivalDate + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.ArrivalDate + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 4,
                data: "DepartureDate",
                orderable: true,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.DepartureDate + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.DepartureDate + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 5,
                data: "Balance",
                orderable: true,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '@(Html.Raw(LogInManager.CurrencySymbol))' + ' ' + FormatNumberWithTwoDecimal(full.Balance) + ' ';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + '@(Html.Raw(LogInManager.CurrencySymbol))' + ' ' + FormatNumberWithTwoDecimal(full.Balance) + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 6,
                data: "ReservationStatusName",
                orderable: false,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.ReservationStatusName + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.ReservationStatusName + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 7,
                data: "Company",
                orderable: false,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.Company + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.Company + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 8,
                data: "Group",
                orderable: false,
                render: function (data, type, full, meta) {
                    var html = "";
                    if (full.IsCheckOut == true) {
                        html += '' + full.Group + '';
                    }
                    else {
                        html += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                        + ' class="">' + full.Group + '</a> ';
                    }
                    return html;
                }
            },
            {
                targets: 9,
                data: "Id",
                orderable: false,
                className: "text-left-align",
                render: function (data, type, full, meta) {
                    var buttons = '';

                    if (full.IsCheckOut == true) {
                        //buttons += ' <button type="button" class="btn bg-purple btn-xs m-r-xs">Checked Out</button>';
                        var url = '@Url.Content("~/Cashiering/Preview")' + '?Id=' + full.Id;
                        buttons += '<a href="' + url + '" target="_blank" '
                                 + ' class="btn btn-warning btn-xs m-r-xs" title="Folio">Folio</a> ';

                        buttons += '<a  href="javascript:void(0);" onclick="OpenEmailForm(\'' + full.Id + '\',\'' + full.Email + '\')" ' + ' class="btn btn-info btn-xs m-r-xs" title="Export">Export</a> ';

                        buttons += '<a href="javascript:void(0);" onclick="ReverseCheckOut(\'' + full.Id + '\')" '
                                                        + ' class="btn btn-primary btn-xs m-r-xs" title="Reverse Check-Out">RCO</a> ';
                    }
                    else {
                        buttons += '<a href="javascript:void(0);" onclick="OpenBillingForm(\'' + full.Id + '\')" '
                                 + ' class="btn btn-primary btn-xs m-r-xs" title="Billing">Billing</a> ';
                    }

                    return buttons;
                }
            }
            ],
            order: [[1, "asc"]],
            fnCreatedRow: function (nRow, aData, iDataIndex) {
                $(nRow).attr('ID', aData.ID)
            }
        })
    }

    function OpenBillingForm(id) {
        if (!IsNullOrEmpty(id)) {
            //Ajax Request to open billing information.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Cashiering/GetBillingInfo")',
                type: 'POST',
                data: { reservationId: id, source: "SearchGuest" },
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    }
                    else {
                        var result = response.data;
                        var transactions = result.Transactions;

                        clearBillingInfo();

                        $("form#frmBillingInfo #hdnReservationId").val(result.ReservationId);
                        $("form#frmInterimBill #hdnReservationId").val(result.ReservationId);

                        $("form#frmBillingInfo #Balance").val(FormatNumberWithTwoDecimal(result.Balance));
                        $("form#frmBillingInfo #ArrivalDate").val(ParseJsonDate(result.ArrivalDate));
                        $("form#frmBillingInfo #Company").val(result.Company);
                        $("form#frmBillingInfo #RateCode").val(result.RateCode);
                        $("form#frmBillingInfo #NoOfRooms").val(result.NoOfRooms);

                        $("form#frmBillingInfo #Status").val(result.Status);
                        $("form#frmBillingInfo #DepartureDate").val(ParseJsonDate(result.DepartureDate));
                        $("form#frmBillingInfo #Group").val(result.Group);
                        $("form#frmBillingInfo #RoomRent").val(FormatNumberWithTwoDecimal(result.RoomRent));
                        $("form#frmBillingInfo #RoomTypeCode").val(result.RoomTypeCode);

                        //Payment Method
                        $("form#frmBillingInfo .spnPaymentMethodCode").html(result.PaymentMethodCode);
                        $("form#frmBillingInfo #hdnPaymentMethodCode").val(result.PaymentMethodCode);
                        $("form#frmBillingInfo #hdnPaymentMethodId").val(result.PaymentMethodId);
                        $("form#frmBillingInfo #hdnPaymentMethodName").val(result.PaymentMethodName);


                        $("form#frmBillingInfo .spnTotalBalance").html('@Html.Raw(LogInManager.CurrencySymbol)' + ' ' + FormatNumberWithTwoDecimal(result.Balance));
                        $(".spnGuestName").html(result.Name);
                        $(".spnRoomNumbers").html("Room " + result.RoomNumbers);

                        var remainingPayableAmount = parseFloat(FormatNumberWithTwoDecimal(result.TotalPayableAmount - result.TotalAdditionalChargeAmount));

                        //Bind Billing Transaction Grid.
                        bindBillingTransactionGrid(transactions, remainingPayableAmount);
                        $('.spnCheckedOutLabel').hide();

                        //Is Checked Out
                        if (result.IsCheckedOut == true) {
                            $("form#frmBillingInfo #btnAddCharge").hide();
                            $("form#frmBillingInfo #btnCheckOut").hide();
                            $('.spnCheckedOutLabel').show();
                        }

                        $('#lnkPrint').attr("href", '@Url.Content("~/Cashiering/Preview")' + '?Id=' + result.ReservationId);

                        //$('#billingInfoModal').modal('toggle');
                        OpenModal('billingInfoModal', false);
                    }
                }
            });
        }
    }

    function searchGuest() {
        IsSearchButtonClicked = true;
        currentPage = 1;
        ReloadReservationGrid();

    }

    function ShowBalanceInfo() {
        var balance = 0;
        $('#divReservationCharges table tbody td.tdAmount').each(function () {
            //balance += parseFloat($(this).attr("data-amount"));
            balance += parseFloat($(this).attr("data-amount")) * parseInt($(this).attr("data-qty"));
        });
        $("form#frmBillingInfo .spnTotalBalance").html('@Html.Raw(LogInManager.CurrencySymbol)' + ' ' + FormatNumberWithTwoDecimal(balance));
        $("form#frmBillingInfo #Balance").val(FormatNumberWithTwoDecimal(balance));
    }

    function bindBillingTransactionGrid(data, payableAmount) {
        if (!IsNullOrEmpty(data) && data.length > 0) {

            var html = "";
            for (i = 0; i < data.length; i++) {
                var amount = 0;

                amount = (IsNullOrEmpty(data[i].Amount) ? "0" : data[i].Amount);

                var qty = (IsNullOrEmpty(data[i].Qty) ? "1" : data[i].Qty);
                html += "<tr id='trCharge_" + data[i].Id + "' data-chargeid='" + data[i].Id + "'>";

                //Delete  Charge
                if (!IsNullOrEmpty(data[i].Code)) {
                    //Room Rent, Package Charge.
                    if (data[i].Code != "@(SuccessHotelierHub.Utility.AdditionalChargeCode.ROOM_RENT)" && data[i].Code != "@(SuccessHotelierHub.Utility.AdditionalChargeCode.PACKAGE)") {
                        html += "<td><span class='text-red font_20 cursor-P' onclick='removeTransactionCharge(this);'><i class='fa fa-remove text'></i></span></td>";
                    } else {
                        html += "<td></td>";
                    }
                } else {
                    html += "<td></td>";
                }


                html += "<td>" + ParseJsonDate(data[i].TransactionDate) + "</td>";
                html += "<td>" + (IsNullOrEmpty(data[i].Code) ? "" : data[i].Code) + "</td>";
                html += "<td>" + (IsNullOrEmpty(data[i].Description) ? "" : data[i].Description) + "</td>";
                html += "<td>" + qty + "</td>";
                if (data[i].Code == "@(SuccessHotelierHub.Utility.AdditionalChargeCode.ROOM_RENT)") { //Room Rent
                    html += "<td class='tdAmount' data-amount='" + payableAmount + "' data-qty='" + qty + "'>" + "@(Html.Raw(LogInManager.CurrencySymbol))" + " " + FormatNumberWithTwoDecimal(amount) + "</td>";
                } else {
                    html += "<td class='tdAmount' data-amount='" + amount + "' data-qty='" + qty + "'>" + "@(Html.Raw(LogInManager.CurrencySymbol))" + " " + FormatNumberWithTwoDecimal(amount) + "</td>";
                }
                //html += "<td>" + (IsNullOrEmpty(data[i].Supplement) ? "" : data[i].Supplement) + "</td>";
                html += "<td>" + (IsNullOrEmpty(data[i].Reference) ? "" : data[i].Reference) + "</td>";
                html += "</tr>";
            }

            $("form#frmBillingInfo #divReservationCharges table tbody").append(html);
        }

        ShowBalanceInfo();
    }

    function clearGuest() {
        $('form#frmReservationList #RoomNo').val('');
        $('form#frmReservationList #LastName').val('');
        $('form#frmReservationList #FirstName').val('');
        $('form#frmReservationList #ConfirmationNo').val('');

        $('form#frmReservationList #CompanyId').val('');
        $('form#frmReservationList #GroupId').val('');
        $('form#frmReservationList #BlockCodeId').val('');
        $('form#frmReservationList #DepartureDate').val('');
        $('form#frmReservationList #IsShowCheckedOut').prop('checked', false);
        $('form#frmReservationList #IsShowCheckedIn').prop('checked', false);
        $('form#frmReservationList #IsShowDueOut').prop('checked', false);

        searchGuest();
    }

    function clearBillingInfo() {
        $("form#frmBillingInfo #Balance").val('');
        $("form#frmBillingInfo #ArrivalDate").val('');
        $("form#frmBillingInfo #Company").val('');
        $("form#frmBillingInfo #RateCode").val('');
        $("form#frmBillingInfo #NoOfRooms").val('');

        $("form#frmBillingInfo #Status").val('');
        $("form#frmBillingInfo #DepartureDate").val('');
        $("form#frmBillingInfo #Group").val('');
        $("form#frmBillingInfo #RoomRent").val('');
        $("form#frmBillingInfo #RoomTypeCode").val('');
        $("form#frmBillingInfo #divReservationCharges table tbody").empty();
    }

    //Search Additional Charge
    function openAdditionalChargeModal(rowNumber) {
        $('form#frmAdvanceAdditionalChargeSearch #Code').val($("form#frmReservationCharge #Code_" + rowNumber).val());
        $('form#frmAdvanceAdditionalChargeSearch #hdnRowNumber').val(rowNumber);
        $('form#frmAdvanceAdditionalChargeSearch #btnSearch').click();

        //$('#additionalChargeModal').modal('toggle');
        OpenModal('additionalChargeModal', false);
    }

    //Add Reservation  Charge
    function openReservationChargeModal() {
        //Set Reservation Id.
        $("form#frmReservationCharge #ReservationId").val($("form#frmBillingInfo #hdnReservationId").val());

        clearReservationChargesData();

        //$('#reservationChargeModal').modal('toggle');
        OpenModal('reservationChargeModal', false);
    }

    //CheckOut
    function CheckOut() {

        var reservationId = $("form#frmBillingInfo #hdnReservationId").val();
        if (!IsNullOrEmpty(reservationId)) {

            swal({
                title: 'Are you sure you want to checkout ?',
                type: 'info',
                showCancelButton: true,
                showCloseButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.value) {
                    //Ajax Request to fetch Check Out Payment Method Modal.
                    $.ajax({
                        beforeSend: function (xhr) {
                            showLoader();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            ShowErrorMessage(jqXHR.status, errorThrown);
                        },
                        complete: function () {
                            hideLoader();
                        },
                        url: '@Url.Content("~/Cashiering/ShowCheckOutPaymentMethod")',
                        type: 'POST',
                        data: { reservationId: reservationId, source: "SearchGuest" },
                        success: function (response) {
                            if (response.IsSuccess == false) {
                                showToaster(response.errorMessage, ToasterType.ERROR);
                            }
                            else {
                                $('#divCheckOutPaymentMethod').html('');
                                $('#divCheckOutPaymentMethod').html(response);

                                //Open CheckOut Payment Method Modal.
                                //$('#checkOutPaymentModal').modal('toggle');
                                OpenModal('checkOutPaymentModal', false);
                            }
                        }
                    });
                }
            });
        }
    }

    function OpenFolioReport() {
        swal({
            title: 'Do you want to print folio report?',
            type: 'warning',
            showCancelButton: true,
            showCloseButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes'
        }).then((result) => {
            if (result.value) {

                var previewReportURL = $('#lnkPrint').attr("href");
                if (!IsNullOrEmpty(previewReportURL)) {

                    CloseModal('billingInfoModal');

                    //Open Folio Report.
                    openPageInNewWindow(previewReportURL);
                }
            } else {
                CloseModal('billingInfoModal');
            }
        });
    }

    function OpenEmailForm(id, email) {
        $("form#frmEmail #Email").val(email)
        $("form#frmEmail #hdnReservationId").val(id);

        OpenModal('emailFormModal');
    }


    function BillingOk() {
        if (IsTransactionGridUpdated) {

            //Reload Grid.
            searchGuest();

            IsTransactionGridUpdated = false;
        }

        CloseModal('billingInfoModal');
    }

    function removeTransactionCharge(element) {
        var chargeId = $(element).closest("tr").attr("data-chargeid");

        if (!IsNullOrEmpty(chargeId)) {
            //Ajax request to delete transaction charge.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/ReservationCharge/DeleteCharge")',
                type: 'POST',
                data: { id: chargeId },
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    }
                    else {

                        $(element).closest("tr").remove();

                        ShowBalanceInfo();

                        IsTransactionGridUpdated = true;

                        showToaster("Charge details deleted successfully.", ToasterType.SUCCESS);
                    }
                    return false;
                }
            });
        }
    }

    function ReverseCheckOut(id) {
        if (!IsNullOrEmpty(id)) {
            swal({
                title: 'Are you sure you want to reverse check out?',
                type: 'warning',
                showCancelButton: true,
                showCloseButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.value) {
                    //Ajax Request to reverse check out.
                    $.ajax({
                        beforeSend: function (xhr) {
                            showLoader();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            ShowErrorMessage(jqXHR.status, errorThrown);
                        },
                        complete: function () {
                            hideLoader();
                        },
                        url: '@Url.Content("~/Cashiering/ReverseCheckOut")',
                        type: 'POST',
                        data: { reservationId: id, source: "SearchGuest" },
                        success: function (response) {
                            if (response.IsSuccess == false) {
                                showToaster(response.errorMessage, ToasterType.ERROR);
                            }
                            else {
                                showToaster("Reverse check out done successfully.", ToasterType.SUCCESS);

                                searchGuest();
                            }
                        }
                    });
                }
            });
        }
    }

    function bindSplitPaymentMethodDropdown(rowNumber) {
        if (gblPaymentMethods != null && gblPaymentMethods.length > 0) {
            $.each(gblPaymentMethods, function (data, val) {
                var id = val.Id;
                var code = val.Code;
                var name = val.Name;
                var isCreditCardPay = parseBoolean(val.IsCreditCardPay);
                var text = (code + " - " + name);

                $("form#frmSplitPayment #SplitPaymentId_" + rowNumber).append($("<option></option>").val(id).attr("data-iscreditcardpay", isCreditCardPay).html(text));
            })
        }
    }

    function bindInterimBillPaymentMethodDropdown(rowNumber) {
        if (gblPaymentMethods != null && gblPaymentMethods.length > 0) {
            $.each(gblPaymentMethods, function (data, val) {
                var id = val.Id;
                var code = val.Code;
                var name = val.Name;
                var isCreditCardPay = parseBoolean(val.IsCreditCardPay);
                var text = (code + " - " + name);

                $("form#frmInterimBill #PaymentMethodId_" + rowNumber).append($("<option></option>").val(id).attr("data-iscreditcardpay", isCreditCardPay).html(text));
            })
        }
    }

    function AddInterimBillValidationRule(rowNumber) {

        //First assign .validate() method in form at document.ready // $("form#frmInterimBill").validate();

        setTimeout(function () {
            $('form#frmInterimBill #PaymentMethodId_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please select payment method.'
                }
            });

            $('form#frmInterimBill #txtAmount_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please enter amount.'
                }
            });

            $('form#frmInterimBill #CreditCardNo_' + rowNumber).rules("add", {
                required: true,
                minlength:16,
                messages: {
                    required: 'Please enter credit card no.',
                    minlength: 'Please enter 16 digits of your credit card'
                }
            });

            $('form#frmInterimBill #CardExpiryDate_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please enter card expiry date.'
                }
            });

            $('form#frmInterimBill #CVV_' + rowNumber).rules("add", {
                required: true,
                messages: {
                    required: 'Please enter CVV.'
                }
            });

        }, 0);
    }


    function RemoveInterimBillValidationRule(rowNumber) {
        setTimeout(function () {
            $('form#frmInterimBill #PaymentMethodId_' + rowNumber).rules("remove");
            $('form#frmInterimBill #txtAmount_' + rowNumber).rules("remove");
            $('form#frmInterimBill #CreditCardNo_' + rowNumber).rules("remove");
            $('form#frmInterimBill #CardExpiryDate_' + rowNumber).rules("remove");
            $('form#frmInterimBill #CVV_' + rowNumber).rules("remove");
        }, 0);
    }

    function clearInterimBillPaymentData() {
        $('form#frmInterimBill #PaymentMethodId_1').val('');
        $('form#frmInterimBill #txtAmount_1').val('');
        $('form#frmInterimBill #CreditCardNo_1').val('');
        $('form#frmInterimBill #CVV_1').val('');
        $('form#frmInterimBill #lblTotalAmount').text('');

        //Remove error messages.
        //$('label[for=PaymentMethodId_1]').html('');
        //$('label[for=txtAmount_1]').html('');
        //$('label[for=CreditCardNo_1]').html('');
        //$('label[for=CardExpiryDate_1]').html('');
        //$('label[for=CVV_1]').html('');
        $('form#frmInterimBill').validate().resetForm();


        $('form#frmInterimBill .HideWhenInterimBillPaymentMethodIsCash_1').show();
        $('form#frmInterimBill #hdnTotalInterimBillPayment').val(1);
        $('form#frmInterimBill #hdnTotalAmount').val(0);

        //Remove all the rows except first one.
        $("form#frmInterimBill  #tblInterimBillPayment tbody").find("tr:gt(0)").remove();
    }

    //remove row from interim bill payment then refresh total amount value
    function removeInterimBillPaymentRow(element) {
        $(element).closest("tr").remove();

        calculateInterimBillPayableAmount();
    }

    function OpenInterimBillModal() {

        var id = $('form#frmInterimBill #hdnReservationId').val();

        if (!IsNullOrEmpty(id)) {

            //Ajax Request to get interim bill information.
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Cashiering/GetInterimBillInfo")',
                type: 'POST',
                data: { reservationId: id },
                success: function (response) {
                    if (!IsNullOrEmpty(response)) {
                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {
                            var result = response.data;

                            clearInterimBillPaymentData();

                            $("form#frmInterimBill #TotalAmount").val(FormatNumberWithTwoDecimal(result.TotalAmount));
                            $("form#frmInterimBill #TotalPaidAmount").val(FormatNumberWithTwoDecimal(result.TotalPaidAmount));
                            $("form#frmInterimBill #TotalPayableAmount").val(FormatNumberWithTwoDecimal(result.TotalPayableAmount));

                            $("form#frmInterimBill #hdnProfileId").val(result.ProfileId);
                            $("form#frmInterimBill #hdnRoomIds").val(result.RoomIds);

                            $('form#frmInterimBill #lnkInterimBillPreview').attr("href", '@Url.Content("~/Cashiering/PreviewInterimBill")' + '?Id=' + result.ReservationId);

                            OpenModal('InterimBillPaymentModal', false);


                            AddInterimBillValidationRule(1);
                        }
                    }
                }
            });
        }
    }

    //Add new interim bill payment row in modal
    function AddNewInterimBillPayment() {
        //Get row number
        var rowNumber = $('form#frmInterimBill #hdnTotalInterimBillPayment').val();

        if (!IsNullOrEmpty(rowNumber)) {
            rowNumber = parseInt(rowNumber) + 1;
        }
        else {
            rowNumber = 1;
        }

        var html = '';

        //Create New Row
        html += '<tr data-rownumber="' + rowNumber + '">';

        //Remove Button + Hidden Field
        html += "<td>";
        html += "<span class='text-red font_20 cursor-P' onclick='removeInterimBillPaymentRow(this);'>";
        html += "<i class='fa fa-remove'></i>";
        html += "</span>";
        html += "</td>";

        //Payment method
        html += '<td>';
        html += '<div class="row col-md-12">';
        html += '<select class="form-control" id="PaymentMethodId_' + rowNumber + '" name="PaymentMethodId_' + rowNumber + '" onchange="SelectInterimBillPaymentMethod(' + rowNumber + ')"><option value="">-- Select Payment Method--</option></select>';
        html += '</div>';
        html += '</td>';

        //Amount
        html += '<td>';
        html += '<div class="row col-md-12">';
        html += "<input type='text' id='txtAmount_" + rowNumber + "' name='txtAmount_" + rowNumber + "' class='form-control' placeholder='Amount' onkeypress='return checkValueIsNumericOrNot(event)' onchange='calculateInterimBillPayableAmount(this)' value='' maxlength='12' />";
        html += '</div>';
        html += '</td>';

        //Credit Card Number
        html += '<td>';
        html += '<div class="row col-md-12">';
        html += '<input class="form-control HideWhenInterimBillPaymentMethodIsCash_' + rowNumber + ' " id="CreditCardNo_' + rowNumber + '" maxlength="16"  name="CreditCardNo_' + rowNumber + '" onkeydown="onlyDigits(event)" placeholder="Credit Card #" type="text" value="" />';
        html += '</div>';
        html += '</td>';

        //Card ExpiryDate
        html += '<td>';
        html += '<div class="row col-md-12">';
        html += '<input id="CardExpiryDate_' + rowNumber + '" name="CardExpiryDate_' + rowNumber + '" type="text" placeholder="MM/YY" class="masked form-control HideWhenInterimBillPaymentMethodIsCash_' + rowNumber + '" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" />'
        html += '</div>';
        html += '</td>';

        //CVV
        html += '<td>'
        html += '<div class="row col-md-12">';
        html += '<input id="CVV_' + rowNumber + '" name="CVV_' + rowNumber + '" type="text" placeholder="CVV" class="masked form-control HideWhenInterimBillPaymentMethodIsCash_' + rowNumber + '" maxlength="4" />'
        html += '</div>';
        html += '</td>'

        html += '</tr>';

        //Append html to interim bill payment table
        $('form#frmInterimBill #tblInterimBillPayment tbody').append(html);

        $('form#frmInterimBill #hdnTotalInterimBillPayment').val(rowNumber);

        //Bind Payment Method Dropdown for Interim Bill Popup.
        bindInterimBillPaymentMethodDropdown(rowNumber);

        //Add validation rule.
        AddInterimBillValidationRule(rowNumber);
    }

    //Interim bill payment cash is selected then hide the credit card number and Expiry date field
    function SelectInterimBillPaymentMethod(rowNumber) {
        var selectedValue = $('form#frmInterimBill #PaymentMethodId_' + rowNumber).val();

        if (!IsNullOrEmpty(selectedValue)) {

            var paymentMethod = $('form#frmInterimBill #PaymentMethodId_' + rowNumber + ' ' + 'option:selected');

            var isCreditCardPay = parseBoolean(paymentMethod.data("iscreditcardpay"));
            var paymentMethodText = paymentMethod.text();


            if (!isCreditCardPay) {
                $('form#frmInterimBill .HideWhenInterimBillPaymentMethodIsCash_' + rowNumber).hide();

                //Remove error messages.
                $('label[for=CreditCardNo_' + rowNumber + ']').html('');
                $('label[for=CardExpiryDate_' + rowNumber + ']').html('');
                $('label[for=CVV_' + rowNumber + ']').html('');

            } else {
                $('form#frmInterimBill .HideWhenInterimBillPaymentMethodIsCash_' + rowNumber).show();
            }
        }
    }

    //Interim Bill Total Payable Amount calculation and set value
    function calculateInterimBillPayableAmount() {

        var totalAmount = 0;
        $("form#frmInterimBill #tblInterimBillPayment tbody tr").each(function () {

            var rowNumber = $(this).attr("data-rownumber");

            if (!IsNullOrEmpty(rowNumber)) {

                rowNumber = parseInt(rowNumber);

                var amount = $('form#frmInterimBill #txtAmount_' + rowNumber).val();

                if (!IsNullOrEmpty(amount) && amount != "0") {

                    totalAmount = parseFloat(totalAmount) + parseFloat(amount);
                }
            }
        });

        totalAmount = IsNullOrEmpty(totalAmount) ? 0 : parseFloat(FormatNumberWithTwoDecimal(totalAmount));

        $('form#frmInterimBill #lblTotalAmount').text(totalAmount);
        $('form#frmInterimBill #hdnTotalAmount').val(totalAmount);
        $('form#frmInterimBill #lblTotalAmount').removeClass("text-red");

        var totalPayableAmount = $('form#frmInterimBill #TotalPayableAmount').val();
        totalPayableAmount = IsNullOrEmpty(totalPayableAmount) ? 0 : parseFloat(FormatNumberWithTwoDecimal(totalPayableAmount));

        if (totalAmount > totalPayableAmount) {
            $('form#frmInterimBill #lblTotalAmount').addClass("text-red");
        }
    }

    function PayInterimBillPayment() {


        var totalPayableAmount = $('form#frmInterimBill #TotalPayableAmount').val();
        totalPayableAmount = IsNullOrEmpty(totalPayableAmount) ? 0 : parseFloat(FormatNumberWithTwoDecimal(totalPayableAmount));

        var totalAmount = $('form#frmInterimBill #hdnTotalAmount').val();
        totalAmount = IsNullOrEmpty(totalAmount) ? 0 : parseFloat(FormatNumberWithTwoDecimal(totalAmount));

        if (totalAmount > totalPayableAmount) {
            showToaster("You have entered greater amount than actual payable amount.", ToasterType.ERROR);
            $('form#frmInterimBill #lblTotalAmount').addClass("text-red");
            return false;
        }

        //Ajax request to pay bill amount (partial amount) interim bill.

        var blnValid = true;
        blnValid = $('#frmInterimBill').valid();

        if (!blnValid) {
            return false;
        }

        var listOfInterimBillPayment = [];

        var reservationId = $('form#frmInterimBill #hdnReservationId').val();
        var checkOutDate = $('form#frmInterimBill #hdnDepartureDate').val();

        $("form#frmInterimBill #tblInterimBillPayment tbody tr").each(function () {
            var rowNumber = $(this).attr("data-rownumber");

            if (!IsNullOrEmpty(rowNumber)) {
                rowNumber = parseInt(rowNumber);
                var modelBillPayment = {};

                modelBillPayment.ReservationId = reservationId;
                modelBillPayment.CheckOutDate = checkOutDate;
                modelBillPayment.PaymentMethodId = $('form#frmInterimBill #PaymentMethodId_' + rowNumber).val();
                modelBillPayment.Amount = parseFloat(FormatNumberWithTwoDecimal($('form#frmInterimBill #txtAmount_' + rowNumber).val()));
                modelBillPayment.CreditCardNo = $('form#frmInterimBill #CreditCardNo_' + rowNumber).val();
                modelBillPayment.CardExpiryDate = $('form#frmInterimBill #CardExpiryDate_' + rowNumber).val();
                modelBillPayment.CVVNo = $('form#frmInterimBill #CVV_' + rowNumber).val();
                modelBillPayment.PaymentMethodName = $('form#frmInterimBill #PaymentMethodId_' + rowNumber + ' ' + 'option:selected').text();

                modelBillPayment.ProfileId = $("form#frmInterimBill #hdnProfileId").val();
                modelBillPayment.RoomIds = $("form#frmInterimBill #hdnRoomIds").val();

                modelBillPayment.TotalPayableAmount = totalPayableAmount;

                listOfInterimBillPayment.push(modelBillPayment);
            }
        })

        if (listOfInterimBillPayment != null && listOfInterimBillPayment.length > 0) {
            var totalAmountOfInterimBillPayment = 0;
            var TotalPaybleAmount = $('form#frmInterimBill #hdnTotalAmount').val();

            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Cashiering/PayInterimBill")',
                type: 'POST',
                data: { model: listOfInterimBillPayment },
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    } else {

                        var result = response.data;

                        var url = '@Url.Content("~/Cashiering/PreviewInterimBill")' + '?Id=' + result.ReservationId;

                        clearInterimBillPaymentData();

                        $("form#frmInterimBill #TotalAmount").val(FormatNumberWithTwoDecimal(result.TotalAmount));
                        $("form#frmInterimBill #TotalPaidAmount").val(FormatNumberWithTwoDecimal(result.TotalPaidAmount));
                        $("form#frmInterimBill #TotalPayableAmount").val(FormatNumberWithTwoDecimal(result.TotalPayableAmount));

                        $("form#frmInterimBill #hdnProfileId").val(result.ProfileId);
                        $("form#frmInterimBill #hdnRoomIds").val(result.RoomIds);


                        $('form#frmInterimBill #lnkInterimBillPreview').attr("href", url);

                        searchGuest();

                        swal({
                            title: 'Do you want to preview bill?',
                            type: 'info',
                            showCancelButton: true,
                            showCloseButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No'
                        }).then((result) => {
                            if (result.value) {

                                //Open pdf.
                                $('form#frmInterimBill #lnkInterimBillPreview')[0].click();
                            }

                            //Close all the modal.
                            $('.modal').modal('hide');

                        });
                    }
                }
            });
        }

    }
</script>

@section scripts {
    <script src="~/Scripts/AdminLTE/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/AdminLTE/dataTables.bootstrap.min.js"></script> 
    <script type="text/javascript" src="~/Scripts/custom/jquery.inputmask.bundle.js"></script>  
}