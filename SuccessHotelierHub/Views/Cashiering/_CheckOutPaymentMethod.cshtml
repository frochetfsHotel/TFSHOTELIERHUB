@model SuccessHotelierHub.Models.CheckOutPaymentMethodVM
@using SuccessHotelierHub.Utility
@using SuccessHotelierHub.Models

@{
    var sourceRedirectionParam = "";
    sourceRedirectionParam = (string)ViewData["Source"];

    var originalCreditCardNo = (string)ViewData["OriginalCreditCardNo"];
}

<link rel="stylesheet" href="~/Content/css/AdminLTE/input-mask/masking-input.css" type="text/css" />

@using (Html.BeginForm("CheckOut", "Cashiering", FormMethod.Post, new { id = "frmCheckOutPayment", enctype = "multipart/form-data" }))
{

    <!-- HIDDEN FIELD -->
    @Html.HiddenFor(m => m.ReservationId)
    @Html.HiddenFor(m => m.ProfileId)
    @Html.HiddenFor(m => m.RoomIds)
    @Html.HiddenFor(m => m.NoOfRoom)
    @Html.HiddenFor(m => m.RoomTypeId)
    @Html.HiddenFor(m => m.PaymentMethod)
    <input type="hidden" id="hdnOriginalCreditCardNo" name="hdnOriginalCreditCardNo" value="@(originalCreditCardNo)" />
    <!-- HIDDEN FIELD -->

    @*<div class="pt_10 pl_10 pb_10 pr_10 searchBox_Border">*@
    <div class="row">
        <div class="col-md-6 col-sm-3 col-xs-12 form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Name", @readonly = "readonly" })
        </div>
        <div class="col-md-6 col-sm-3 col-xs-12 form-group">
            @Html.LabelFor(m => m.RoomNumbers)
            @Html.TextBoxFor(m => m.RoomNumbers, new
       {
           @class = "form-control",
           placeholder = "Room #",
           @readonly = "readonly"
       })
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 col-sm-4 col-xs-12 form-group">
            @Html.LabelFor(m => m.CheckOutDate, new { @class = "required-label" })
            <div class="input-group date">
                @Html.TextBoxFor(m => m.CheckOutDate, "{0:dd/MM/yyyy}", new { @class = "form-control", placeholder = "dd/mm/yyyy" })
                <div class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.CheckOutDate, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 form-group">
            <div class="bootstrap-timepicker">
                @Html.LabelFor(m => m.CheckOutTimeText, new { @class = "required-label" })
                <div class="input-group">
                    @Html.TextBoxFor(m => m.CheckOutTimeText, new { @class = "form-control", placeholder = "hh:mm" })
                    <div class="input-group-addon">
                        <i class="fa fa-clock-o"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 form-group">
            <label class="required-label" for="Amount">Amount (@Html.Raw(LogInManager.CurrencySymbol))</label>
            @Html.TextBoxFor(m => m.Amount, Utility.FormatAmountWithTwoDecimal(Model.Amount.HasValue ? Model.Amount.Value : 0), new { @class = "form-control", onkeypress = "onlyNumeric(event)" })

        </div>
    </div>
    <div class="row" id="divHidePaymentMethod">
        <div class="col-md-4">
            @Html.LabelFor(m => m.PaymentMethodId, new { @class = "required-label" })
            @Html.DropDownList("PaymentMethodId", new List<SelectListItem>
            {
                new SelectListItem{ Text="--Select Payment Method--", Value = "" }
            },
            htmlAttributes: new { @class = "form-control", onchange = "SelectPaymentMethod();" })
            @Html.ValidationMessageFor(m => m.PaymentMethodId, "", new { @class = "text-danger" })

        </div>
        <div class="col-md-5 divCreditCardInfo">
            @Html.LabelFor(m => m.CreditCardNo)
            <i class="fa fa-edit m-l-sm text-success cursor-P" id="btnEditCreditCardNo" style="display:none;" onclick="editCreditCardNo();" title="Edit Credit Card #"> </i>
            @Html.TextBoxFor(m => m.CreditCardNo, new { @class = "form-control", placeholder = "Credit Card #", onkeydown = "onlyDigits(event)", maxlength = "16" })
        </div>
        <div class="col-md-3 divCreditCardInfo divCardExpiryDate">
            @Html.LabelFor(m => m.CardExpiryDate)
            <input id="CardExpiryDate" name="CardExpiryDate" type="text" placeholder="MM/YY" class="masked form-control" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" value="@Model.CardExpiryDate" />
        </div>
        <div class="col-md-4 divCreditCardInfo m-t-sm">
            @Html.LabelFor(m => m.CVVNo)
            @Html.TextBoxFor(m => m.CVVNo, new { @class = "form-control", placeholder = "CVV #", onkeydown = "onlyDigits(event)", maxlength = "4" })
        </div>
        <div class="col-md-8 m-t divCompanyDetails" style="display:none;">
            @if (!string.IsNullOrWhiteSpace(Model.CompanyName))
            {
                <label class="label-bold">Company Name : </label> <span>@Model.CompanyName</span> <br/>
            }
            @if (!string.IsNullOrWhiteSpace(Model.AccountNumber))
            {
                <label class="label-bold">Account No : </label> <span>@Model.AccountNumber</span>
            }
        </div>
    </div>
    <div class="row m-t-sm">
        <div class="col-md-12">
            @Html.LabelFor(m => m.Reference)
            @Html.TextAreaFor(m => m.Reference, new { @class = "form-control", placeholder = "Reference", rows = "3" })
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 m-t-sm">
            <label class="container1">
                Split Payment
                @Html.CheckBoxFor(m => m.SplitPayment, new { @class = "", @onchange = "CustomerSplitPayment()" })
                <span class="checkmark"></span>
            </label>
        </div>

        <div class="col-md-12 col-xs-12 form-group mt_25 text-right" id="divSavePayment">
            <button type="button" class="btn btn-success m-r-xs btnCheckOutOk" id="btnCheckOutOk">OK</button>
            <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnClose">Close</button>
        </div>
        <div class="clearfix"></div>
    </div>
    @*</div>*@
}
<div class="clearfix"></div>

<script type="text/javascript">
    var isCreditCardEdit = false;

    $(document).ready(function () {

        //Load Payment Methods.
        LoadPaymentMethod();

        $('form#frmCheckOutPayment #CardExpiryDate').attr("placeholder", "MM/YY");

        //Credit Card#.
        if (!IsNullOrEmpty('@Model.CreditCardNo')) {
            $('form#frmCheckOutPayment #CreditCardNo').attr("readonly", true);
            $('form#frmCheckOutPayment #btnEditCreditCardNo').show();
        }

        SelectPaymentMethod();

        //Timepicker
        $('form#frmCheckOutPayment #CheckOutTimeText').timepicker({
            showInputs: false,
            showMeridian: false,
            minuteStep: 5
        });

        //Input Mask
        $('form#frmCheckOutPayment #CheckOutTimeText').inputmask(
            "hh:mm", {
                placeholder: "hh:mm",
                insertMode: false,
                showMaskOnHover: true
            }
        );

        //Date picker
        $('#CheckOutDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy'
        });

        //CheckOut
        $('form#frmCheckOutPayment .btnCheckOutOk').click(function (e) {
            if (validateCheckOut()) {

                var paymentMethod = $('form#frmCheckOutPayment #PaymentMethodId option:selected');
                var isCreditCardPay = parseBoolean(paymentMethod.data("iscreditcardpay"));

                //Credit Card#.
                if (isCreditCardEdit == false && isCreditCardPay == true) {
                    var creditCardNo = $('form#frmCheckOutPayment #hdnOriginalCreditCardNo').val();
                    if(!IsNullOrEmpty(creditCardNo)){
                        $('form#frmCheckOutPayment #CreditCardNo').val(creditCardNo);
                    }                    
                }

                //Ajax request to check out.
                $.ajax({
                    beforeSend: function (xhr) {
                        showLoader();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        ShowErrorMessage(jqXHR.status, errorThrown);
                    },
                    complete: function () {
                        hideLoader();
                    },
                    url: '@Url.Content("~/Cashiering/CheckOut")',
                    type: 'POST',
                    data: $('form#frmCheckOutPayment').serialize(),
                    success: function (response) {
                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {

                            var reservationId = $('#ReservationId').val();
                            var url = '@Url.Content("~/Cashiering/Preview")' + '?Id=' + reservationId;
                            swal({
                                title: '' + response.data.Name + ' checked out successfully.',
                                type: 'success',
                                html: "<a href='" + url + "' target='_blank'>Click here to see folio report.</a>",
                                showCloseButton: true,
                                showCancelButton: false,
                                focusConfirm: false,
                                confirmButtonText: 'OK',
                            }).then((result) => {
                                //Close all the modal.
                                $('.modal').modal('hide');
                                //$('#checkOutPaymentModal').modal('toggle');
                            });

                            searchGuest();
                        }
                    }
                });
                return false;
            }
        });
    });


    //open model and set default value
    function CustomerSplitPayment() {
        var IsChecked = $('#SplitPayment').prop('checked')
        if (IsChecked) {
            $('#divHidePaymentMethod').hide();
            $('#divSavePayment').hide();
            clearSplitPaymentData();
            $('#SplitPaymentModal').modal('show');
            $('form#frmSplitPayment #hdnSaveReservationId').attr('value', '@Model.ReservationId');
            $('form#frmSplitPayment #hdnCheckOutDate').attr('value', '@Model.CheckOutDate');
            $('form#frmSplitPayment #txtAmount_1').val('@Model.Amount');
            $('form#frmSplitPayment #hdnTotalAmount').val('@Model.Amount');
            $('form#frmSplitPayment #lblFinalAmount').text('@Model.Amount');
            $('form#frmSplitPayment #lblDiductAmount').text('@Model.Amount');
            $('form#frmSplitPayment #lblpayableAmount').text(0);

            AddSplitPaymentValidationRule(1);
        }
        else {
            $('#divHidePaymentMethod').show();
            $('#divSavePayment').show();
        }
    }

    //Add split payment new row in modal
    function AddNewSplitPayment() {
        //get row number
        var rowNumber = $('form#frmSplitPayment #hdnTotalSplitPayment').val();

        if (!IsNullOrEmpty(rowNumber)) {
            rowNumber = parseInt(rowNumber) + 1;
        }
        else {
            rowNumber = 1;
        }

        var html = '';

        //Create New Row
        html += '<tr data-rownumber="' + rowNumber + '">';

        //Remove Button + Hidden Field
        html += "<td>";
        html += "<span class='text-red font_20 cursor-P' onclick='removeSplitPaymentRow(this);'>";
        html += "<i class='fa fa-remove'></i>";
        html += " </span>";
        html += "</td>";

        //Payment method
        html += '<td>';
        html += '<select class="form-control" id="SplitPaymentId_' + rowNumber + '" name="SplitPaymentId_' + rowNumber + '" onchange="SelectSplitPaymentMethod(' + rowNumber + ')"><option value="">-- Select Payment Method--</option></select>'
        html += '</td>';

        //Amount
        html += "<td>";
        html += "<input type='text' id='txtAmount_" + rowNumber + "' name='txtAmount_" + rowNumber + "' class='form-control' placeholder='Amount' onkeypress='return checkValueIsNumericOrNot(event)' onchange='calculatTotalAmount(this)' value='0.00' maxlength='12'/>";
        html += "</td>";

        //Credit Card Number
        html += '<td>';
        html += '<input class="form-control HideWhenCashIsSelected_' + rowNumber + ' " id="CreditCardNo_' + rowNumber + '" maxlength="16"  name="CreditCardNo_' + rowNumber + '" onkeydown="onlyDigits(event)" placeholder="Credit Card #" type="text" value="" />';
        html += '</td>';

        //Card ExpiryDate
        html += '<td>';
        html += '<input id="CardExpiryDate_' + rowNumber + '" name="CardExpiryDate_' + rowNumber + '" type="text" placeholder="MM/YY" class="masked form-control HideWhenCashIsSelected_' + rowNumber + '" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" />'
        html += '</td>';

        //CVV
        html += '<td>'
        html += '<input id="CardVerificationValue_' + rowNumber + '" name="CardVerificationValue_' + rowNumber + '" type="text" placeholder="CVV" class="masked form-control HideWhenCashIsSelected_' + rowNumber + '" maxlength="4" />'
        html += '</td>'

        html += '</tr>';

        // append html to split payment model
        $('form#frmSplitPayment #tblSplitPayment tbody').append(html);

        // when add new row devide in two rows from the total amount
        $('form#frmSplitPayment #hdnTotalSplitPayment').val(rowNumber);
        var listOfSplitPayment = [];
        var TotalAmount = $('form#frmSplitPayment #hdnTotalAmount').val()
        if (TotalAmount == $('form#frmSplitPayment #txtAmount_1').val()) {
            var DevideCharge = (parseFloat(TotalAmount) / 2)
            $("form#frmSplitPayment #tblSplitPayment tbody tr").each(function () {
                var rowNumber = $(this).attr("data-rownumber");
                if (!IsNullOrEmpty(rowNumber)) {
                    rowNumber = parseInt(rowNumber);
                    var objSplitPayment = {};
                    objSplitPayment.Amount = $('form#frmSplitPayment #txtAmount_' + rowNumber).val();
                    listOfSplitPayment.push(objSplitPayment);
                    $('form#frmSplitPayment #txtAmount_' + rowNumber).val(parseFloat(DevideCharge));
                }
            })
        }

        //Bind Payment Method Dropdown for Split Payment Popup.
        bindSplitPaymentMethodDropdown(rowNumber);

        //Add validation rule.
        AddSplitPaymentValidationRule(rowNumber);
    }

    //remove row from split payment then refresh total amount value
    function removeSplitPaymentRow(element) {
        $(element).closest("tr").remove();

        calculatTotalAmount(this);
    }

    //Total Amount calculation and set value
    function calculatTotalAmount(value) {
        var MinusFromTotalAmount = 0;
        var listOfSplitPayment = [];
        var TotalAmount = $('form#frmSplitPayment #hdnTotalAmount').val()
        $("form#frmSplitPayment #tblSplitPayment tbody tr").each(function () {
            var rowNumber = $(this).attr("data-rownumber");
            if (!IsNullOrEmpty(rowNumber)) {
                rowNumber = parseInt(rowNumber);
                var objSplitPayment = {};
                objSplitPayment.Amount = $('form#frmSplitPayment #txtAmount_' + rowNumber).val();
                listOfSplitPayment.push(objSplitPayment);
                if (objSplitPayment.Amount != null && objSplitPayment.Amount != "") {
                    MinusFromTotalAmount = parseFloat(objSplitPayment.Amount) + parseFloat(MinusFromTotalAmount);
                    var Diffrence = parseFloat(TotalAmount) - parseFloat(MinusFromTotalAmount)
                    if (parseFloat(Diffrence) < 0) {
                        toastr.error("Please check your entered amount is greater than total remaining payable amount")
                        $('#' + value.id).val("0.00")
                        return false;
                    }
                    $('form#frmSplitPayment #lblDiductAmount').text(parseFloat(MinusFromTotalAmount).toFixed(2))
                    $('form#frmSplitPayment #lblpayableAmount').text(parseFloat(Diffrence).toFixed(2))
                }
            }
        })
    }

    //in split payment cash is selected then hide the credit card number and Expiry date field
    function SelectSplitPaymentMethod(rowNumber) {        
        var selectedValue = $('form#frmSplitPayment #SplitPaymentId_' + rowNumber).val();

        if (!IsNullOrEmpty(selectedValue)) {

            var paymentMethod = $('form#frmSplitPayment #SplitPaymentId_' + rowNumber + ' ' + 'option:selected');

            var isCreditCardPay = parseBoolean(paymentMethod.data("iscreditcardpay"));
            var paymentMethodText = paymentMethod.text();


            if (!isCreditCardPay) {
                $('form#frmSplitPayment .HideWhenCashIsSelected_' + rowNumber).hide();

                //Remove error messages.
                $('label[for=CreditCardNo_' + rowNumber + ']').html('');
                $('label[for=CardExpiryDate_' + rowNumber + ']').html('');
                $('label[for=CardVerificationValue_' + rowNumber + ']').html('');

            } else {
                $('form#frmSplitPayment .HideWhenCashIsSelected_' + rowNumber).show();
            }
        }
    }

    //Check Out
    function validateCheckOut() {
        var blnValid = true;

        if (!IsNullOrEmpty($('form#frmCheckOutPayment #PaymentMethodId').val())) {
            var paymentMethod = $('form#frmCheckOutPayment #PaymentMethodId option:selected');

            var isCreditCardPay = parseBoolean(paymentMethod.data("iscreditcardpay"));
            
            if (isCreditCardPay) {
                var creditCardNo = $('form#frmCheckOutPayment #CreditCardNo').val();
                var cardExpiryDate = $('form#frmCheckOutPayment #CardExpiryDate').val();
                var CVVNo = $('form#frmCheckOutPayment #CVVNo').val();

                var errorText = "";
                if (IsNullOrEmpty(creditCardNo)) {
                    errorText += "Please enter credit card number." + Delimeter.BREAKLINE;
                    blnValid = false;
                } else {
                    if (!IsValidCreditCardNo(creditCardNo)) {
                        errorText += "Please enter 16 digits of your credit card." + Delimeter.BREAKLINE;
                        blnValid = false;
                    }
                }

                if (IsNullOrEmpty(cardExpiryDate)) {
                    errorText += "Please enter card expiry date." + Delimeter.BREAKLINE;
                    blnValid = false;
                }

                if (IsNullOrEmpty(CVVNo)) {
                    errorText += "Please enter CVV number." + Delimeter.BREAKLINE;
                    blnValid = false
                }
                else {
                    if (!IsValidCVVNo(CVVNo)) {
                        errorText += "Please enter valid CVV number. Its must be only 3 or 4 digits." + Delimeter.BREAKLINE;
                        blnValid = false
                    }
                }


                if (blnValid == false) {
                    showToaster(errorText, ToasterType.ERROR);
                    return false;
                }
            }
        }

        if ($("form#frmCheckOutPayment").valid() == false) {
            showToaster("Please fill all the Required Fields first", ToasterType.ERROR);
            return false;
        }

        return true;
    }

    function SelectPaymentMethod() {
        if (!IsNullOrEmpty($('form#frmCheckOutPayment #PaymentMethodId').val())) {            
            var paymentMethod = $('form#frmCheckOutPayment #PaymentMethodId option:selected');

            var isCreditCardPay = parseBoolean(paymentMethod.data("iscreditcardpay"));
            var paymentMethodText = paymentMethod.text();

            if (!isCreditCardPay) {
                $('.divCreditCardInfo').hide();

                if(Contains(trim(paymentMethodText),"City Ledger")){
                    $('.divCompanyDetails').show();
                }else{
                    $('.divCompanyDetails').hide();
                }

            } else {
                $('.divCreditCardInfo').show();
                $('.divCompanyDetails').hide();
            }

            $('#PaymentMethod').val(paymentMethodText);
        }

    }

    function clearSplitPaymentData() {
        $('form#frmSplitPayment #SplitPaymentId_1').val('');
        $('form#frmSplitPayment #CreditCardNo_1').val('');
        $('form#frmSplitPayment #CardExpiryDate_1').val('');        
        $('form#frmSplitPayment #CardVerificationValue_1').val('');
        $('form#frmSplitPayment .HideWhenCashIsSelected_1').show();
        $('form#frmSplitPayment #hdnTotalSplitPayment').val(1);
        //Remove all the rows except first one.
        $("form#frmSplitPayment #tblSplitPayment tbody").find("tr:gt(0)").remove();
    }


    function editCreditCardNo() {
        var creditCardNo = '';
        creditCardNo = $('form#frmCheckOutPayment #hdnOriginalCreditCardNo').val();

        $('form#frmCheckOutPayment #CreditCardNo').attr("readonly", false);
        $('form#frmCheckOutPayment #CreditCardNo').val(creditCardNo);

        isCreditCardEdit = true;
    }

    function LoadPaymentMethod(){
        var paymentMethods = @Html.Raw(Json.Encode(ViewData["PaymentMethodList"]));

        if(!IsNullOrEmpty(paymentMethods) && paymentMethods.length > 0){

            var optionHtml = "";
            optionHtml += "<option value=''>--Select Payment Method--</option>";
            $.each(paymentMethods, function(index, item) {
                var id = item.Id;
                var code = item.Code;
                var name = item.Name;
                var isCreditCardPay = parseBoolean(item.IsCreditCardPay);

                optionHtml += "<option value='" + id + "' data-iscreditcardpay='" + isCreditCardPay + "'>" + (code + " - " + name ) + "</option>";
            });

            $('form#frmCheckOutPayment #PaymentMethodId').html(optionHtml);

            if(!IsNullOrEmpty('@Model.PaymentMethodId')){
                $('form#frmCheckOutPayment #PaymentMethodId').val('@Model.PaymentMethodId');
            }
        }else{
            $('form#frmCheckOutPayment #PaymentMethodId').html("");
            $('form#frmCheckOutPayment #PaymentMethodId').append($("<option></option>").val("").html("--Select Payment Method--"));
        }
    }

</script>

<script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/masking-input.js" data-autoinit="true"></script>