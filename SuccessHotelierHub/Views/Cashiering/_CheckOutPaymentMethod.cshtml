@model SuccessHotelierHub.Models.CheckOutPaymentMethodVM
@using SuccessHotelierHub.Utility
@using SuccessHotelierHub.Models

@{
    var sourceRedirectionParam = "";
    sourceRedirectionParam = (string)ViewData["Source"];
}

<link rel="stylesheet" href="~/Content/css/AdminLTE/input-mask/masking-input.css" type="text/css" />

@using (Html.BeginForm("CheckOut", "Cashiering", FormMethod.Post, new { id = "frmCheckOutPayment", enctype = "multipart/form-data" }))
{

    <!-- HIDDEN FIELD -->
    @Html.HiddenFor(m => m.ReservationId)
    @Html.HiddenFor(m => m.ProfileId)
    @Html.HiddenFor(m => m.RoomIds)
    @Html.HiddenFor(m => m.NoOfRoom)
    @Html.HiddenFor(m => m.RoomTypeId)
    @Html.HiddenFor(m => m.PaymentMethod)
    <!-- HIDDEN FIELD -->
    @*<div class="pt_10 pl_10 pb_10 pr_10 searchBox_Border">*@
    <div class="row">
        <div class="col-md-6 col-sm-3 col-xs-12 form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Name", @readonly = "readonly" })
        </div>
        <div class="col-md-6 col-sm-3 col-xs-12 form-group">
            @Html.LabelFor(m => m.RoomNumbers)
            @Html.TextBoxFor(m => m.RoomNumbers, new
       {
           @class = "form-control",
           placeholder = "Room #",
           @readonly = "readonly"
       })
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 col-sm-4 col-xs-12 form-group">
            @Html.LabelFor(m => m.CheckOutDate, new { @class = "required-label" })
            <div class="input-group date">
                @Html.TextBoxFor(m => m.CheckOutDate, "{0:dd/MM/yyyy}", new { @class = "form-control", placeholder = "dd/mm/yyyy" })
                <div class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.CheckOutDate, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 form-group">
            <div class="bootstrap-timepicker">
                @Html.LabelFor(m => m.CheckOutTimeText, new { @class = "required-label" })
                <div class="input-group">
                    @Html.TextBoxFor(m => m.CheckOutTimeText, new { @class = "form-control", placeholder = "hh:mm tt" })
                    <div class="input-group-addon">
                        <i class="fa fa-clock-o"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-4 col-xs-12 form-group">
            <label class="required-label" for="Amount">Amount (@Html.Raw(LogInManager.CurrencySymbol))</label>
            @Html.TextBoxFor(m => m.Amount, Utility.FormatAmountWithTwoDecimal(Model.Amount.HasValue ? Model.Amount.Value : 0), new { @class = "form-control", onkeypress = "onlyNumeric(event)" })

        </div>
    </div>
    <div class="row" id="divHidePaymentMethod">
        <div class="col-md-4">
            @Html.LabelFor(m => m.PaymentMethodId, new { @class = "required-label" })
            @Html.DropDownListFor(m => m.PaymentMethodId,
                                new SelectList((IEnumerable<SelectListItem>)ViewData["PaymentMethodList"], "Value", "Text"),
                                "--Select Payment Method--",
                                new { @class = "form-control", onchange = "SelectPaymentMethod();" })
            @Html.ValidationMessageFor(m => m.PaymentMethodId, "", new { @class = "text-danger" })

        </div>
        <div class="col-md-5 divCreditCardInfo">
            @Html.LabelFor(m => m.CreditCardNo)
            @Html.TextBoxFor(m => m.CreditCardNo, new { @class = "form-control", placeholder = "Credit Card #", onkeydown = "onlyDigits(event)", maxlength = "16", minlength = "16" })
        </div>
        <div class="col-md-3 divCreditCardInfo divCardExpiryDate">
            @Html.LabelFor(m => m.CardExpiryDate)
            <input id="CardExpiryDate" name="CardExpiryDate" type="text" placeholder="MM/YY" class="masked form-control" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" value="@Model.CardExpiryDate" />
        </div>
    </div>
    <div class="row m-t-sm">
        <div class="col-md-12">
            @Html.LabelFor(m => m.Reference)
            @Html.TextAreaFor(m => m.Reference, new { @class = "form-control", placeholder = "Reference", rows = "3" })
        </div>
    </div>
    <div class="row">
        <table class="table table-striped" id="tblSplitPaymentDetails"></table>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label class="container1">
                Split Payment
                @Html.CheckBoxFor(m => m.SplitPayment, new { @class = "", @onchange = "CustomerSplitPayment()" })
                <span class="checkmark"></span>
            </label>
        </div>

        <div class="col-md-12 col-xs-12 form-group mt_25 text-right" id="divSavePayment">
            <button type="button" class="btn btn-success m-r-xs btnCheckOutOk" id="btnCheckOutOk">OK</button>
            <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnClose">Close</button>
        </div>
        <div class="clearfix"></div>
    </div>
    @*</div>*@
}
<div class="clearfix"></div>

<script type="text/javascript">
    $(document).ready(function () {

        $('form#frmCheckOutPayment #CardExpiryDate').attr("placeholder", "MM/YY");

        SelectPaymentMethod();

        //Timepicker
        $('form#frmCheckOutPayment #CheckOutTimeText').timepicker({
            showInputs: false,
            showMeridian: false,
            minuteStep: 5
        });

        //Date picker
        $('#CheckOutDate').datepicker({
            autoclose: true,
            format: 'dd/mm/yyyy'
        });

        //CheckOut
        $('form#frmCheckOutPayment .btnCheckOutOk').click(function (e) {
            if (validateCheckOut()) {

                //Ajax request to check out.
                $.ajax({
                    beforeSend: function (xhr) {
                        showLoader();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        ShowErrorMessage(jqXHR.status, errorThrown);
                    },
                    complete: function () {
                        hideLoader();
                    },
                    url: '@Url.Content("~/Cashiering/CheckOut")',
                    type: 'POST',
                    data: $('form#frmCheckOutPayment').serialize(),
                    success: function (response) {
                        if (response.IsSuccess == false) {
                            showToaster(response.errorMessage, ToasterType.ERROR);
                        }
                        else {

                            var reservationId = $('#ReservationId').val();
                            var url = '@Url.Content("~/Cashiering/Preview")' + '?Id=' + reservationId;
                            swal({
                                title: '' + response.data.Name + ' checked out successfully.',
                                type: 'success',
                                html: "<a href='" + url + "' target='_blank'>Click here to see folio report.</a>",
                                showCloseButton: true,
                                showCancelButton: false,
                                focusConfirm: false,
                                confirmButtonText: 'OK',
                            }).then((result) => {
                                //Close all the modal.
                                $('.modal').modal('hide');
                                //$('#checkOutPaymentModal').modal('toggle');
                            });

                            searchGuest();
                        }
                    }
                });
                return false;
            }
        });
    });

    function CustomerSplitPayment() {
        var IsChecked = $('#SplitPayment').prop('checked')
        if (IsChecked) {
            $('#divHidePaymentMethod').hide()
            $('#divSavePayment').hide()
            clearReservationChargesData()
            $('#SplitPaymentModal').modal('show')
            $('#hdnSaveReservationId').attr('value', '@Model.ReservationId')
            $('#hdnCheckOutDate').attr('value', '@Model.CheckOutDate')
            $('#txtAmount_1').val('@Model.Amount')
            $('#hdnTotalAmount').val('@Model.Amount')
            $('#lblFinalAmount').text('@Model.Amount')
            $('#lblDiductAmount').text('@Model.Amount')
            $('#lblpayableAmount').text(0)
        }
        else {
            $('#divHidePaymentMethod').show()
            $('#divSavePayment').show()
        }
    }

    function AddNewSplitPayment() {
        var tableRowLength = $('#tblSplitPayment tbody tr').length;
        if (tableRowLength < 6) {


            var rowNumber = $('form#frmSplitPayment #hdnTotalSplitPayment').val();

            if (!IsNullOrEmpty(rowNumber)) {
                rowNumber = parseInt(rowNumber) + 1;
            }
            else {
                rowNumber = 1;
            }

            var html = '';

            //Create New Row
            html += '<tr data-rownumber="' + rowNumber + '">';

            //Remove Button + Hidden Field
            html += "<td>";
            html += "<span class='text-red font_20 cursor-P' onclick='removeRow(this);'>";
            html += "<i class='fa fa-remove text'></i>";
            html += " </span>";
            html += "<input type='hidden' id='AdditionalChargeId_" + rowNumber + "' name='AdditionalChargeId_" + rowNumber + "' value='0'>";
            html += "</td>";

            //Paymnt method
            html += '<td>';
            html += '<select class="form-control" data-val="true" data-val-required="Please select payment method." id="SplitPaymentId_' + rowNumber + '" name="SplitPaymentId_' + rowNumber + '" onchange="SelectSplitPaymentMethod(' + rowNumber + ')"><option value="">-- Select Payment Method--</option><option value="f5675c7b-397a-4349-8dfd-7d9421a2299e">AE - American Express</option><option value="58bc4291-177a-4258-b68a-22aea58ff217">CS - Cash</option><option value="9f19777a-c984-4770-870a-f271b448aeb7">DS - Discover</option><option value="59b7a188-b794-4aca-b00f-12613b822f52">LA - Laser</option><option value="099518d7-42b2-4055-bb8e-f99609e197c1">MC - Master Card</option><option value="ab47b5ad-0c79-47e8-ac0f-799fd4872f3b">VA - Visa</option></select>'
            html += '</td>';

            //Amount
            html += "<td>";
            html += "<input type='text' id='txtAmount_" + rowNumber + "' name='txtAmount_" + rowNumber + "' class='form-control' placeholder='Amount' onkeypress='return checkValueIsNumericOrNot(event)' onchange='calculatTotalAmount(this)' value='0.00' />";
            html += "</td>";

            //Credit Card Number
            html += '<td>';
            html += '<input class="form-control HideWhenCashIsSelected_' + rowNumber + ' " id="CreditCardNo_' + rowNumber + '" maxlength="16" minlength="16" name="CreditCardNo_' + rowNumber + '" onkeydown="onlyDigits(event)" placeholder="Credit Card #" type="text" value="XXXXXXXXXXXX4242">';
            html += '</td>';

            //Card ExpiryDate
            html += '<td>';
            html += '<input id="CardExpiryDate_' + rowNumber + '" name="CardExpiryDate_' + rowNumber + '" type="text" placeholder="MM/YY" class="masked form-control HideWhenCashIsSelected_' + rowNumber + '" pattern="(1[0-2]|0[1-9])\/(1[5-9]|2\d)" />'
            html += '</td>';

            html += '</tr>';


            $('form#frmSplitPayment #tblSplitPayment tbody').append(html);

            $('form#frmSplitPayment #hdnTotalSplitPayment').val(rowNumber);

            var listOfSplitPayment = [];
            var TotalAmount = $('#hdnTotalAmount').val()
            if (TotalAmount == $('#txtAmount_1').val()) {
                var DevideCharge = (parseFloat(TotalAmount) / rowNumber)
                $("form#frmSplitPayment #tblSplitPayment tbody tr").each(function () {
                    var rowNumber = $(this).attr("data-rownumber");
                    if (!IsNullOrEmpty(rowNumber)) {
                        rowNumber = parseInt(rowNumber);
                        var objSplitPayment = {};
                        objSplitPayment.Amount = $('form#frmSplitPayment #txtAmount_' + rowNumber).val();
                        listOfSplitPayment.push(objSplitPayment);
                        $('#txtAmount_' + rowNumber).val(parseFloat(DevideCharge));
                    }
                })
            }
        }
        else {
            toastr.error("there are no more payment method")
        }
    }

    function calculatTotalAmount(value) {
        var MinusFromTotalAmount = 0;
        var listOfSplitPayment = [];
        var TotalAmount = $('#hdnTotalAmount').val()
        $("form#frmSplitPayment #tblSplitPayment tbody tr").each(function () {
            var rowNumber = $(this).attr("data-rownumber");
            if (!IsNullOrEmpty(rowNumber)) {
                rowNumber = parseInt(rowNumber);
                var objSplitPayment = {};
                objSplitPayment.Amount = $('form#frmSplitPayment #txtAmount_' + rowNumber).val();
                listOfSplitPayment.push(objSplitPayment);
                if (objSplitPayment.Amount != null && objSplitPayment.Amount != "") {
                    MinusFromTotalAmount = parseFloat(objSplitPayment.Amount) + parseFloat(MinusFromTotalAmount);
                    var Diffrence = parseFloat(TotalAmount) - parseFloat(MinusFromTotalAmount)
                    if (parseFloat(Diffrence) < 0) {
                        toastr.error("inserted values is greater then total amount")
                        $('#' + value.id).val("0.00")
                        return false;
                    }
                    $('#lblDiductAmount').text(parseFloat(MinusFromTotalAmount).toFixed(2))
                    $('#lblpayableAmount').text(parseFloat(Diffrence).toFixed(2))
                }
            }
        })
    }

    function SelectSplitPaymentMethod(RowNumber) {
        var SelectedDropDownvalue = [];
        if (!IsNullOrEmpty($('#SplitPaymentId_' + RowNumber).val())) {
            Insidetext = '#SplitPaymentId_' + RowNumber + ' ' + 'option:selected';
            var splitPaymentMethod = $(Insidetext).text();
            var MethodId = $('#SplitPaymentId_' + RowNumber).val();
            var splitPaymentMethodName = splitPaymentMethod;
            if (Contains(splitPaymentMethod, '-')) {
                splitPaymentMethodName = trim(splitPaymentMethod.split('-')[1]);
            }

            $("form#frmSplitPayment #tblSplitPayment tbody tr").each(function (index) {
                var rowNumber = $(this).attr("data-rownumber");
                if (!IsNullOrEmpty(rowNumber)) {
                    rowNumber = parseInt(rowNumber);
                    var objSplitPayment = {};
                    objSplitPayment.PaymentMethodtext = $('form#frmSplitPayment #SplitPaymentId_' + rowNumber + ' ' + 'option:selected').text();
                    objSplitPayment.PaymentMethod = $('form#frmSplitPayment #SplitPaymentId_' + rowNumber).val();
                    if (objSplitPayment.PaymentMethod != "") {
                        SelectedDropDownvalue.push(objSplitPayment);
                    }

                }
            })
            var Samevalue = $.grep(SelectedDropDownvalue, function (element) { return element.PaymentMethod == MethodId; })
            if (Samevalue.length > 1) {
                $('#SplitPaymentId_' + RowNumber).val("");
                toastr.error("Please select another payment method, selected payment method is already exist")
                return false;
            }

            if (trim(splitPaymentMethodName) == 'Cash') {
                $('.HideWhenCashIsSelected_' + RowNumber).hide();
            } else {
                $('.HideWhenCashIsSelected_' + RowNumber).show();
            }
        }
    }

    //Check Out
    function validateCheckOut() {
        var blnValid = true;

        if (!IsNullOrEmpty($('form#frmCheckOutPayment #PaymentMethodId').val())) {
            var paymentMethod = $('form#frmCheckOutPayment #PaymentMethodId option:selected').text();

            var paymentMethodName = paymentMethod;
            if (Contains(paymentMethod, '-')) {
                paymentMethodName = trim(paymentMethod.split('-')[1]);
            }

            if (trim(paymentMethodName) != 'Cash') {
                var creditCardNo = $('form#frmCheckOutPayment #CreditCardNo').val();
                var cardExpiryDate = $('form#frmCheckOutPayment #CardExpiryDate').val();

                var errorText = "";
                if (IsNullOrEmpty(creditCardNo)) {
                    errorText += "Please enter credit card number." + Delimeter.BREAKLINE;
                    blnValid = false;
                } else {
                    if (!IsValidCreditCardNo(creditCardNo)) {
                        errorText += "Please enter 16 digits of your credit card." + Delimeter.BREAKLINE;
                        blnValid = false;
                    }
                }

                if (IsNullOrEmpty(cardExpiryDate)) {
                    errorText += "Please enter card expiry date." + Delimeter.BREAKLINE;
                    blnValid = false;
                }

                if (blnValid == false) {
                    showToaster(errorText, ToasterType.ERROR);
                    return false;
                }
            }
        }

        if ($("form#frmCheckOutPayment").valid() == false) {
            showToaster("Please fill all the required field first", ToasterType.ERROR);
            return false;
        }

        return true;
    }

    function SelectPaymentMethod() {
        if (!IsNullOrEmpty($('#PaymentMethodId').val())) {
            var paymentMethod = $('#PaymentMethodId option:selected').text();

            var paymentMethodName = paymentMethod;
            if (Contains(paymentMethod, '-')) {
                paymentMethodName = trim(paymentMethod.split('-')[1]);
            }

            if (trim(paymentMethodName) == 'Cash') {
                $('.divCreditCardInfo').hide();
            } else {
                $('.divCreditCardInfo').show();
            }

            $('#PaymentMethod').val(paymentMethod);
        }

    }

    function clearReservationChargesData() {
        $('form#frmSplitPayment #SplitPaymentId_1').val('');
        $('form#frmSplitPayment #CardExpiryDate_1').val('');
        $('.HideWhenCashIsSelected_1').show();

        //Remove all the rows except first one.
        $("form#frmSplitPayment  #tblSplitPayment tbody").find("tr:gt(0)").remove();

    }

</script>


<script type="text/javascript" src="~/Scripts/AdminLTE/input-mask/masking-input.js" data-autoinit="true"></script>