@model SuccessHotelierHub.Models.IndividualProfileVM
@using SuccessHotelierHub.Models
@{
    ViewBag.Title = "Create Individual Profile";
}

@{ 
    var sourceParam =  Convert.ToString(Request.QueryString["source"]);
    var qid = string.Empty;
    var btnCancelUrl = Url.Action("IndividualProfileList", "Profile");

    #region Set value added from Advance Profile Search Popup
    if (Request.QueryString["firstName"] != null && !string.IsNullOrWhiteSpace(Convert.ToString(Request.QueryString["firstName"])))
    {
        Model.FirstName = Convert.ToString(Request.QueryString["firstName"]);
    }

    if (Request.QueryString["lastName"] != null && !string.IsNullOrWhiteSpace(Convert.ToString(Request.QueryString["lastName"])))
    {
        Model.LastName = Convert.ToString(Request.QueryString["lastName"]);
    }
    if (Request.QueryString["titleId"] != null && !string.IsNullOrWhiteSpace(Convert.ToString(Request.QueryString["titleId"])))
    {
        Model.TitleId = Guid.Parse(Convert.ToString(Request.QueryString["titleId"]));
    }
    if (Request.QueryString["countryId"] != null && !string.IsNullOrWhiteSpace(Convert.ToString(Request.QueryString["countryId"])))
    {
        Model.CountryId = Convert.ToInt32(Request.QueryString["countryId"]);
    }
    if (Request.QueryString["phoneNo"] != null && !string.IsNullOrWhiteSpace(Convert.ToString(Request.QueryString["phoneNo"])))
    {
        Model.TelephoneNo = Convert.ToString(Request.QueryString["phoneNo"]);
    }
    if (Request.QueryString["zipCode"] != null && !string.IsNullOrWhiteSpace(Convert.ToString(Request.QueryString["zipCode"])))
    {
        Model.ZipCode = Convert.ToString(Request.QueryString["zipCode"]);
    }
    #endregion

    if (!string.IsNullOrWhiteSpace(sourceParam))
    {
        if (sourceParam == "RateQuery")
        {
            btnCancelUrl = Url.Action("RateQuery", "Reservation");
        }
        else if (sourceParam == "CreateReservation")
        {
            btnCancelUrl = Url.Action("Create", "Reservation");
        }
        else if (sourceParam == "EditReservation")
        {
            qid = Convert.ToString(Request.QueryString["rid"]);
            btnCancelUrl = Url.Action("Edit", "Reservation", new { Id = qid });
        }
        else if (sourceParam == "SearchArrivals")
        {
            btnCancelUrl = Url.Action("Arrivals", "FrontDesk");
        }
    }

    var preferenceGroupList = (List<SelectListItem>)ViewBag.PreferenceGroupList;
}


<style type="text/css">
    #tblProfileRemark thead {
        background-color: #367FA9;
        color: #fff;
    }
</style>

<section class="content-header">
    <h1>
        Individual Profile <small>Create</small>
    </h1>
    <ol class="breadcrumb m-r-xs">
        <li><a href="javascript:void(0);" onclick="setCurrentMenu('Dashboard','@Url.Content("~/Home/Index")');"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="">Individual Profile</li>
        <li class="active">Create</li>
    </ol>
</section>

<section class="content">    
    <div class="row" style="display:none;">
        <div class="col-md-12">
            <div class="form-group">
                <div class="alert alert-success alert-dismissible dvAlert" id="dvAlert" style="display:none;">
                    <button type="button" class="close" id="closeMessage" onclick="$('.alert').fadeOut(500);">
                        <span aria-hidden="true">×</span></button>
                        <span id="spMessage"></span>
                </div>
            </div>
        </div>        
    </div>

    <div class="box box-info">
        <div class="box-header with-border">
            <h3 class="box-title">Individual Profile Details</h3>
        </div>

        <!-- /.box-header -->
        <!-- form start -->   
        @using (Html.BeginForm("CreateIndividualProfile", "Profile", FormMethod.Post, new { id = "frmIndividualProfile", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!-- HIDDEN FIELD -->
            @Html.HiddenFor(m => m.ProfileTypeId)
            @Html.HiddenFor(m => m.PreferenceItems);
            <input type="hidden" id="Source" name="Source" value="@sourceParam" />
            <input type="hidden" id="Qid" name="Qid" value="@qid" />
            <!-- HIDDEN FIELD -->

            <div class="box-body pb-0 box-body-list">
                <div class="row">
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.LastName, new { @class = "required-label" })
                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last Name" })
                        @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                    </div>   
                    <div class="col-md-4 form-group">                        
                        @Html.LabelFor(m => m.FirstName, new { @class = "required-label" })  
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                        @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4 form-group">
                        <label for="TitleId">Title</label>
                        @Html.DropDownListFor(m => m.TitleId,
                             new SelectList((IEnumerable<SelectListItem>)ViewBag.TitleList, "Value", "Text"),
                             "Select Title",
                             new { @class = "form-control" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.Email)
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        
                    </div>
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.TelephoneNo, new { @class = "required-label" })
                        @Html.TextBoxFor(m => m.TelephoneNo, new { @class = "form-control", placeholder = "Telephone #" })
                        @Html.ValidationMessageFor(m => m.TelephoneNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.BusinessTelephoneNo)
                        @Html.TextBoxFor(m => m.BusinessTelephoneNo,
                           new { @class = "form-control", placeholder = "Business Telephone #" })                        
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.Address)
                        @Html.TextAreaFor(m => m.Address, new { @class = "form-control", @rows = "3", placeholder = "Address" })
                    </div>
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.HomeAddress)
                        @Html.TextAreaFor(m => m.HomeAddress, new { @class = "form-control", @rows = "3", placeholder = "Home Address" })                        
                    </div>
                    <div class="col-md-4 form-group">
                       @Html.LabelFor(m => m.CityName)
                        @Html.TextBoxFor(m => m.CityName, new { @class = "form-control", placeholder = "City" })
                    </div>                    
                </div>

                <div class="row">
                    <div class="col-md-4 form-group">
                       @Html.LabelFor(m => m.ZipCode)
                        @Html.TextBoxFor(m => m.ZipCode, new { @class = "form-control", placeholder = "Zip Code" })
                    </div>

                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.StateName)
                        @Html.TextBoxFor(m => m.StateName, new { @class = "form-control", placeholder = "State" })
                    </div>
                    <div class="col-md-4 form-group">
                        <label for="ddlCountry">Country</label>
                        @Html.DropDownListFor(m => m.CountryId, 
                                (IEnumerable<SelectListItem>)ViewBag.CountryList, "-- Select Country --",
                                htmlAttributes: new { @class = "form-control", @Id = "ddlCountry" })
                    </div>  
                </div>

                <div class="row">
                        <div class="col-md-4 form-group">
                            <label for="ddlNationality">Nationality</label>
                            @Html.DropDownListFor(m => m.NationalityId,
                                    (IEnumerable<SelectListItem>)ViewBag.NationalityList, "-- Select Nationality --",
                                    htmlAttributes: new { @class = "form-control", @Id = "ddlNationality" })
                        </div>
                    <div class="col-md-4 form-group">
                        <label for="VipId">VIP</label>
                        @Html.DropDownListFor(m => m.VipId,
                                     new SelectList((IEnumerable<SelectListItem>)ViewBag.VipList, "Value", "Text"),
                                    "Select VIP",
                                    new { @class = "form-control" })                        
                    </div>
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.CarRegistrationNo)
                        @Html.TextBoxFor(m => m.CarRegistrationNo, new { @class = "form-control text-uppercase", placeholder = "Car Registration #" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(m => m.PassportNo)
                        @Html.TextBoxFor(m => m.PassportNo, new { @class = "form-control", placeholder = "Passport #" })
                    </div>
                    <div class="col-md-4 form-group">
                        <label for="DOB">Date of Birth</label>
                        <div class="input-group date">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            @Html.TextBoxFor(m => m.DOB, "{0:dd/MM/yyyy}", new { @class = "form-control mydatepicker", placeholder = "dd/mm/yyyy" })
                        </div>
                    </div>
                    <div class="col-md-2 form-group m-t-lg m-r-n-lg">
                        <label for="IsMailingList" class="container1">
                            Mailing List
                            @Html.CheckBoxFor(m => m.IsMailingList)
                            <span class="checkmark"></span>
                        </label>
                    </div>
                    <div class="col-md-2 form-group m-t-lg m-r-n-lg">
                        <label for="IsActive" class="container1">
                            Is Active
                            @Html.CheckBoxFor(m => m.IsActive, new { @checked = "checked" })
                            <span class="checkmark"></span>
                        </label>
                    </div>
                    @*<div class="col-xs-2 form-group m-t-md m-t-md_media">
                        <button type="button" class="btn btn-info btn-sm" onclick="openPreferenceModal();">
                            Preference
                        </button>
                    </div>*@
                </div>
                @*<div class="row" style="display:none;" id="divSelectedPreference">
                    <div class="col-md-12 form-group">
                        <label for="ListOfSelectedPreferences" class="m-l-n col-sm-2 control-label m-r-n-xl"> Selected Preference : </label>
                        <div class="col-sm-10" id="ListOfSelectedPreferences">                            
                        </div>
                    </div>
                </div>*@

                <div class="row">
                    <hr class="m-t-none" />
                    <div class="col-lg-1 col-md-2 col-sm-12 form-group">
                        <button type="button" class="btn btn-info btn-sm" onclick="openPreferenceModal();">
                            Preference
                        </button>
                    </div>
                    <div class="col-lg-11 col-md-10 col-sm-12 form-group" style="display:none;" id="divSelectedPreference">
                        <label for="ListOfSelectedPreferences" class="m-l-n col-lg-3 col-md-4 col-sm-5 padding_right control-label m-r-n-xl"> Selected Preference : </label>
                        <div class="col-lg-9 col-md-8 col-sm-7 padding-zero" id="ListOfSelectedPreferences">
                        </div>
                    </div>
                </div>

                @*<div class="row">
                    <div class="col-md-12 form-group">
                        @Html.LabelFor(m => m.Remarks)
                        @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @rows = "3", placeholder = "Remarks" })
                    </div>
                </div>*@

                <div class="row">
                    <hr class="m-t-none" />
                    <div class="col-md-12 form-group">
                        @Html.LabelFor(m => m.Remarks)
                        @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", placeholder = "Remarks", rows = "3" })
                        <input type="hidden" id="hdnProfileRemarkId" name="hdnProfileRemarkId" value="" />
                        <input type="hidden" id="hdnTotalProfileRemarks" name="hdnTotalProfileRemarks" value="0" />
                    </div>
                    <div class="col-xs-3 form-group m-t-xl m-t-md_media" style="display:none;">
                        <button type="button" class="btn btn-primary btn-sm m-r-xs btnProfileRemarks" id="btnProfileRemarks">
                            Add Remarks
                        </button>
                        <button type="button" class="btn btn-default btn-sm btnCancelProfileRemarks" id="btnCancelProfileRemarks"
                                onclick="ClearRemarks();">
                            Cancel
                        </button>
                    </div>
                </div>
                <div class="row m-t-sm" id="divProfileRemark" style="display:none;">
                    <div class="col-md-12 table-responsive table_maxRemarks">
                        <table class="table table-bordered table-hover table-striped cursor-P" id="tblProfileRemark">
                            <thead>
                                <tr>
                                    <th class="width_50">Remarks</th>
                                    <th class="width_35">Track</th>
                                    <th class="width_15">Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>


            </div>
            <!-- /.box-body -->

            <div class="box-footer text-right">
                <button type="button" class="btn btn-success" onclick="return saveIndividualProfile();">OK</button>
                <a href="@btnCancelUrl" class="btn btn-danger">Cancel</a>  
            </div>
        }
    </div>
</section>

<!-- Preference Modal Popup START -->
<div class="modal fade" id="preferenceModal" role="dialog" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Preferences</h4>
            </div>
            <div class="modal-body modal-body_padding">  
                              
                @Html.Partial("~/Views/Preference/_Preferences.cshtml",
                        new ViewDataDictionary {
                                    { "Source", "CreateProfile" },
                                    { "PreferenceGroup", preferenceGroupList }
                                })
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
</div>
<!-- Preference Modal Popup END -->

<script type="text/javascript">

    $(document).ready(function () {

        //Label Bold.
        SetLabelBold();

        $("#frmIndividualProfile input[type='text'], textarea").change(function () {
            if (!IsNullOrEmpty($(this).val())) {
                data_needs_saving = true;
            }
        });

        $("#frmIndividualProfile input[type='text'], textarea").blur(function () {
            if (!IsNullOrEmpty($(this).val())) {
                $('label[for="' + $(this).attr("id") + '"]').addClass("label-bold");
            } else {
                $('label[for="' + $(this).attr("id") + '"]').removeClass("label-bold");
            }
        });

        $("#frmIndividualProfile select").change(function () {
            if (!IsNullOrEmpty($(this).val())) {
                data_needs_saving = true;
                $('label[for="' + $(this).attr("id") + '"]').addClass("label-bold");
            } else {
                $('label[for="' + $(this).attr("id") + '"]').removeClass("label-bold");
            }
        });


        $('.btnAdvanceSearchPreferenceOk').click(function (e) {
            var selectedPreferenceCount = 0;
            selectedPreferenceCount = $('form#frmAdvancePreferenceSearch #selectedPreferences span').length;

            if (!IsNullOrEmpty(selectedPreferenceCount) && selectedPreferenceCount > 0) {
                var selectedPreferenceElement = $('form#frmAdvancePreferenceSearch #selectedPreferences').html();
                $("#ListOfSelectedPreferences").html(selectedPreferenceElement);

                $('#divSelectedPreference').show();

                //Close Preference Search Modal.
                $('#preferenceModal').modal('toggle');
            }
        });

        //Profile Remarks
        $('form#frmIndividualProfile #btnProfileRemarks').click(function (e) {
            var remarkId = $('form#frmIndividualProfile #hdnProfileRemarkId').val();
            var profileId = $('form#frmIndividualProfile #Id').val();
            var remarks = $('form#frmIndividualProfile #Remarks').val();

            if (IsNullOrEmpty(remarks)) {
                showToaster("Please enter remarks", ToasterType.ERROR);
                return false;
            }
            if (!IsNullOrEmpty(remarkId)) {
                //Update remarks in table.
                UpdateProfileRemark(remarkId);
            } else {
                //Add remarks in table.
                AddProfileRemark();
            }
        });

    });

    function openPreferenceModal() {
        
        clearPreferenceSearch();

        var selectedPreferenceCount = 0;
        selectedPreferenceCount = $('#ListOfSelectedPreferences span').length

        if (!IsNullOrEmpty(selectedPreferenceCount) && selectedPreferenceCount > 0) {
            var selectedPreferenceElement = $('#ListOfSelectedPreferences').html();
            $("form#frmAdvancePreferenceSearch #selectedPreferences").html(selectedPreferenceElement)
            $("form#frmAdvancePreferenceSearch #divPreferences").show();
        } else {
            $("form#frmAdvancePreferenceSearch #selectedPreferences").html('')
            $("form#frmAdvancePreferenceSearch #divPreferences").hide();
        }

        selectPreferenceGroup("ROOOM FEATURES");
        $("form#frmAdvancePreferenceSearch #btnSearch").click();        
        $('#preferenceModal').modal('toggle');
    }

    function removePreferenceItem(element) {
        if (element) {
            var preferenceId = $(element).data("preferenceid");
            $(element).parent("span").remove();

            //Check Preference Modal Is Open.
            if ($('#preferenceModal').hasClass('in')) {
                //Uncheck preference after remove.
                $('form#frmAdvancePreferenceSearch #chkPreference_' + preferenceId).prop("checked", false);
            }
        }
    }

    function getSelectedPreferenceItemIds() {
        var preferenceIds = "";
        $("#ListOfSelectedPreferences span i").each(function () {
            preferenceIds += $(this).data("preferenceid") + ",";
        });

        preferenceIds = RemoveLastCharacter(preferenceIds, Delimeter.COMMA);
        return preferenceIds;
    }

    function generatePreferenceButton(preferenceId, preference) {
        return "<span class='btn btn-xs bg-maroon m-r-xs' id='spnPreference_" + preferenceId + "'>" + preference + " <i class='fa fa-remove m-l-sm' onclick='removePreferenceItem(this);' data-preferenceid='" + preferenceId + "'></i></span>";
    }


    function getState() {
        var country = $('#ddlCountry').val();

        if (!IsNullOrEmpty(country) && country != "0")
        {
            //Get State
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Common/GetState")',
                type: 'GET',
                data: {
                    countryId: parseInt(country)
                },
                success: function (result) {
                    if (!IsNullOrEmpty(result)) {
                        var optionHtml = "";
                        optionHtml += "<option value=''>-- Select State --</option>";
                        if (result.IsSuccess == true) {
                            for (i = 0; i < result.data.length; i++) {
                                optionHtml += "<option value='" + result.data[i].Value + "'>" + result.data[i].Text + "</option>";
                            }
                        }
                        $('#ddlState').html(optionHtml);
                    }
                }
            });
        }
        else
        {
            //Remove All Options Except The First
            $('#ddlState').children('option:not(:first)').remove();
            $('#ddlCity').children('option:not(:first)').remove();
        }
    }

    function getCity() {
        var country = $('#ddlCountry').val();
        var state = $('#ddlState').val();

        if (!IsNullOrEmpty(country) && country != "0") {
            //Get City
            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Common/GetCity")',
                type: 'GET',
                data: {
                    countryId: parseInt(country),
                    stateId: parseInt(state)
                },
                success: function (result) {
                    if (!IsNullOrEmpty(result)) {
                        var optionHtml = "";
                        optionHtml += "<option value=''>-- Select City --</option>";
                        if (result.IsSuccess == true) {
                            for (i = 0; i < result.data.length; i++) {
                                optionHtml += "<option value='" + result.data[i].Value + "'>" + result.data[i].Text + "</option>";
                            }
                        }
                        $('#ddlCity').html(optionHtml);
                    }
                }
            });
        }
        else {
            //Remove All Options Except The First
            $('#ddlState').children('option:not(:first)').remove();
            $('#ddlCity').children('option:not(:first)').remove();
        }
    }

    function validateIndividualProfile() {

        var errorMessage = "";
        var blnValid = true;


        if ($("#frmIndividualProfile").valid() == false) {
            showToaster("Please fill all the Required Fields first", ToasterType.ERROR);
            blnValid = false;
        }

        return blnValid;
    }


    function saveIndividualProfile() {

        if (validateIndividualProfile()) {

            //Get Selected Preference Items.
            var preferenceIds = getSelectedPreferenceItemIds();
            $('#PreferenceItems').val(preferenceIds);


            //Profile Remarks.
            var profileRemarkList = [];
            $("form#frmIndividualProfile #tblProfileRemark tbody tr").each(function () {
                var rowNumber = $(this).attr("data-rownumber");
                if (!IsNullOrEmpty(rowNumber)) {
                    var modelProfileRemark = {};

                    rowNumber = parseInt(rowNumber);

                    var remarks = $('#Remarks_' + rowNumber).val();
                    modelProfileRemark.Remarks = remarks;

                    var dateTimeObj = $('#RemarksCreatedOn_' + rowNumber).val();
                    modelProfileRemark.CreatedOn = dateTimeObj;

                    profileRemarkList.push(modelProfileRemark);
                }
            });

            var remarks = $("form#frmIndividualProfile #Remarks").val();
            if (!IsNullOrEmpty(remarks)) {
                var modelProfileRemark = {};
                modelProfileRemark.Remarks = remarks;
                modelProfileRemark.CreatedOn = new Date();

                profileRemarkList.push(modelProfileRemark);
            }

            var formData = $('#frmIndividualProfile').serializeObject();

            //Add additional property in form data.
            $.extend(formData, { RemarksList: profileRemarkList });

            $.ajax({
                beforeSend: function (xhr) {
                    showLoader();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ShowErrorMessage(jqXHR.status, errorThrown);
                },
                complete: function () {
                    hideLoader();
                },
                url: '@Url.Content("~/Profile/CreateIndividualProfile")',
                type: 'POST',
                //data: $('#frmIndividualProfile').serialize(),
                data: formData,
                success: function (response) {
                    if (response.IsSuccess == false) {
                        showToaster(response.errorMessage, ToasterType.ERROR);
                    }
                    else {
                        showToaster("Profile details saved successfully.", ToasterType.SUCCESS);

                        //reset the global varible once the data is saved
                        data_needs_saving = false;

                        if (response.IsExternalUrl) {
                            redirectTo(response.data);
                        } else {
                            setTimeout(function () {
                                redirectTo('@Url.Content("~/Profile/IndividualProfileList")');
                            }, 1000);
                        }

                    }
                }
            });
            return false;
        }
    }

    function SetLabelBold() {
        //Title
        if (!IsNullOrEmpty('@Model.TitleId'))
            $('label[for="TitleId"]').addClass("label-bold");

        //Email
        if (!IsNullOrEmpty('@Model.TitleId'))
            $('label[for="Email"]').addClass("label-bold");

        //BusinessTelephoneNo
        if (!IsNullOrEmpty('@Model.BusinessTelephoneNo'))
            $('label[for="BusinessTelephoneNo"]').addClass("label-bold");

        //Address
        if (!IsNullOrEmpty(RemoveLineBreak('@Model.Address')))
            $('label[for="Address"]').addClass("label-bold");

        //HomeAddress
        if (!IsNullOrEmpty(RemoveLineBreak('@Model.HomeAddress')))
            $('label[for="HomeAddress"]').addClass("label-bold");

        //Country
        if (!IsNullOrEmpty('@Model.CountryId'))
            $('label[for="ddlCountry"]').addClass("label-bold");

        //State
        if (!IsNullOrEmpty('@Model.StateId'))
            $('label[for="ddlState"]').addClass("label-bold");

        //StateName
        if (!IsNullOrEmpty('@Model.StateName'))
            $('label[for="StateName"]').addClass("label-bold");

        //City
        if (!IsNullOrEmpty('@Model.CityId'))
            $('label[for="ddlCity"]').addClass("label-bold");

        //CityName
        if (!IsNullOrEmpty('@Model.CityName'))
            $('label[for="CityName"]').addClass("label-bold");

        //Nationality
        if (!IsNullOrEmpty('@Model.NationalityId'))
            $('label[for="ddlNationality"]').addClass("label-bold");

        //ZipCode
        if (!IsNullOrEmpty('@Model.ZipCode'))
            $('label[for="ZipCode"]').addClass("label-bold");

        //Vip
        if (!IsNullOrEmpty('@Model.VipId'))
            $('label[for="VipId"]').addClass("label-bold");

        //CarRegistrationNo
        if (!IsNullOrEmpty('@Model.CarRegistrationNo'))
            $('label[for="CarRegistrationNo"]').addClass("label-bold");

        //PassportNo
        if (!IsNullOrEmpty('@Model.PassportNo'))
            $('label[for="PassportNo"]').addClass("label-bold");

        //DOB
        if (!IsNullOrEmpty('@Model.DOB'))
            $('label[for="DOB"]').addClass("label-bold");

        //Remarks
        if (!IsNullOrEmpty('@Model.Remarks'))
            $('label[for="Remarks"]').addClass("label-bold");
    }

    //Profile Remarks : START
    function AddProfileRemark() {

        var rowNumber = $('#hdnTotalProfileRemarks').val();

        if (!IsNullOrEmpty(rowNumber)) {
            rowNumber = parseInt(rowNumber) + 1;
        } else {
            rowNumber = 1;
        }

        var remarks = $('form#frmIndividualProfile #Remarks').val();

        var html = "";

        //Create New Row
        html += "<tr data-rownumber='" + rowNumber + "' id='tr_" + rowNumber + "'>";

        //Remarks
        html += "<td class='remarks'>";
        html += remarks;
        html += "<input type='hidden' id='Remarks_" + rowNumber + "' name='Remarks_" + rowNumber + "' value='" + remarks + "'/>";
        html += "</td>";

        //TrackLog
        var userName = '@LogInManager.UserName';
        var dateObj = new Date();
        var createdDate = GetDate(dateObj, DateFormat.DDMMYYYY);
        var createdTime = GetTime(dateObj);
        var trackLog = createdDate + " at " + createdTime + " added by " + userName;
        var createdOn = (GetDate(dateObj, DateFormat.DDMMYYYY) + ' ' + GetTime(dateObj));

        html += "<td class='tracklog'>";
        html += trackLog;
        html += "<input type='hidden' id='RemarksCreatedOn_" + rowNumber + "' name='RemarksCreatedOn_" + rowNumber + "' value='" + createdOn + "'/>";
        html += "</td>";



        //Action
        html += "<td>";
        //html += "<a href='javascript:void(0);' onclick='editProfileRemark(this);' class='text-success font_18 m-r-md'><i class='fa fa-edit'/></a>";
        html += "<a href='javascript:void(0);' onclick='deleteProfileRemark(this);' class='text-danger font_18 m-r-md'><i class='fa fa-trash'/></a>";
        html += "</td>";

        html += "</tr>";


        $('form#frmIndividualProfile #tblProfileRemark tbody').prepend(html);

        $('#hdnTotalProfileRemarks').val(rowNumber);

        ClearRemarks();

        $("form#frmIndividualProfile #divProfileRemark").show();
    }


    function UpdateProfileRemark(id) {
        var rowNumber = id;

        if (!IsNullOrEmpty(rowNumber)) {
            var remarks = $('form#frmIndividualProfile #Remarks').val();
            
            var html = "";
            var trId = "#tr_" + rowNumber;

            //Remarks
            html = "";
            html += remarks;
            html += "<input type='hidden' id='Remarks_" + rowNumber + "' name='Remarks_" + rowNumber + "' value='" + remarks + "'/>";
            $('form#frmIndividualProfile #tblProfileRemark tbody ' + trId + ' #Remarks_' + rowNumber).val(remarks);
            $('form#frmIndividualProfile #tblProfileRemark tbody ' + trId + ' td.remarks').html(html);

            //TrackLog
            var userName = '@LogInManager.UserName';
            var dateObj = new Date();
            var createdDate = GetDate(dateObj, DateFormat.DDMMYYYY);
            var createdTime = GetTime(dateObj);
            var createdOn = (GetDate(dateObj, DateFormat.DDMMYYYY) + ' ' + GetTime(dateObj));
            var trackLog = createdDate + " at " + createdTime + " added by " + userName;

            html = "";
            html += trackLog;
            html += "<input type='hidden' id='RemarksCreatedOn_" + rowNumber + "' name='RemarksCreatedOn_" + rowNumber + "' value='" + createdOn + "'/>";
            $('form#frmIndividualProfile #tblProfileRemark tbody ' + trId + ' td.tracklog').html(html);

            //showToaster("Remark updated successfully", ToasterType.SUCCESS);

            ClearRemarks();
        }
    }

    function editProfileRemark(element) {

        if (!IsNullOrEmpty(element)) {
            var id = $(element).closest("tr").attr("data-rownumber");
            $('form#frmIndividualProfile #hdnProfileRemarkId').val(id);
            $('form#frmIndividualProfile #Remarks').val($('#Remarks_' + id).val());
            $('form#frmIndividualProfile #btnProfileRemarks').html("Update Remarks");
        }
    }

    function deleteProfileRemark(element) {
        $(element).closest("tr").remove();
        ClearRemarks();
        //showToaster("Remark deleted successfully", ToasterType.SUCCESS);
    }

    function ClearRemarks() {
        $('form#frmIndividualProfile #hdnProfileRemarkId').val('');
        $('form#frmIndividualProfile #Remarks').val('');
        $('form#frmIndividualProfile #btnProfileRemarks').html("Add Remarks");
    }
    //Profile Remarks : END

    window.onbeforeunload = function () {
        //Check the global variable - if the data needs saving then take user confirmation
        if (data_needs_saving) {
            return "There are unsaved data on the page, do you want to save or discard?";
        } else {
            return;
        }
    };

</script>