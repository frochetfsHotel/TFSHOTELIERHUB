@model SuccessHotelierHub.Models.PaginationVM

<nav aria-label="...">
    <div class="hidden-xs">
        <ul class="pagination pagination-sm" style="margin:0;">
            <li id="liFirst" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Previous" onclick="return @(Model.TokenForEnableDisableButtons + "FirstButtonClick")(this, event)">
                    <span>First</span>
                </a>
            </li>

            <li id="liPrevious" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Previous" onclick="return @(Model.TokenForEnableDisableButtons + "PreviousButtonClick")(this, event)">
                    <span>Previous</span>
                </a>
            </li>

            <li class="page-item pull-left liPageNum" style="width:30%;">
                <input id="txtPageNumber" type="text" class="form-control pageNumTextBox pull-left" onkeydown="return CheckKey(this, event)" onblur="return PaginationGoToSpecificPage(this, event)" />
                <span class="pull-right spanPageNum hovered">of <span id="spanTotalPages"></span> Pages.</span>
            </li>

            <li id="liNext" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Next" onclick="return @(Model.TokenForEnableDisableButtons + "NextButtonClick")(this, event)">
                    <span>Next</span>
                </a>
            </li>

            <li id="liLast" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Next" onclick="return @(Model.TokenForEnableDisableButtons + "LastButtonClick")(this, event)">
                    <span>Last</span>
                </a>
            </li>
        </ul>
        </div>

    <div class="visible-xs">
        <ul class="pagination pagination-sm" style="margin:0;">
            <li id="liFirst" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Previous" onclick="return @(Model.TokenForEnableDisableButtons + "FirstButtonClick")(this, event)">
                    @*<span>First</span>*@
                    <span class="glyphicon glyphicon-step-backward"></span>
                </a>
            </li>

            <li id="liPrevious" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Previous" onclick="return @(Model.TokenForEnableDisableButtons + "PreviousButtonClick")(this, event)">
                    @*<span>Previous</span>*@
                    <span class="glyphicon glyphicon-triangle-left"></span>
                </a>
            </li>

            <li class="page-item pull-left liPageNum" style="width:30%;">
                <input id="txtPageNumber" type="text" class="form-control pageNumTextBox pull-left" onkeydown="return CheckKey(this, event)" onblur="return PaginationGoToSpecificPage(this, event)" />
                @*<span class="pull-right spanPageNum hovered">of <span id="spanTotalPages"></span> Pages.</span>*@
            </li>

            <li id="liNext" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Next" onclick="return @(Model.TokenForEnableDisableButtons + "NextButtonClick")(this, event)">
                    @*<span>Next</span>*@
                    <span class="glyphicon glyphicon-triangle-right"></span>
                </a>
            </li>

            <li id="liLast" class="page-item">
                <a class="page-link hovered" href="javascript:void(0)" aria-label="Next" onclick="return @(Model.TokenForEnableDisableButtons + "LastButtonClick")(this, event)">
                    @*<span>Last</span>*@
                    <span class="glyphicon glyphicon-step-forward"></span>
                </a>
            </li>
        </ul>
    </div>
</nav>

<script type="text/javascript">

    var _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = 1;
    var _paginationTotalPage@(Model.TokenForEnableDisableButtons) = 0;

    if ('@(Model.TokenForEnableDisableButtons)' != "") {
        function @("PagerDataBound" + Model.TokenForEnableDisableButtons)(_currentPage, _recordPerPage, _totalRecords) {
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = _currentPage;
            _paginationTotalPage@(Model.TokenForEnableDisableButtons) = CountPages(_totalRecords, _recordPerPage)
            FormatPagination()
        }
    }

    function CheckIsButtonEnabled(itm, e){
        var _parentLi = $(itm).parent()
        return _parentLi.hasClass('disabled')
    }

    function @(Model.TokenForEnableDisableButtons + "FirstButtonClick")(itm, e) {
        var IsEnabled = CheckIsButtonEnabled(itm, e)
        if (IsEnabled == false) {
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = 1;
            @(Model.PageChangeMethod)(_paginationCurrentPage@(Model.TokenForEnableDisableButtons))
        }
    }

    function @(Model.TokenForEnableDisableButtons + "PreviousButtonClick")(itm, e) {
        var IsEnabled = CheckIsButtonEnabled(itm, e)
        if (IsEnabled == false) {
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) -=1;
            @(Model.PageChangeMethod)(_paginationCurrentPage@(Model.TokenForEnableDisableButtons))
        }
    }

    function @(Model.TokenForEnableDisableButtons + "NextButtonClick")(itm, e) {
        var IsEnabled = CheckIsButtonEnabled(itm, e)
        if (IsEnabled == false) {
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) +=1;
            @(Model.PageChangeMethod)(_paginationCurrentPage@(Model.TokenForEnableDisableButtons))
        }
    }

    function @(Model.TokenForEnableDisableButtons + "LastButtonClick")(itm, e) {
        var IsEnabled = CheckIsButtonEnabled(itm, e)
        if (IsEnabled == false) {
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = _paginationTotalPage@(Model.TokenForEnableDisableButtons);
            @(Model.PageChangeMethod)(_paginationCurrentPage@(Model.TokenForEnableDisableButtons))
        }
    }

    function CountPages(totalRecords, recordsPerPage){
        if (totalRecords == 0)
        {
            return 1;
        }
        else{
            return Math.ceil(totalRecords / recordsPerPage);
        }
    }

    function FormatPagination(){

        $('#txtPageNumber').val('')
        $('#txtPageNumber').val(_paginationCurrentPage@(Model.TokenForEnableDisableButtons))
        $('#spanTotalPages').html(Math.floor(_paginationTotalPage@(Model.TokenForEnableDisableButtons)))

        //for first button
        if (_paginationCurrentPage@(Model.TokenForEnableDisableButtons) == 1) {
            $('#liFirst').addClass('disabled')
        }
        else
        {
            $('#liFirst').removeClass('disabled')
        }

        //for Previous button
        if (_paginationCurrentPage@(Model.TokenForEnableDisableButtons) <= 1) {
            $('#liPrevious').addClass('disabled')
        }
        else{
            $('#liPrevious').removeClass('disabled')
        }

        //for last button
        if (_paginationCurrentPage@(Model.TokenForEnableDisableButtons) == _paginationTotalPage@(Model.TokenForEnableDisableButtons)) {
            $('#liLast').addClass('disabled')
            $('#liNext').addClass('disabled')
        }
        else
        {
            $('#liLast').removeClass('disabled')
            $('#liNext').removeClass('disabled')
        }
    }

    function CheckKey(itm, e){
        //enter click
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
           (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
           (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }

        if (e.keyCode == 13) {
            return PaginationGoToSpecificPage(itm, e)
        }
    }

    function PaginationGoToSpecificPage(itm, e){
        var enteredNum = Number($(itm).val());
        if (enteredNum != undefined && enteredNum != "" && enteredNum != NaN && _paginationCurrentPage@(Model.TokenForEnableDisableButtons) != enteredNum) {
            AutoSetPageNumber(enteredNum)
            @(Model.PageChangeMethod)(_paginationCurrentPage@(Model.TokenForEnableDisableButtons))
            return true;
        }
        return false;
    }

    function AutoSetPageNumber(enteredNum){
        if (enteredNum <= 0) {
            $('#txtPageNumber').val(1)
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = 1;
        }
        else if (enteredNum > _paginationTotalPage@(Model.TokenForEnableDisableButtons)) {
            $('#txtPageNumber').val(_paginationTotalPage@(Model.TokenForEnableDisableButtons))
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = _paginationTotalPage@(Model.TokenForEnableDisableButtons);
        }
        else{
            _paginationCurrentPage@(Model.TokenForEnableDisableButtons) = enteredNum;
        }
    }
</script>
